---- Innehåll från: C:\git\Product-Service\.gitattributes ----
/mvnw text eol=lf
*.cmd text eol=crlf


---- Innehåll från: C:\git\Product-Service\.gitignore ----
HELP.md
target/
.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

# Local H2 files
/data/*.mv.db
/data/*.trace.db

# Local patches
*.patch


---- Innehåll från: C:\git\Product-Service\Dockerfile ----
# Use an official Maven image to build the app
FROM maven:3.9.6-eclipse-temurin-21 AS build
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN mvn clean package -DskipTests

# Use a minimal JRE image to run the app
FROM eclipse-temurin:21-jre
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]


---- Innehåll från: C:\git\Product-Service\fix-product-controllers.patch ----
diff --git a/src/main/java/se/moln/productservice/controller/ProductQueryController.java b/src/main/java/se/moln/productservice/controller/ProductQueryController.java
deleted file mode 100644
index 1111111..0000000
--- a/src/main/java/se/moln/productservice/controller/ProductQueryController.java
+++ /dev/null
@@ -1,200 +0,0 @@
-// Removed to eliminate endpoint collisions on GET /api/products and /api/products/{id}.
-// Functionality moved into ProductController with unique paths (/active, /by-category/{categoryId}).

diff --git a/src/main/java/se/moln/productservice/controller/ProductReadController.java b/src/main/java/se/moln/productservice/controller/ProductReadController.java
deleted file mode 100644
index 2222222..0000000
--- a/src/main/java/se/moln/productservice/controller/ProductReadController.java
+++ /dev/null
@@ -1,120 +0,0 @@
-// Removed to eliminate endpoint collision on GET /api/products/{id}.
-// Functionality moved into ProductController.

diff --git a/src/main/java/se/moln/productservice/controller/ProductController.java b/src/main/java/se/moln/productservice/controller/ProductController.java
deleted file mode 100644
index 3333333..0000000
--- a/src/main/java/se/moln/productservice/controller/ProductController.java
+++ /dev/null
@@ -1,300 +0,0 @@
-// Replaced by consolidated version below.

diff --git a/src/main/java/se/moln/productservice/controller/ProductController.java b/src/main/java/se/moln/productservice/controller/ProductController.java
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/src/main/java/se/moln/productservice/controller/ProductController.java
@@ -0,0 +1,320 @@
+package se.moln.productservice.controller;
+
+import io.swagger.v3.oas.annotations.Operation;
+import io.swagger.v3.oas.annotations.Parameter;
+import io.swagger.v3.oas.annotations.media.Content;
+import io.swagger.v3.oas.annotations.media.Schema;
+import io.swagger.v3.oas.annotations.responses.ApiResponse;
+import io.swagger.v3.oas.annotations.responses.ApiResponses;
+import jakarta.validation.Valid;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+import se.moln.productservice.dto.PageResponse;
+import se.moln.productservice.dto.ProductRequest;
+import se.moln.productservice.dto.ProductResponse;
+import se.moln.productservice.service.ProductImageAppService;
+import se.moln.productservice.service.ProductQueryService;
+import se.moln.productservice.service.ProductReadService;
+import se.moln.productservice.service.ProductService;
+
+import java.io.IOException;
+import java.math.BigDecimal;
+import java.util.List;
+import java.util.UUID;
+
+@RestController
+@RequestMapping("/api/products")
+public class ProductController {
+
+    private final ProductService service;
+    private final ProductImageAppService imageService;
+    private final ProductReadService readService;
+    private final ProductQueryService queryService;
+
+    public ProductController(ProductService service,
+                             ProductImageAppService imageService,
+                             ProductReadService readService,
+                             ProductQueryService queryService) {
+        this.service = service;
+        this.imageService = imageService;
+        this.readService = readService;
+        this.queryService = queryService;
+    }
+
+    @PostMapping
+    public ResponseEntity<ProductResponse> create(@Valid @RequestBody ProductRequest req) {
+        System.out.println("kontroller");
+        System.out.println("hello");
+        return ResponseEntity.status(HttpStatus.CREATED).body(service.create(req));
+    }
+
+    @GetMapping
+    public ResponseEntity<PageResponse<ProductResponse>> getAllProducts(
+            @RequestParam(defaultValue = "0") int page,
+            @RequestParam(defaultValue = "5") int size,
+            @RequestParam(defaultValue = "name") String sortBy,
+            @RequestParam(defaultValue = "asc") String sortDir){
+        System.out.println("Hämtar alla produkter med paginering från kontroller");
+
+        Sort sort = sortDir.equalsIgnoreCase("desc") ?
+                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
+
+        Pageable pageable = PageRequest.of(page, size, sort);
+        Page<ProductResponse> products = service.getAllProducts(pageable);
+        PageResponse<ProductResponse> response = new PageResponse<>(products);
+        return ResponseEntity.ok(response);
+    }
+
+    @GetMapping("/all")
+    public ResponseEntity<List<ProductResponse>> getAllProductsWithoutPagination(){
+        List<ProductResponse> products = service.getAllProductsWithoutPagination();
+        return ResponseEntity.ok(products);
+    }
+
+    @GetMapping("/search")
+    public ResponseEntity<List<ProductResponse>> searchProducts(
+            @RequestParam(required = false) String name,
+            @RequestParam(required = false) String categoryName,
+            @RequestParam(required = false) BigDecimal minPrice,
+            @RequestParam(required = false) BigDecimal maxPrice
+    ) {
+        List<ProductResponse> products = service.searchProducts(name, categoryName, minPrice, maxPrice);
+        System.out.println("hello");
+        return ResponseEntity.ok(products);
+    }
+
+    // === Bilduppladdning (återställd) ===
+    @Operation(
+            summary = "Ladda upp produktbild",
+            description = "Skicka som multipart/form-data med fältet 'file'. Bilden sparas lokalt och kopplas till produkten."
+    )
+    @ApiResponses({
+            @ApiResponse(
+                    responseCode = "201",
+                    description = "Created",
+                    content = @Content(
+                            mediaType = "application/json",
+                            schema = @Schema(implementation = ProductResponse.class)
+                    )
+            ),
+            @ApiResponse(responseCode = "404", description = "Product not found"),
+            @ApiResponse(responseCode = "400", description = "Invalid input")
+    })
+    @PostMapping(
+            path = "/{id}/images",
+            consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
+            produces = MediaType.APPLICATION_JSON_VALUE
+    )
+    public ResponseEntity<ProductResponse> uploadImage(
+            @Parameter(name = "id", description = "Produktens UUID", example = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
+            @PathVariable UUID id,
+            @Parameter(description = "Bildfil (jpg/png/webp)")
+            @RequestPart("file") MultipartFile file
+    ) throws IOException {
+        return ResponseEntity.status(HttpStatus.CREATED)
+                .body(imageService.uploadImage(id, file));
+    }
+
+    // === Hämta produkt per ID (flyttat in) ===
+    @GetMapping("/{id}")
+    public ResponseEntity<ProductResponse> getById(@PathVariable UUID id) {
+        return ResponseEntity.ok(readService.getById(id));
+    }
+
+    // === Lista aktiva (unik path för att undvika krock med root) ===
+    @GetMapping("/active")
+    public ResponseEntity<Page<ProductResponse>> listActive(
+            @RequestParam(defaultValue = "0") int page,
+            @RequestParam(defaultValue = "10") int size) {
+        return ResponseEntity.ok(queryService.listActive(page, size));
+    }
+
+    // === Lista per kategori (flyttat in) ===
+    @GetMapping("/by-category/{categoryId}")
+    public ResponseEntity<Page<ProductResponse>> listByCategory(
+            @PathVariable UUID categoryId,
+            @RequestParam(defaultValue = "0") int page,
+            @RequestParam(defaultValue = "10") int size) {
+        return ResponseEntity.ok(queryService.listByCategory(categoryId, page, size));
+    }
+}


---- Innehåll från: C:\git\Product-Service\mvnw ----
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"


---- Innehåll från: C:\git\Product-Service\mvnw.cmd ----
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"


---- Innehåll från: C:\git\Product-Service\pom.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>se.moln</groupId>
    <artifactId>product-service</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>product-service</name>
    <description>product-service</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>21</java.version>
        <jjwt.version>0.11.5</jjwt.version>
        <springdoc.version>2.8.9</springdoc.version>
        <jacoco.version>0.8.12</jacoco.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- OpenAPI/Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <!-- IDE-stöd för properties -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- JSON logging -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>7.4</version>
        </dependency>

        <!-- HTTP request/response logging with masking -->
        <dependency>
            <groupId>org.zalando</groupId>
            <artifactId>logbook-spring-boot-starter</artifactId>
            <version>3.8.0</version>
        </dependency>

        <!-- Actuator for health/info -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Security to protect admin-only endpoints -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Optional: Distributed tracing (traceId/spanId in MDC) -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-otlp</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>


---- Innehåll från: C:\git\Product-Service\README.md ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\request.http ----
### Create product
POST http://localhost:8080/api/products
Content-Type: application/json

{
  "name": "iphone Pro 2000",
  "description": "Apple laptop för utvecklare",
  "price": 29999.99,
  "currency": "SEK",
  "categoryId": null,
  "categoryName": "Electronik",
  "stockQuantity": 10,
  "attributes": {
    "color": "space gray",
    "ram": "32GB",
    "storage": "1TB SSD"
  },
  "imageUrls": [
    "https://example.com/images/macbook.jpg"
  ]
}




### hämta products
GET http://localhost:8080/api/products?page=4&size=5&sortBy=id&sortDir=asc

### hämta products all
GET http://localhost:8081/api/products/all


#####################################
### search

### Get All Products (No Filters)
GET http://localhost:8080/api/products/search

### Search by Name (Partial Match)
# Expects: All products with "iPhone" in their name.
GET http://localhost:8080/api/products/search?name=iPhone

### Search by Category Name
# Expects: All products belonging to the "Laptops" category.
GET http://localhost:8080/api/products/search?categoryName=Laptops

### Search by Minimum Price
# Expects: All products with a price of 10,000 or more.
GET http://localhost:8080/api/products/search?minPrice=10000

### Search by Maximum Price
# Expects: All products with a price of 20,000 or less.
GET http://localhost:8080/api/products/search?maxPrice=20000

### Search by Price Range (Min and Max)
# Expects: All products with a price between 8,000 and 15,000.
GET http://localhost:8080/api/products/search?minPrice=8000&maxPrice=15000

### Search by all Filters (Name, Category, and Price Range)
# Expects: Products named "MacBook Pro" in the "Laptops" category with a price between 10,000 and 25,000.
GET http://localhost:8080/api/products/search?name=MacBook&categoryName=Laptops&minPrice=10000&maxPrice=25000

### Search with an Invalid Category
# Expects: An empty list or a 404 Not Found if your database returns a specific error for non-existent categories.
GET http://localhost:8080/api/products/search?categoryName=NonExistentCategory

### Search with an invalid or non-matching Name
# Expects: An empty list.
GET http://localhost:8080/api/products/search?name=ThisProductDoesNotExist

### Security Test: SQL Injection Attempt
# This is a critical test. It should return an empty list because your
# JPA Specification implementation handles the input as data, not code.
GET http://localhost:8080/api/products/search?name=test%27%20OR%201%3D1%20--

#################################################
### pagination

### 1. Hämta första sidan med standardvärden
# Förväntat resultat: Sida 0 med 5 produkter, sorterade efter namn i stigande ordning (standardvärden).
GET http://localhost:8080/api/products

### 2. Hämta första sidan med anpassad sidstorlek
# Förväntat resultat: Sida 0 med 3 produkter, sorterade efter namn i stigande ordning.
GET http://localhost:8080/api/products?size=3

### 3. Hämta en specifik sida
# Förväntat resultat: Sida 1 med 5 produkter, sorterade efter namn i stigande ordning.
GET http://localhost:8080/api/products?page=1

### 4. Hämta en specifik sida med anpassad sidstorlek
# Förväntat resultat: Sida 1 med 2 produkter, sorterade efter namn i stigande ordning.
GET http://localhost:8080/api/products?page=1&size=2

### 5. Sortera i fallande ordning
# Förväntat resultat: Sida 0 med 5 produkter, sorterade efter pris i fallande ordning.
GET http://localhost:8080/api/products?sortBy=price&sortDir=desc

### 6. Sortera i stigande ordning
# Förväntat resultat: Sida 0 med 5 produkter, sorterade efter pris i stigande ordning.
GET http://localhost:8080/api/products?sortBy=price&sortDir=asc

### 7. Kombinera sida, storlek och sortering
# Förväntat resultat: Sida 2 med 10 produkter, sorterade efter pris i fallande ordning.
GET http://localhost.com:8080/api/products?page=2&size=10&sortBy=price&sortDir=desc

### 8. Ogiltig sidnumrering (negativt värde)
# Förväntat resultat: Sida 0 (automatiskt justerat), 5 produkter.
GET http://localhost:8080/api/products?page=-1

### 9. Ogiltig sidnumrering (för högt värde)
# Förväntat resultat: 200 OK med en tom lista.
GET http://localhost:8080/api/products?page=99999

### 10. Ogiltigt sorteringsfält
# Förväntat resultat: 500 Internal Server Error (Spring kan inte sortera efter ett fält som inte finns).
GET http://localhost:8080/api/products?sortBy=nonexistentField



### Get product by ID (read-only)
GET http://localhost:8081/api/products/{{productId}}


#########################################################
@host = http://localhost:8081

### Skapa en produkt
// Skapa en initial produkt.
POST {{host}}/api/products
Content-Type: application/json

{
  "name": "Original Product",
  "description": "This is the initial product.",
  "price": 99.99,
  "currency": "USD",
  "categoryId": null,
  "stockQuantity": 50,
  "active": true,
  "attributes": {
    "size": "M",
    "material": "cotton"
  },
  "imageUrls": [
    "https://example.com/initial-image-1.jpg",
    "https://example.com/initial-image-2.jpg"
  ]
}


### Testfall 1: Uppdatera grundläggande fält
// Uppdaterar namn, pris, beskrivning, och behåller befintliga bilder.
PUT {{host}}/api/products/cfb4666f-20bd-418b-899e-5130b5eaaa84
Content-Type: application/json

{
  "name": "Updated Smartphone Model",
  "description": "Updated flagship phone with new features.",
  "price": 1499.00,
  "currency": "EUR",
  "categoryId": null,
  "stockQuantity": 50,
  "active": true,
  "attributes": {
    "size": "M",
    "material": "cotton"
  },
  "imageUrls": [
    "https://example.com/initial-image-1.jpg",
    "https://example.com/initial-image-2.jpg"
  ]
}


### Testfall 2: Uppdatera kategori med namn (skapa ny kategori) och ändra bilder
// Denna testar om en ny kategori kan skapas och länkas, samtidigt som bilderna byts ut.
PUT {{host}}/api/products/cfb4666f-20bd-418b-899e-5130b5eaaa84
Content-Type: application/json

{
  "name": "Updated Smartphone Model",
  "description": "Updated flagship phone with new features.",
  "price": 1499.00,
  "currency": "EUR",
  "categoryName": "Smartphones",
  "stockQuantity": 50,
  "active": true,
  "attributes": {
    "size": "M",
    "material": "cotton"
  },
  "imageUrls": [
    "https://example.com/new-smartphone-front.jpg",
    "https://example.com/new-smartphone-back.jpg",
    "https://example.com/new-smartphone-side.jpg"
  ]
}


### Testfall 3: Uppdatera attribut, stock quantity och ta bort bilder
// Denna testar om attributen kan bytas ut, lagersaldot ändras och alla bilder tas bort genom att skicka en tom lista.
PUT {{host}}/api/products/cfb4666f-20bd-418b-899e-5130b5eaaa84
Content-Type: application/json

{
  "name": "Updated Smartphone Model",
  "description": "Updated flagship phone with new features.",
  "price": 1499.00,
  "currency": "EUR",
  "categoryId": null,
  "stockQuantity": 45,
  "active": true,
  "attributes": {
    "color": "space black",
    "storage": "512GB"
  },
  "imageUrls": []
}


### Testfall 4: Felhantering - ogiltigt produkt-ID
// Ska returnera 404 (Not Found) eftersom ID:t inte existerar.
PUT {{host}}/api/products/00000000-0000-0000-0000-000000000000
Content-Type: application/json

{
  "name": "Non-existent product",
  "description": "Should fail",
  "price": 100.00,
  "currency": "USD",
  "categoryId": null,
  "stockQuantity": 1,
  "active": true,
  "imageUrls": []
}


### Testfall 5: Felhantering - ogiltig categoryId
// Ska returnera 404 (Not Found) eftersom kategorin inte finns.
PUT {{host}}/api/products/cfb4666f-20bd-418b-899e-5130b5eaaa84
Content-Type: application/json

{
  "name": "Product with invalid category",
  "description": "Should fail",
  "price": 100.00,
  "currency": "USD",
  "categoryId": "00000000-0000-0000-0000-000000000000",
  "stockQuantity": 1,
  "active": true,
  "imageUrls": [
    "https://example.com/image.jpg"
  ]
}

---- Innehåll från: C:\git\Product-Service\testPush.md ----
test push

---- Innehåll från: C:\git\Product-Service\.git\COMMIT_EDITMSG ----
Update OpenApiConfig and CorsConfig


---- Innehåll från: C:\git\Product-Service\.git\config ----
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[submodule]
	active = .
[remote "origin"]
	url = https://github.com/Moln-integration/Product-Service.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[lfs]
	repositoryformatversion = 0
[branch "johan-test"]
	remote = origin
	merge = refs/heads/johan-test


---- Innehåll från: C:\git\Product-Service\.git\description ----
Unnamed repository; edit this file 'description' to name the repository.


---- Innehåll från: C:\git\Product-Service\.git\FETCH_HEAD ----
e9a15357ae23b56edd088226263465aa9266cd71		branch 'main' of https://github.com/Moln-integration/Product-Service
a36401289fac43b0efa9526df7180d7a872d0a7d	not-for-merge	branch 'CRUD' of https://github.com/Moln-integration/Product-Service
49ccdbcfb39c569cdc8468a9ed182412705bb78a	not-for-merge	branch 'CRUD-fort' of https://github.com/Moln-integration/Product-Service
2793529a7e2aacac0978457edba903b95aeb01cc	not-for-merge	branch 'Implement-logging-etc' of https://github.com/Moln-integration/Product-Service
e86d1e35ecfcdb04e2ca5e945a1bca184b8bf559	not-for-merge	branch 'Mergin-Ismetes-new-code-to-hopefully-fix-everything' of https://github.com/Moln-integration/Product-Service
90778c642307dc2f45628bf02441d542d4614bc9	not-for-merge	branch 'UD' of https://github.com/Moln-integration/Product-Service
fd87577573f7b4d599822ba967cbf10149b75101	not-for-merge	branch 'Updated-ProductSpecificationsTest' of https://github.com/Moln-integration/Product-Service
3d64709767dbcbac855aa06e9720b7322be9e587	not-for-merge	branch 'feature/product-api' of https://github.com/Moln-integration/Product-Service
ca82846976c6fa1f33e54fdfd128274be73b9897	not-for-merge	branch 'fix' of https://github.com/Moln-integration/Product-Service
5ee16817558124d3cfd6fd70410b1f45f09a194a	not-for-merge	branch 'github-actions-flow' of https://github.com/Moln-integration/Product-Service
b201fa6a7227d080bfca32f33f61e54d73fc282a	not-for-merge	branch 'image-upload-feature' of https://github.com/Moln-integration/Product-Service
2039fedb96464fc15e25b39081cd180567ebeaec	not-for-merge	branch 'johan-test' of https://github.com/Moln-integration/Product-Service
6dbd9d3e8b72f2e44d59e7d3de8b26ff6b237fd3	not-for-merge	branch 'push/product-api' of https://github.com/Moln-integration/Product-Service
260e6675ac57c85eb6738e78031d5223f2413ca4	not-for-merge	branch 'unified-productcontroller' of https://github.com/Moln-integration/Product-Service
85a46046dfffd68227ee3932e84b096733cb82e8	not-for-merge	branch 'unified-productcontroller-V2' of https://github.com/Moln-integration/Product-Service
bcbd91b26c11e96351a14d2c6c8c2236b0aba913	not-for-merge	branch 'unit-tests' of https://github.com/Moln-integration/Product-Service
fdd7ae4b198329734b650c9b2f5704ccfe936292	not-for-merge	branch 'update-product' of https://github.com/Moln-integration/Product-Service
b3d20642d998e786782a74867b0aca108326b66d	not-for-merge	branch 'updating-github-workflow' of https://github.com/Moln-integration/Product-Service


---- Innehåll från: C:\git\Product-Service\.git\HEAD ----
ref: refs/heads/main


---- Innehåll från: C:\git\Product-Service\.git\index ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb6 in position 13: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\ORIG_HEAD ----
25d7aa3ac6f8dd12bef68ca13627ce383ca551db


---- Innehåll från: C:\git\Product-Service\.git\packed-refs ----
# pack-refs with: peeled fully-peeled sorted 
b12f4fede078eae5e619dff047a88367ee544bdb refs/remotes/origin/main


---- Innehåll från: C:\git\Product-Service\.git\hooks\applypatch-msg.sample ----
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


---- Innehåll från: C:\git\Product-Service\.git\hooks\commit-msg.sample ----
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


---- Innehåll från: C:\git\Product-Service\.git\hooks\fsmonitor-watchman.sample ----
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


---- Innehåll från: C:\git\Product-Service\.git\hooks\post-update.sample ----
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-applypatch.sample ----
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-commit.sample ----
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-merge-commit.sample ----
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-push.sample ----
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-rebase.sample ----
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


---- Innehåll från: C:\git\Product-Service\.git\hooks\pre-receive.sample ----
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


---- Innehåll från: C:\git\Product-Service\.git\hooks\prepare-commit-msg.sample ----
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


---- Innehåll från: C:\git\Product-Service\.git\hooks\push-to-checkout.sample ----
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


---- Innehåll från: C:\git\Product-Service\.git\hooks\sendemail-validate.sample ----
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


---- Innehåll från: C:\git\Product-Service\.git\hooks\update.sample ----
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


---- Innehåll från: C:\git\Product-Service\.git\info\exclude ----
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


---- Innehåll från: C:\git\Product-Service\.git\logs\HEAD ----
0000000000000000000000000000000000000000 b12f4fede078eae5e619dff047a88367ee544bdb Rammsterr <94johram@gafe.molndal.se> 1756801151 +0200	clone: from https://github.com/Moln-integration/Product-Service.git
b12f4fede078eae5e619dff047a88367ee544bdb 8893726e27d3f912684f1789ab234a3887c18dba Rammsterr <94johram@gafe.molndal.se> 1756802168 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
8893726e27d3f912684f1789ab234a3887c18dba f3f58050796d33cc6577f00256270bbd4c6b0fdb Rammsterr <94johram@gafe.molndal.se> 1756802404 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
f3f58050796d33cc6577f00256270bbd4c6b0fdb 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756810189 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756883851 +0200	checkout: moving from main to johan-test
0678ba8b18cab82d93f15578689057913f576bc4 2039fedb96464fc15e25b39081cd180567ebeaec Rammsterr <94johram@gafe.molndal.se> 1756883919 +0200	commit: testPush md
2039fedb96464fc15e25b39081cd180567ebeaec 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756884014 +0200	checkout: moving from johan-test to main
0678ba8b18cab82d93f15578689057913f576bc4 52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 Rammsterr <94johram@gafe.molndal.se> 1756884019 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 0187f497e9fc53333fba38bf8d85af302d35f1f3 Rammsterr <94johram@gafe.molndal.se> 1756885429 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
0187f497e9fc53333fba38bf8d85af302d35f1f3 8a5596258743aeefcfa141ad390cce63a9977ab0 Rammsterr <94johram@gafe.molndal.se> 1756888207 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
8a5596258743aeefcfa141ad390cce63a9977ab0 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Rammsterr <94johram@gafe.molndal.se> 1756891017 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
e0ddb59bdc2045f947ba8344c07ca5374e93c789 3a12143c69e0cf628858a81673b216dbb2d3c736 Rammsterr <94johram@gafe.molndal.se> 1756891590 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
3a12143c69e0cf628858a81673b216dbb2d3c736 17a1b77802ca93daeaa4e19cc029720e89738922 Rammsterr <94johram@gafe.molndal.se> 1756892069 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
17a1b77802ca93daeaa4e19cc029720e89738922 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Rammsterr <94johram@gafe.molndal.se> 1756892497 +0200	commit: change serverport to 8081
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 23419ceae65311ebc654b7fe659d0f55749bfca0 Rammsterr <94johram@gafe.molndal.se> 1756977527 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
23419ceae65311ebc654b7fe659d0f55749bfca0 c04eb0d64af1e73d84c479ff40d3f9ee013ca871 Rammsterr <94johram@gafe.molndal.se> 1756978121 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
c04eb0d64af1e73d84c479ff40d3f9ee013ca871 87e69116de51a34139a5acbf786b48ff9077c0e5 Rammsterr <94johram@gafe.molndal.se> 1756978486 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
87e69116de51a34139a5acbf786b48ff9077c0e5 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Rammsterr <94johram@gafe.molndal.se> 1756982407 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 58ae37685abb361e7ca2122f9e50cf8fa5d03479 Rammsterr <94johram@gafe.molndal.se> 1756984256 +0200	commit: Update OpenApiConfig
58ae37685abb361e7ca2122f9e50cf8fa5d03479 6310e7092f27684afca3ad2d4901927fc635c94d Rammsterr <94johram@gafe.molndal.se> 1756984787 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
6310e7092f27684afca3ad2d4901927fc635c94d b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Rammsterr <94johram@gafe.molndal.se> 1756985140 +0200	commit: Update OpenApiConfig and CorsConfig
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
25d7aa3ac6f8dd12bef68ca13627ce383ca551db e9a15357ae23b56edd088226263465aa9266cd71 Rammsterr <94johram@gafe.molndal.se> 1757316787 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\heads\johan-test ----
0000000000000000000000000000000000000000 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756883851 +0200	branch: Created from main
0678ba8b18cab82d93f15578689057913f576bc4 2039fedb96464fc15e25b39081cd180567ebeaec Rammsterr <94johram@gafe.molndal.se> 1756883919 +0200	commit: testPush md


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\heads\main ----
0000000000000000000000000000000000000000 b12f4fede078eae5e619dff047a88367ee544bdb Rammsterr <94johram@gafe.molndal.se> 1756801151 +0200	clone: from https://github.com/Moln-integration/Product-Service.git
b12f4fede078eae5e619dff047a88367ee544bdb 8893726e27d3f912684f1789ab234a3887c18dba Rammsterr <94johram@gafe.molndal.se> 1756802168 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
8893726e27d3f912684f1789ab234a3887c18dba f3f58050796d33cc6577f00256270bbd4c6b0fdb Rammsterr <94johram@gafe.molndal.se> 1756802404 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
f3f58050796d33cc6577f00256270bbd4c6b0fdb 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756810189 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
0678ba8b18cab82d93f15578689057913f576bc4 52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 Rammsterr <94johram@gafe.molndal.se> 1756884019 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 0187f497e9fc53333fba38bf8d85af302d35f1f3 Rammsterr <94johram@gafe.molndal.se> 1756885429 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
0187f497e9fc53333fba38bf8d85af302d35f1f3 8a5596258743aeefcfa141ad390cce63a9977ab0 Rammsterr <94johram@gafe.molndal.se> 1756888207 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
8a5596258743aeefcfa141ad390cce63a9977ab0 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Rammsterr <94johram@gafe.molndal.se> 1756891017 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
e0ddb59bdc2045f947ba8344c07ca5374e93c789 3a12143c69e0cf628858a81673b216dbb2d3c736 Rammsterr <94johram@gafe.molndal.se> 1756891590 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
3a12143c69e0cf628858a81673b216dbb2d3c736 17a1b77802ca93daeaa4e19cc029720e89738922 Rammsterr <94johram@gafe.molndal.se> 1756892069 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
17a1b77802ca93daeaa4e19cc029720e89738922 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Rammsterr <94johram@gafe.molndal.se> 1756892497 +0200	commit: change serverport to 8081
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 23419ceae65311ebc654b7fe659d0f55749bfca0 Rammsterr <94johram@gafe.molndal.se> 1756977527 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
23419ceae65311ebc654b7fe659d0f55749bfca0 c04eb0d64af1e73d84c479ff40d3f9ee013ca871 Rammsterr <94johram@gafe.molndal.se> 1756978121 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
c04eb0d64af1e73d84c479ff40d3f9ee013ca871 87e69116de51a34139a5acbf786b48ff9077c0e5 Rammsterr <94johram@gafe.molndal.se> 1756978486 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
87e69116de51a34139a5acbf786b48ff9077c0e5 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Rammsterr <94johram@gafe.molndal.se> 1756982407 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 58ae37685abb361e7ca2122f9e50cf8fa5d03479 Rammsterr <94johram@gafe.molndal.se> 1756984256 +0200	commit: Update OpenApiConfig
58ae37685abb361e7ca2122f9e50cf8fa5d03479 6310e7092f27684afca3ad2d4901927fc635c94d Rammsterr <94johram@gafe.molndal.se> 1756984787 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
6310e7092f27684afca3ad2d4901927fc635c94d b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Rammsterr <94johram@gafe.molndal.se> 1756985140 +0200	commit: Update OpenApiConfig and CorsConfig
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward
25d7aa3ac6f8dd12bef68ca13627ce383ca551db e9a15357ae23b56edd088226263465aa9266cd71 Rammsterr <94johram@gafe.molndal.se> 1757316787 +0200	pull --ff --recurse-submodules --progress origin: Fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\CRUD ----
0000000000000000000000000000000000000000 a4e337492a45e9d0e4eb44db7bc6d99d83469650 Rammsterr <94johram@gafe.molndal.se> 1756891014 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head
a4e337492a45e9d0e4eb44db7bc6d99d83469650 a36401289fac43b0efa9526df7180d7a872d0a7d Rammsterr <94johram@gafe.molndal.se> 1756891529 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\CRUD-fort ----
0000000000000000000000000000000000000000 56d8e39486f38b72f9ab014bd82b1cfaab7655b6 Rammsterr <94johram@gafe.molndal.se> 1756975993 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head
56d8e39486f38b72f9ab014bd82b1cfaab7655b6 49ccdbcfb39c569cdc8468a9ed182412705bb78a Rammsterr <94johram@gafe.molndal.se> 1756978107 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\fix ----
0000000000000000000000000000000000000000 ca82846976c6fa1f33e54fdfd128274be73b9897 Rammsterr <94johram@gafe.molndal.se> 1756977527 +0200	pull --ff --recurse-submodules --progress origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\github-actions-flow ----
0000000000000000000000000000000000000000 742c6236512d2440a3433959f452ebcfdd795d42 Rammsterr <94johram@gafe.molndal.se> 1756885426 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head
742c6236512d2440a3433959f452ebcfdd795d42 5ee16817558124d3cfd6fd70410b1f45f09a194a Rammsterr <94johram@gafe.molndal.se> 1756887307 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\HEAD ----
0000000000000000000000000000000000000000 b12f4fede078eae5e619dff047a88367ee544bdb Rammsterr <94johram@gafe.molndal.se> 1756801151 +0200	clone: from https://github.com/Moln-integration/Product-Service.git
b12f4fede078eae5e619dff047a88367ee544bdb b12f4fede078eae5e619dff047a88367ee544bdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756801155 +0200	remote set-head
b12f4fede078eae5e619dff047a88367ee544bdb b12f4fede078eae5e619dff047a88367ee544bdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756801210 +0200	remote set-head
8893726e27d3f912684f1789ab234a3887c18dba 8893726e27d3f912684f1789ab234a3887c18dba Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756802164 +0200	remote set-head
8893726e27d3f912684f1789ab234a3887c18dba 8893726e27d3f912684f1789ab234a3887c18dba Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756802169 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756802402 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756802406 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756802785 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756804851 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756806700 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756807663 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756807748 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756808027 +0200	remote set-head
f3f58050796d33cc6577f00256270bbd4c6b0fdb f3f58050796d33cc6577f00256270bbd4c6b0fdb Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756809332 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756810187 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756810190 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756831836 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756883186 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756883753 +0200	remote set-head
0678ba8b18cab82d93f15578689057913f576bc4 0678ba8b18cab82d93f15578689057913f576bc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756883855 +0200	remote set-head
52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756884016 +0200	remote set-head
52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756884020 +0200	remote set-head
0187f497e9fc53333fba38bf8d85af302d35f1f3 0187f497e9fc53333fba38bf8d85af302d35f1f3 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756885427 +0200	remote set-head
0187f497e9fc53333fba38bf8d85af302d35f1f3 0187f497e9fc53333fba38bf8d85af302d35f1f3 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756885430 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756887307 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756888208 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756888436 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756889110 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756889331 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756890043 +0200	remote set-head
8a5596258743aeefcfa141ad390cce63a9977ab0 8a5596258743aeefcfa141ad390cce63a9977ab0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756890114 +0200	remote set-head
e0ddb59bdc2045f947ba8344c07ca5374e93c789 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891014 +0200	remote set-head
e0ddb59bdc2045f947ba8344c07ca5374e93c789 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891018 +0200	remote set-head
e0ddb59bdc2045f947ba8344c07ca5374e93c789 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891089 +0200	remote set-head
e0ddb59bdc2045f947ba8344c07ca5374e93c789 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891487 +0200	remote set-head
e0ddb59bdc2045f947ba8344c07ca5374e93c789 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891530 +0200	remote set-head
3a12143c69e0cf628858a81673b216dbb2d3c736 3a12143c69e0cf628858a81673b216dbb2d3c736 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891588 +0200	remote set-head
3a12143c69e0cf628858a81673b216dbb2d3c736 3a12143c69e0cf628858a81673b216dbb2d3c736 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756891591 +0200	remote set-head
17a1b77802ca93daeaa4e19cc029720e89738922 17a1b77802ca93daeaa4e19cc029720e89738922 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756892055 +0200	remote set-head
17a1b77802ca93daeaa4e19cc029720e89738922 17a1b77802ca93daeaa4e19cc029720e89738922 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756892070 +0200	remote set-head
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756892540 +0200	remote set-head
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756894456 +0200	remote set-head
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756894583 +0200	remote set-head
59de9e2041e65f863a170852c293028beb7c9782 59de9e2041e65f863a170852c293028beb7c9782 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756975994 +0200	remote set-head
23419ceae65311ebc654b7fe659d0f55749bfca0 23419ceae65311ebc654b7fe659d0f55749bfca0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756977528 +0200	remote set-head
23419ceae65311ebc654b7fe659d0f55749bfca0 23419ceae65311ebc654b7fe659d0f55749bfca0 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756977531 +0200	remote set-head
c04eb0d64af1e73d84c479ff40d3f9ee013ca871 c04eb0d64af1e73d84c479ff40d3f9ee013ca871 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756978107 +0200	remote set-head
c04eb0d64af1e73d84c479ff40d3f9ee013ca871 c04eb0d64af1e73d84c479ff40d3f9ee013ca871 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756978122 +0200	remote set-head
87e69116de51a34139a5acbf786b48ff9077c0e5 87e69116de51a34139a5acbf786b48ff9077c0e5 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756978483 +0200	remote set-head
87e69116de51a34139a5acbf786b48ff9077c0e5 87e69116de51a34139a5acbf786b48ff9077c0e5 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756978488 +0200	remote set-head
87e69116de51a34139a5acbf786b48ff9077c0e5 87e69116de51a34139a5acbf786b48ff9077c0e5 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756980309 +0200	remote set-head
87e69116de51a34139a5acbf786b48ff9077c0e5 87e69116de51a34139a5acbf786b48ff9077c0e5 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756980718 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756982404 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756982408 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756982521 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756982609 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756983147 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756983165 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756983482 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756983550 +0200	remote set-head
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984212 +0200	remote set-head
58ae37685abb361e7ca2122f9e50cf8fa5d03479 58ae37685abb361e7ca2122f9e50cf8fa5d03479 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984260 +0200	remote set-head
58ae37685abb361e7ca2122f9e50cf8fa5d03479 58ae37685abb361e7ca2122f9e50cf8fa5d03479 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984725 +0200	remote set-head
6310e7092f27684afca3ad2d4901927fc635c94d 6310e7092f27684afca3ad2d4901927fc635c94d Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984785 +0200	remote set-head
6310e7092f27684afca3ad2d4901927fc635c94d 6310e7092f27684afca3ad2d4901927fc635c94d Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984788 +0200	remote set-head
6310e7092f27684afca3ad2d4901927fc635c94d 6310e7092f27684afca3ad2d4901927fc635c94d Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756984905 +0200	remote set-head
6310e7092f27684afca3ad2d4901927fc635c94d 6310e7092f27684afca3ad2d4901927fc635c94d Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756985076 +0200	remote set-head
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756985143 +0200	remote set-head
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756986010 +0200	remote set-head
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1756987299 +0200	remote set-head
fb6208f880753bd9ed7044dadb46d19803583391 fb6208f880753bd9ed7044dadb46d19803583391 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757057352 +0200	remote set-head
fb6208f880753bd9ed7044dadb46d19803583391 fb6208f880753bd9ed7044dadb46d19803583391 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757059303 +0200	remote set-head
fb6208f880753bd9ed7044dadb46d19803583391 fb6208f880753bd9ed7044dadb46d19803583391 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757061237 +0200	remote set-head
fb6208f880753bd9ed7044dadb46d19803583391 fb6208f880753bd9ed7044dadb46d19803583391 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757063171 +0200	remote set-head
984f91c54a833d0cdce6983840b448c74547feaa 984f91c54a833d0cdce6983840b448c74547feaa Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757065105 +0200	remote set-head
984f91c54a833d0cdce6983840b448c74547feaa 984f91c54a833d0cdce6983840b448c74547feaa Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757067041 +0200	remote set-head
25d7aa3ac6f8dd12bef68ca13627ce383ca551db 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757278816 +0200	remote set-head
25d7aa3ac6f8dd12bef68ca13627ce383ca551db 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757313443 +0200	remote set-head
25d7aa3ac6f8dd12bef68ca13627ce383ca551db 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757313446 +0200	remote set-head
25d7aa3ac6f8dd12bef68ca13627ce383ca551db 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757313895 +0200	remote set-head
25d7aa3ac6f8dd12bef68ca13627ce383ca551db 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757314556 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757316372 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757316789 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757318866 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757320741 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757322615 +0200	remote set-head
e9a15357ae23b56edd088226263465aa9266cd71 e9a15357ae23b56edd088226263465aa9266cd71 Johan Ramsenius <johan@DESKTOP-LR9DS6K.(none)> 1757324489 +0200	remote set-head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\image-upload-feature ----
0000000000000000000000000000000000000000 b201fa6a7227d080bfca32f33f61e54d73fc282a Rammsterr <94johram@gafe.molndal.se> 1756975993 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\Implement-logging-etc ----
0000000000000000000000000000000000000000 2793529a7e2aacac0978457edba903b95aeb01cc Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\johan-test ----
0000000000000000000000000000000000000000 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756883854 +0200	update by push
0678ba8b18cab82d93f15578689057913f576bc4 2039fedb96464fc15e25b39081cd180567ebeaec Rammsterr <94johram@gafe.molndal.se> 1756883922 +0200	update by push


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\main ----
b12f4fede078eae5e619dff047a88367ee544bdb 8893726e27d3f912684f1789ab234a3887c18dba Rammsterr <94johram@gafe.molndal.se> 1756802164 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
8893726e27d3f912684f1789ab234a3887c18dba f3f58050796d33cc6577f00256270bbd4c6b0fdb Rammsterr <94johram@gafe.molndal.se> 1756802401 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
f3f58050796d33cc6577f00256270bbd4c6b0fdb 0678ba8b18cab82d93f15578689057913f576bc4 Rammsterr <94johram@gafe.molndal.se> 1756810187 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
0678ba8b18cab82d93f15578689057913f576bc4 52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 Rammsterr <94johram@gafe.molndal.se> 1756884016 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
52c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 0187f497e9fc53333fba38bf8d85af302d35f1f3 Rammsterr <94johram@gafe.molndal.se> 1756885426 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
0187f497e9fc53333fba38bf8d85af302d35f1f3 8a5596258743aeefcfa141ad390cce63a9977ab0 Rammsterr <94johram@gafe.molndal.se> 1756887307 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
8a5596258743aeefcfa141ad390cce63a9977ab0 e0ddb59bdc2045f947ba8344c07ca5374e93c789 Rammsterr <94johram@gafe.molndal.se> 1756891014 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
e0ddb59bdc2045f947ba8344c07ca5374e93c789 3a12143c69e0cf628858a81673b216dbb2d3c736 Rammsterr <94johram@gafe.molndal.se> 1756891588 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
3a12143c69e0cf628858a81673b216dbb2d3c736 17a1b77802ca93daeaa4e19cc029720e89738922 Rammsterr <94johram@gafe.molndal.se> 1756892055 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
17a1b77802ca93daeaa4e19cc029720e89738922 3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf Rammsterr <94johram@gafe.molndal.se> 1756892539 +0200	update by push
3cc71c5b6f0829f2ccf6a7cad6844b6df34240cf 59de9e2041e65f863a170852c293028beb7c9782 Rammsterr <94johram@gafe.molndal.se> 1756975993 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
59de9e2041e65f863a170852c293028beb7c9782 23419ceae65311ebc654b7fe659d0f55749bfca0 Rammsterr <94johram@gafe.molndal.se> 1756977527 +0200	pull --ff --recurse-submodules --progress origin: fast-forward
23419ceae65311ebc654b7fe659d0f55749bfca0 c04eb0d64af1e73d84c479ff40d3f9ee013ca871 Rammsterr <94johram@gafe.molndal.se> 1756978107 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
c04eb0d64af1e73d84c479ff40d3f9ee013ca871 87e69116de51a34139a5acbf786b48ff9077c0e5 Rammsterr <94johram@gafe.molndal.se> 1756978482 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
87e69116de51a34139a5acbf786b48ff9077c0e5 4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 Rammsterr <94johram@gafe.molndal.se> 1756982404 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
4265e30fabc1bb3e39dc78a48d8adc3e1c311fc4 58ae37685abb361e7ca2122f9e50cf8fa5d03479 Rammsterr <94johram@gafe.molndal.se> 1756984259 +0200	update by push
58ae37685abb361e7ca2122f9e50cf8fa5d03479 6310e7092f27684afca3ad2d4901927fc635c94d Rammsterr <94johram@gafe.molndal.se> 1756984784 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
6310e7092f27684afca3ad2d4901927fc635c94d b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 Rammsterr <94johram@gafe.molndal.se> 1756985142 +0200	update by push
b223fa667f1d8cbf31addcaf56e7fb6b5a9be815 fb6208f880753bd9ed7044dadb46d19803583391 Rammsterr <94johram@gafe.molndal.se> 1757057352 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
fb6208f880753bd9ed7044dadb46d19803583391 984f91c54a833d0cdce6983840b448c74547feaa Rammsterr <94johram@gafe.molndal.se> 1757065105 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward
984f91c54a833d0cdce6983840b448c74547feaa 25d7aa3ac6f8dd12bef68ca13627ce383ca551db Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: fast-forward
25d7aa3ac6f8dd12bef68ca13627ce383ca551db e9a15357ae23b56edd088226263465aa9266cd71 Rammsterr <94johram@gafe.molndal.se> 1757316372 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\Mergin-Ismetes-new-code-to-hopefully-fix-everything ----
0000000000000000000000000000000000000000 e86d1e35ecfcdb04e2ca5e945a1bca184b8bf559 Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\UD ----
0000000000000000000000000000000000000000 90778c642307dc2f45628bf02441d542d4614bc9 Rammsterr <94johram@gafe.molndal.se> 1757067040 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\unified-productcontroller ----
0000000000000000000000000000000000000000 260e6675ac57c85eb6738e78031d5223f2413ca4 Rammsterr <94johram@gafe.molndal.se> 1757067040 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\unified-productcontroller-V2 ----
0000000000000000000000000000000000000000 85a46046dfffd68227ee3932e84b096733cb82e8 Rammsterr <94johram@gafe.molndal.se> 1757067040 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\unit-tests ----
0000000000000000000000000000000000000000 bcbd91b26c11e96351a14d2c6c8c2236b0aba913 Rammsterr <94johram@gafe.molndal.se> 1756984725 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\update-product ----
0000000000000000000000000000000000000000 fdd7ae4b198329734b650c9b2f5704ccfe936292 Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\Updated-ProductSpecificationsTest ----
0000000000000000000000000000000000000000 fd87577573f7b4d599822ba967cbf10149b75101 Rammsterr <94johram@gafe.molndal.se> 1757278815 +0200	pull --ff --recurse-submodules --progress origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\updating-github-workflow ----
0000000000000000000000000000000000000000 b3d20642d998e786782a74867b0aca108326b66d Rammsterr <94johram@gafe.molndal.se> 1756975993 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\feature\product-api ----
0000000000000000000000000000000000000000 e66de05dda77af5a3d57479d36bca68d0ff184f7 Rammsterr <94johram@gafe.molndal.se> 1756883186 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head
e66de05dda77af5a3d57479d36bca68d0ff184f7 3d64709767dbcbac855aa06e9720b7322be9e587 Rammsterr <94johram@gafe.molndal.se> 1757057352 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: fast-forward


---- Innehåll från: C:\git\Product-Service\.git\logs\refs\remotes\origin\push\product-api ----
0000000000000000000000000000000000000000 6dbd9d3e8b72f2e44d59e7d3de8b26ff6b237fd3 Rammsterr <94johram@gafe.molndal.se> 1757057352 +0200	fetch --progress --prune --recurse-submodules=on-demand origin: storing head


---- Innehåll från: C:\git\Product-Service\.git\objects\00\2f681f854ded8b217f77eb135c028a561efee8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\00\c90e25c0111fa8cb8a40e3e3539e626f06bf72 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\01\35c620ed6b36a7f46615f7c85986ac61710c8c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\01\87f497e9fc53333fba38bf8d85af302d35f1f3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\02\fe68ced30244e56514c437c2738c511b976426 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\03\06fb5616ae61e777fd769cc66a1fc59f705436 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\03\670bef3245ae3f95290eede8ffc23ecff5d882 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\03\a630768f73408be5969604c53ffc1fef641290 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\03\b28a22d5010cf359737fe5242ae95d4f705542 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\03\da1c04be1f422329b9324088dba05830689f0b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc3 in position 6: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\04\8a6ae4533babecb40bb4e22dd9bc087c1acce8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\04\c609a0955dc5eb1c815cac6edcc90c0b98df03 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\05\3ae934f672c1a36996558f9e0f4088fff8b7e1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\05\63b1abf00525eb82726750910a2bea69740082 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\05\a6417809aa70dcd82808fef43a426f819a5941 ----
Fel vid läsning av fil: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\05\ddec4da10695f4a568c63f1bfde47b2f107bed ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\06\78ba8b18cab82d93f15578689057913f576bc4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdc in position 9: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\07\2a217ca472dc75f11095dbec3d79d5225b1012 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\07\31f29e810f491b900d27c4125a0e645623e807 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\07\40ac630992f81ba81bd7d03c521aa0093e5bd9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\07\61b6b450e303ef37635521eea3aa41fbc39b21 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\08\41ebcf4f6029facc70426f6d8fdb26f7e77281 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\09\58ccfb84557117b7114bcaeb8d9d2ed8089a86 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\09\c7859c855be1d42127e5918cf356fb915432d5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0a\51afcb95152d1c631d3221f61f9412a68c490d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0b\4b2c447785a387901ce3e37bd27fe0f0faf26c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0c\9dffa50ef77776f7992a0afec8f9f1ec25f50d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0d\101056f00cf82b086b8de7a4a221090fabafee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0d\28ca140ef9f883a9f666f022c56032ba4982fd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0d\6634ab5599bf33c5272d5af0a8708895f731ce ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0d\dacec18711cb5a02d8baef01269bbdecbcecc6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\0f\e19ef4e3f6b21058fce49950e7979c5e9ad6a9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\10\17f12e414c47eba915a8365b1f376df8ab9272 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\11\2c34f8d949c0ca48733a1f828a4bc2994612f9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\11\c618c115fc7c82bf7afbf6779a2f385639b465 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\12\2e0d2e302102b222f174d12df20531f8d44acb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\12\4089bc7571b82e7e5eb5a48a24a1aafe539216 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\12\c322f5858352975de4d692cf7a06bf67ec0e49 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\12\c415e3ff625f7202a22ad2cba7ca8cab79bbf8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\13\96d1342fe4bac06831a0b1f80a3b7c2bed5cbf ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\13\9b475f9d72c9db1f38386bc94d1ba8e40f91f2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\13\aa8ee296bc8909f4d58f678fc0f4429c826ea3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\14\f74f267a734a625d66f290456dac794b1aa980 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\15\646dcea80d1f37a6109b726597993228eba4b8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\15\df617abceb6a5b711a76eaf398fa14d2780d65 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\16\f44d3bba79b97a7e4e96e8b9713e2aea19138b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\17\8fa4c1e4681549e5f4029e52c189822743b52f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\17\a1b77802ca93daeaa4e19cc029720e89738922 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\17\c44d0bca3328686d9c8b60079c3ce390aaaaaa ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\18\0c22f8313640f105f39f52550f29471a188513 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\18\416538863e80cd9936f3c441b12aede4883b93 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\18\cb561d1db9b20c0ff664e8e7eb3706ae14e92a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\19\ea10cf200d607b361ef0ad68a39f4648bc75c1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1a\d338397bbbed2dd963c344733e220f13911df2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1b\1fa0ce9144be568a5e4d38adae5a69b5bcc214 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1c\6a102fcef76fbe399b374aff5fbb561408642d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1c\b04e5ea49f9afc4b428ad24e6d413afb43ed06 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1d\0e88ecea780e7132641849ee32b617996957e5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1d\eda751c4c818b2d91ffefb37c5dbe2896184bb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1e\99a5676b96c3c0e51cbb5220981573963161d9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1e\9e1e7eb0e12b9700dcdbbce5ba19fe4a8018cb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1e\c2e7c0f8d04585c757199712cfa5c3613ae077 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\1f\c52fe2fc433441af07d8fde8a688ef043d8ca6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\20\3642adb74cdade9c0bcd69013a4272b14d9832 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\20\39fedb96464fc15e25b39081cd180567ebeaec ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\20\5fb4c43e88042cc0c152b5ce4ebc6a07e8d88f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\20\6c651456e310c493c7a3995538b18a20b34547 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 10: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\20\c7bdb70257e507ac3804f9b37776959bbab7cc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\21\2f922502531a1f17e93dd6e9cc0e4abd3edcbe ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\21\e52bde2713f0ded7da67aa933207aa75bb877b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\22\67dceb16871bec66478f674b7b2810894a4d76 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\22\7426227bef46aad4031be5ae61117c623781b9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdb in position 6: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\22\8f93bae327b7dd762889af6664c37f9d659fd6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc9 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\23\419ceae65311ebc654b7fe659d0f55749bfca0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\23\433d9165e0cc7837f0fa232eddc7254dcb9fe3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc2 in position 6: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\23\e8ca6954b5556d54411e9c92b75aa362fe5487 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\24\3d2a39336a6c1a6d19b43fb6552f4813eea516 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\24\96bff88e2d8b7468f7ce244350c0560fcf49bc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\25\0dd9cb7dbebf8056e823a6f3b12b14b03a09a3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\25\60b00052d00b1a1a813f3dfacd8a25198c5522 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\25\c6f387bb1b04aae55b38128d30747702174631 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\25\ce0105c35d37eae390f0c86df1856c9d25e1d1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\25\df9eb1d2140bf75d618ee8eb9a0c1ecd0fd380 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\26\099d482b9e85db4dc9eaf624ad815e3191ebde ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\26\0e6675ac57c85eb6738e78031d5223f2413ca4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\26\2f66d0503a9652ea2a97d6570839c1c26ab2df ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\27\3cfd08dc6148abdc8c33d2eba97fedbb804e8e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\28\70c3eb8674051d07b074ffce4fdf524a6b1f50 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\28\b4ba75ed16121234dbd0f28cfc14ac66323e9b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\28\ba794262adec176f95200ac9a81ea6675bdfe1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\28\cc6d136c4397dd9186b81f3dfb4dc9c7a46f35 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\28\dc88cbd5a7dddc645f1022139740cacf179eb7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\29\2366a940bdabb9407686f370ba463fcfe395cc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\32006b6f2321dedeed271797f9338f85558e5f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\69e024ae0d58248241b31e3da9ba06cfbf492b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\8933d61b47b3807977014e8824c545a75b34c2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\b4914085d111baf693c89a4671405db548a2c6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\d4fb2279378ce71a737eb4d51b7a6ff40b2dd3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2a\e6875ea45668bdd08748206c6b9175caf8c290 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2c\25bd5efbb57cacbad0d2ecd71862f5d3f55396 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2c\77f7b0c18f160fa055d5d77b42c7ae649af824 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2c\a79f64697033840635889572b6a91bf6cee749 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2d\010808b469d0712a29fc375adf696c481cc612 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2e\aa2af31a6dc70e7acee2939de4759b6aa1cba1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2e\db6b1937d3f6c302cf12dbe4baab6e7951f6cc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2f\78cf1a7d9717d30f6eb646a6a7a5b6fe58f138 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2f\98b9a997e12b5f56b65f2e6378e729a425ffdd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\2f\dc71290208cec84b47a84d5813800cc92f2e27 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\30\1fd699efe2718390eee567465beb822c8732c0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\30\f391568c73d03810f84f08bf0907799a74417f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\31\dec2b20a14a979b35ad97f47058535c0067d89 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\0b5f63b323e860555ffe7e8dce288b4b559497 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\1630657c1e1aeae4de03af2921d57cb625f2c8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\2b8baf42a8eeab004422b71130886e4b6c5f57 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\34e596012954249d154e34574c849565ec7b4a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\7fb126a1e71df5a47548951e6c8c86d818d336 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x91 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\32\ec10af1cf5f762f73a83080b172d1ee83de8dd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\33\20aee6d1e5c46a968672642fe5b377eab80a8a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\33\ddfdf669d71f3f63df049f77bbca8118b9c201 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\34\ace5fc3c222c082a5f5425eda241b0215e8fa2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\36\26af63a72db4ec47d056176a2102b7a6609985 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\37\d3d0418ccfc138c00321284c59c7e50d0831e8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\38\be5f0b468b340054a9269250f8a7598a0766bc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\38\d4a011326a37aab3348019e280a33942588829 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\39\d84e1796c80eacdb6832032c5a44b9d42a17c1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3a\12143c69e0cf628858a81673b216dbb2d3c736 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3a\6122c3cfc866a2de88fcd2bfaad0111d6e0ba9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3b\2b39ed5979f6e5014f53bbb357d8ec22e9d8dd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3b\4c1cba728e70265c43062d26b868f4ce582cee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3b\f83fd44d8ec7a921e4a3f5dd54efb36267f06f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3c\c71c5b6f0829f2ccf6a7cad6844b6df34240cf ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3d\7a010d8c43cc923f80a480ea549d9f50ce2709 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3e\4211817117d25fc9d5b2d4094543a75f5fefcf ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3e\f148ca71a1d54baafb52602da57014c618c666 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\3f\4209b81b7dc048a3ad7720fccefc5473688205 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\40\611cc5a45477254c42eb3ff50d95cc32837e57 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\40\f5d44f82e5518501f071e1a60f65da427bb9bd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\41\4703c5ee428e3b79491262b52626b42fde5e5a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\41\d984374909b0b8cba9e9357af5c2657e5a0362 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\42\65e30fabc1bb3e39dc78a48d8adc3e1c311fc4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\42\98f402c7e70d7143089bf1971eb10693bdc4b7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\03037c82f4b10486614388a47f2c2788cff409 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\19dad580a32d783fce114fb924708cd04d921d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\3488ddf30a18a54c3ca9520e7c20a4fdef464d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\47f597ee387d1185ae711a9844e1020a77c0ae ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\5c4febcc5ba8756b1606464a1decae99e04fb8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\43\f1e8961760710fe26d8c021b7a12ba589e9062 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\44\1a5fd67f1c49f744c93139be6ab4082ab53d6a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\44\9c3c91229113b624e8dbd5c2b8b1c2d21b13d7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\46\6cdad31b0936dc228d9955c26e4bd7398108b9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\46\848ded1f4731bda2115cc03a16ae2ab80f1f4d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\47\89bc7d43758cfbf39795f1f161e9a19e462606 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\47\f1c42abc288a4b284abecc8e8114f2ed225292 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\48\1348e48bcdf63b7fadec335d3cea53876d7e55 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc9 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\48\203d7086e370361e01bd0fc72af34c5e60ac66 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\48\b5e58b39c9944fb704b48fa82e9bee76ad6ad8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\0149c45f6ffb352f09cfcda474f0f35b02fa1b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\8f364dc8865a187ccd03acfb96c4237d394908 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\a87f8c298cf13a268c9c8739758b536d258c54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\ccdbcfb39c569cdc8468a9ed182412705bb78a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\ea61d26dfbcccf69a271745ea11df97c03a166 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\49\ff536aa23382cc8660b2509fa7bffdf225a4a7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4a\0d50047647613d887098dc2448f3f56a3576d1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4a\17c26aedf96371b2bdd989b9e1a5bd4268cb53 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4a\2898fdc727ad8990b939f1a493e9d7a0e05f06 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4a\e919716d1bac83d50123976517da5822a4fb88 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4b\9edc2598dd9103c065a19a2b964baf00350bd7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4c\5096e34e92f001416167b4e4d0464151de9157 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4c\6221f32724addba8c2102ba24cab0e6632eae4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4c\96f1cd506f693bcb8479681841d2729a153056 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4c\e5bfa0457cc337fc6d5e8eca0201c94666992b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4d\822facb717096b41d085db1059363cce548f54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4d\91afd08a7e38dc52759065277ee72a2c3732b7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb6 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4d\927ab5e40fdf6a2d64f76c2d1c74bd07c69dc1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4d\ba25d1ebfad3cbe6166fcda0ae073c6e9c7d58 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4d\ee70238821f338bb65c14e566b3c955adada10 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4e\fccb25d2f82352795be0ed63404581c747558c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4e\fceddc0e3720507c4236f39be3cb54b24a96ee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4f\956187a394f682d0e5026e728650c5a545577e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4f\ccd7346b8f680b97f2759cf2ece5da6e9e8816 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\4f\ec69e4bee80eb02fbaa61770128dd83251e485 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\50\3455bac857297146ba2caf7b8a9ca730b49a5b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\50\a74ca1dd97fc256e47a2199b6d335feeaf84f3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\50\b3ad3de769719a5e3f6b9d355689a125bb1a97 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\50\cd43dfbce9445cd35a602a215e70b186d7a923 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\51\b7b7270fef6a4d1644ab2f1a23911abb4cf3ca ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\52\02b8ce434c14c619114257232671b07e188724 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdb in position 4: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\52\402e8678bdb180f2c9864aa667403650fcb376 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\52\6e684d5ba365fe8602338c01001dfe93814cc6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\52\c4511b4b47f92f13c99f86d7faa326691532a8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\52\c765aca3f0627f8a6dd8bd9db929ee3e6a2a54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\55\6029dff851f3353fbd6138963412d5bcea930c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\56\2d6edc663c8a362e014634d0a9d128330879c3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\56\6839cd0940b24f8e043d0d02087423c4452700 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\56\c76e9cc28887d1c3ede16913d3021ab6f2e741 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\56\d8e39486f38b72f9ab014bd82b1cfaab7655b6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\58\ae37685abb361e7ca2122f9e50cf8fa5d03479 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\58\fe04c86fa48a97419d831665857a6aaa0903dd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\59\aadc27be3568fd1d06cad0df424711e66eb28d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\59\d35df75eebad7d1cbb5903f2bc89556ed432c7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\59\de9e2041e65f863a170852c293028beb7c9782 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5a\51789ccf3d8f8a65ba035f2384d4332f6fd873 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5a\77a3ee9b9eb850afd19918ac2bd4733924ff45 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5b\055ce61049b42a2bad2babb006cfa3a5b03f5a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5d\81d2f9856efc1ed459c7711e82148c3d59d64f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5d\eb9fb29b158b8ff555e6b184efe6d12032cec1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5e\9241e3932667e7d9ce74f1f816eaadbff6a518 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5e\e16817558124d3cfd6fd70410b1f45f09a194a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5e\e7cdfa7b71ba581ba99d1516041cff2a61de2f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\5f\cb969f6794dd7f47ecb0210bf6af6bae7a94a1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x94 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\60\c5590ed3cf2fdf127a7e253e025dd801550a45 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\60\c6811886677185aea5c1e2759e859d7902d6d1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\61\94a4d5dc11a5f53bef3eaa61fa41358f2b0dd8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\61\f17df87abbbf75423e8758c9db58523fe5f5b0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\62\6dd3b7d4053f3ed8d17e8c2a747297ceb75e13 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\62\c35fe1354468b9b344a4e53a7cfbc10dd867c4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\63\10e7092f27684afca3ad2d4901927fc635c94d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\63\c2545ae32cf637d6cc306cb900e421a0e2932e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\63\d0e25592292614812026bbffba5033c0402d41 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\64\72a7740060529fbf1e927bf6a6dc4d8629086c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\65\19b5efdff11570e17784cc2c95083d848f7c1a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\65\61ee19aba5c1063083f62765cd6ab75f016ec8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\65\a2d0e23a8034ff241cc67b6850dba1acbfb902 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\65\fe21321c98c80f109e61464904d7c3c20b5f9a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\66\0881da9add9300cc1796a3d73d0ceacb67a45b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\66\b93eb3a689e3c85d970b1f9ba466ffeb49a669 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\66\fce83acd5287b47a599490b95e7e22ef63dd4e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\67\a01181c4d4ae06a0e10e894c4f1b11d20b62cb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\67\b357c398197e2848c47312fd20a1ea29b58036 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\67\de11767bd80fa8721890147658df56b0076b0c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\68\227e515a9eeca0b340d116fb042fcc9b4598ec ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\68\7edadf0e05f110f5715fac839927f3219a47be ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf5 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\68\ace92ec78ce9da0fecbdf9bb3a5cac6d23984c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\69\c9d34922d162e89e4e0c3baf429c539558001c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6a\33b47e04b2c8fa9d60dc6f2201a8886d8b06ac ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6a\694a80bc0f1cefdddc67185b6d22115d183c27 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6a\d42d3800928f0503ab3108a50e62a8029835bf ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6b\17d43a9075b5f99099e88952d99c20ceebc087 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6b\f5c76fea4e119124a0b51f562eeacf708410ab ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6c\199d1303fe26f9df93c3cca1f2c0cba2d4aca1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6c\6c1cbcb687e6240576ff9e74a9fc0069c41888 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6d\1d92a9234c660c7ea581f3ff1a43a51070f9c6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6d\517d5dfbfca901b35ed720e140d6251ff6a38e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6e\348a930078b31e1c9474bde88a0c01ff998951 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6e\3c2e2bdbb1ebf793756754018d19817425f3e7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6f\117980af27b0f5c81d4cd67b9f673dddeb9c85 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6f\3f92b075127c4b4d3204b1f8580ded142a0662 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\6f\50e35b80412cd5be549254546893815d012c19 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\71\1e816a98121f94dd5daa3d66710d04bc604e36 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\71\5675f16f0b151a0d2f22bca4585a03e6f61743 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\71\d3778d0cbd55790c3eb0ad73c0642441287752 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\72\8b53c66d1ee22dcc00eb8fb08d78656b85141c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\74\2c6236512d2440a3433959f452ebcfdd795d42 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\74\7421f26826cee1a0779c52068a18697a2ccae1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\75\0bcc59635c8b967245d61e978d1582fb2abf3a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\75\9353e03163f35adaba785849c2c613a0c3a45b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\76\5a556c9485ad2a2355b6c5fd96f3407bffc871 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\76\85ad43284e59baae60731a6ba4cd06a765e208 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\76\8bf24a0604c9895d50639e01d05245f3e2551f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\77\7164889817b76a73f6c23799804254a0f69df5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\77\d46e901c2290549779b29d10044ea05dc7795e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\78\028ac171e1154e17880f942f73cbf6c47b3281 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\78\b3554e30b93b3202c2d31693cceb0fc00d1720 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7a\0a410554796f7f6105850bcaef2cbfeac9c768 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7a\14ab2919fa1c65c8318a410230ad0c6968d7f6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7a\6400696030c65df6171d4eef26563a867b6343 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 26: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7a\ad36dcb6cc738cf52ff43b74b13246d715892c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7c\1077017e90533b6aea95c65637c685c4dde1e6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7c\870b1320553b7307cddb01eb21d9c990500356 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7c\b80c03065640d10213bb6500bd2c8ac9fed1c4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7d\29c5546f2d870546ccf8d2be450666537b38cc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7d\3ff02a045c5516a304251984f6ffc4a6353f70 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7e\6c68b7861817d8878aacf8dd40722f2494ea37 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7e\6f55e402124192831403e8e0b19e430b2d899b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7e\8612db35cb8b81400492df279db180ccede058 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7e\ef0d1b2b4c9f46213104a9be45b44ee58d8d61 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7f\0caa181fde8f4f01fc63cbe5dd017f779e1949 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\7f\b52e9556cebdef148e32323de5d945d2fd8e63 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\80\21746bac5aedf3d86c752452a130e0ed891b56 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\81\33f5e0d60eb580cf1e949fd42c767738240314 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\81\b30e7e47c5139a0ad8354fbcac4c4d88752c55 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\81\ec495383b42c4238e54acb6a40933984d97063 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\83\4a9406ec56c37a86c439fdf4b31893b063bf68 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\83\65c34c288b1bf41f3630ea86814f437fa0c76c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\83\89ab2dccff6bc1f974818e7e997295681864a3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\84\d43fc77dfe1a691e22c50394f65c7019450fb1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\84\fbb2470ef7fbc7e4f0dbaf9bdcad839f2fe741 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\365b0d127bc3ecd1de8d06fc966645674d830d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\4565e584a6fd6364cababf2e633cbc325bac8f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\9b73caf9b034981b2cf84e6fae8a0853da83aa ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\a46046dfffd68227ee3932e84b096733cb82e8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\a897d06e93b154c218538de66bd5a1e0eb0874 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\bf9f9248d70f86b370f905685ee4448430845b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\85\d9ce3c2339a2d9f45af04280206de4fee7e455 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\0080c63e3a170d634a4c46b047ac733b6fd249 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\29b80331b91906efe2556bed9a89e641a9f6be ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc9 in position 4: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\346815c1104230402de069987f48e172831e3b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\623e2cc7f76e1f9c84674ba97dac5595749bd1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\62a2078b7b41cb91af3b7119182ee073ce3e73 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\86\74ba571225ddf3fff880e34cb4955a2209ccd3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\87\cfadabe980a5d71ddfd42f0baa56dbcb181c74 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\87\e69116de51a34139a5acbf786b48ff9077c0e5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\88\93726e27d3f912684f1789ab234a3887c18dba ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\89\1563e76cddfa1f481b1678c21e24cb4f2a54b4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8a\380827f07320b69cca9e0a6ef3c143c860cfb1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8a\5596258743aeefcfa141ad390cce63a9977ab0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8a\6c406829af750ce4ed3d9d1452f1a3b387c075 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8a\6e14e4257eb44451ee8311b116631adad06c6a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8b\d6289ea2b5937e812c0b905e26a37806178583 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8b\f78063e5bfd37267eb5da72bcdce0b2d061ee0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8d\af942e220c427dd6207e36b8eaeee87dfc1900 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8d\afa08c4cabc3e4864d0d62a57ae61ad27979a2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8e\2f91e98a9c2a17d59a5f3a8c4f4e1082de9503 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8e\56295650b137548880dfda2f9e2ced5f50fc09 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8e\5f6e436d2debe43e0d29e2c0dd2d5501b30bbd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\8e\f59f028240b09459c3aa918b2692c3a173d911 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\90\3c79b015adb965c57063db3663f79b0888e660 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\90\5e78eff215b0bc44c365e1a433c7b04e065b29 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\90\639d6732d54042ace7ea067f8de966cb59fa92 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\90\778c642307dc2f45628bf02441d542d4614bc9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\91\0ed60dc4cdbfb992c77399633ece55b76355c7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\91\9c59a806bf75c8a6a4a5793886b024c45c6206 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\91\cfae7dd788529ec9fc880f830bbde0dc1b3a4d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\92\37e30e91d579247cc7fead652a80a5a2b06ebb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\92\6d24878fc75ea11395f0951b57ea60ed4e1b14 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\92\a15e1a6eb84b6a4dc4a922e302f57d90c1887f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\93\37c59060900beb65a234eae0213f7259bf17ad ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\94\ac925d852a2354e1cf8aaee4fa5fa9a4cb3227 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\94\eda1b1fcffb0f619bdfe4afacc0275c560fde2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\95\707d1ade5d063180291bb6dd9e7c6942ab7ee5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\96\379f2560bebfa4534173640eb655547c95563b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\96\6dc9176c1a14e827d966c0f256784d88ab057f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\96\7ae6565cd34682015c9623f07fe9804d96bc1f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\97\1209029547c7c40726af3da26481445b17e58f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\97\374e1787c650c6579421c4ea3ae769d327bc92 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\98\4f91c54a833d0cdce6983840b448c74547feaa ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\98\5eb36bedb712d557ec603f3e12433cf9ac49ba ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\98\66920c47c178e4284d03d8516a034b8ca87da7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\98\c3128c24ad2d9ce763b20d1077f7f07659a65a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9b\354fb4a7e7e168697511ca97c6f12cff24c59e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9b\862f964f290f2bb8a25b251adeba32b2766784 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9c\187ccb0f164194c3365e4b77db6bc433ad61b7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9c\698f6d1bb1fdb1d48550a102cac3ed6961a359 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9d\d0d01c97e81e6365167a6fb15436c8ade45f41 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9d\efe454c5516130c9ac52e5c03547c5e7fad43f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 3: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9e\0f4f24bdb14e21a246474be17af32e01eee6c7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9e\56ae2a4eeba20e2abfccec1351d48b14e960f9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9e\c6839e5a415bb9a9393aba3466f853edd16f1b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9f\53c09b99a50410c5dbd414dcac1a889329b760 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\9f\aa6ae9ed9a95176c36f4a029741e0d7f08524a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a0\8a4f5e6b75047a6339621ffb0006694f16a73b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a0\baa727d4ad4eae518eda148b4297cd38d69c83 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a0\c32e7d4ee0ee0be8c9b25452d93f77d2fa0eff ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a0\edd2b3a066e31c312fe87897bd8ea1eace7c1a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a1\91837037340cf2d2f9d430cf8bea5310c9a468 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a2\283976829eec9aec3df9cf63cb0541884e93c7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a3\6401289fac43b0efa9526df7180d7a872d0a7d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a3\8ff5524241bdaac0d83dea3cdc307fcbeb4082 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a3\a3612298a3bae85d0b070150aeeeaf829badde ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a3\b6b4687767adf804346d865ec2108533e5d5b9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a4\41bba3f0d34983b84408112ae0e07251e33d28 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a4\9fa5017daef318e56c57ac6bf585191396ed2d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a4\e337492a45e9d0e4eb44db7bc6d99d83469650 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a5\6d8e194b061bbf4c1223fb980103199a9b3612 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a7\253b1cff99ec9f6138e3571b4b17ee66092699 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a8\138e06e58b79107a479230edf0b627f3e6d8ee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a8\7b8e7fa7629fb82dc5f1cbb8f2615cad095207 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc9 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a8\d8c616d571fd5691d27cc48bfa6e1f63411990 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\a9\6fc9399be7c4da0466a803dd2ba12e3216283f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\aa\69505f97c2626b0b2552631dba1cc885a5081a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ab\0413e1c26166cbd824145cf4a0b01714e98b74 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ab\623585d9bb90655f663ace2de0246ea791c4f3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa3 in position 6: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ac\d27fc6e1af6c19d46e63fd6106dbcc683cbaa2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ac\ea78947fff57ac05fdb83b8b6d7818bb26570f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ad\070ec4520167cac9f747c056b438dc763a5fce ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ad\1ad29a4f6176ec1a27507e3958acdf9d03c959 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ad\2b913e1a565b144f6ef23218afa0aa2f052244 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ae\1b24d02cc1837f25cf2e6159e12592626cf5ae ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ae\1b400a504008678d10da7447e0684d97606933 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ae\5e7dd0a3ce71f1442985b32721b4babf27d9ca ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ae\8f89240fd71d9cd850d9cb3718bf0ae1261d90 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b0\5c3a52925c295d31c8360c28d9cd3b8c6c0171 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b0\e461657207c0b45b03dae919b09253544223e5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b2\01fa6a7227d080bfca32f33f61e54d73fc282a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b2\23fa667f1d8cbf31addcaf56e7fb6b5a9be815 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b2\83d258958116feb92301167f4e41cdd5c11a9b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b2\961e0e392cf47de379977752f45ea8f0dbbacb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b3\09d36ac2a34f0439de6f8f176e4623356fce54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b3\840151c9b2a9d1fb0c7c826d586f49602851a9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b3\a6be982f64bbd1ab5b08d5b14491351962447e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b3\d20642d998e786782a74867b0aca108326b66d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b3\f36190bc1572217a1cf891d49ca84ecd67347e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b4\5f9a32b92760925ad2a1b5d4f4d48814adf2b8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b4\84fcc7e6c6600d38f99b6efa64862554a47b38 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b4\cce7f7819be0cacc47ed19c2282f2ea8ee054e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b4\d81e2bd0f61e460b32a237f985429de542b46d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b5\6a9afc0a57d6063d240ddd349ca3850bf0a043 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b6\756b44dd86be06b063eaea9901508a8c896c54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b7\06938065740aa673b5a068ac2bcfb857eda7e2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b7\19ea0be8312ebe7a1c810ce2ac5d3e7dbf0380 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b8\15068363ad861329f2ce8c2f9ac7c48f92d7c5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b8\3b27dc3a7f1a3346a746a5c80c98266d68540a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b8\43c424eb10469d7550d6921b582cbde5ac6fc1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b8\58d7ea29d5bbd8464e9754f89f9a4f3f7af43f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b8\ef3a6bf01025739dd6fb945ecf279ce1e4d192 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b9\2ba52b5b40a5624a43af053685eb21e253ac8d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b9\ab085be0a1d6198fe1cf131c741a0d42d2bef0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\b9\b1707707bcd303c716f02a3c5e46bd5904a37a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ba\6380638382b7ed8b14afb482dfa3af38b885d9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ba\68e8a54f0b88f9ba1e6b1a83b799f5b9b32956 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ba\a72173f4c8fecdfd9a3721b15d41d5c68f12bb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ba\c13f9f6fab92d615246437ad994a7e6638f36e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 26: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bc\1aca3e1110c7f9a51fc830c4a7f507362789b6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bc\78bdd5cf9a31781d33a0fa85bd16a3ab8aa085 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bc\8b346b9a7fdc7349ce3a094f543ad899025f90 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bc\bd91b26c11e96351a14d2c6c8c2236b0aba913 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bc\c2375f564b4b8635610dbffff38dc87dd110b7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bd\14033dbea25f4139eb25dc911cae9880018a4a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bd\cd4a6ba232cf7f530d296e3ffe61cee727f1b9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\be\96940909a7ddbf5db984e3139379b05a256134 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\12b03982be01dde08f197bdb3bae070ba45410 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc5 in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\381a8be75ea9d560915bc52b16f05a4a02159a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\58abef54950a4a53ada6deee25175e9ae425c9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\909b5d22935698c69f71efe1d74e76e338db75 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\cb4144637271db4fc6a9435ae108c6fd0fcb36 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\bf\f029deae19f82951dc7ec69782ce68a6684ec9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c0\078bf11fbb0cb3c1233cdad1aa64438224d105 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c0\37809823a070390287dd0feebbff966deafc87 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c0\4eb0d64af1e73d84c479ff40d3f9ee013ca871 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c0\bf67468e3353f11d8e8ece6835bdc422f5a305 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd1 in position 4: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c1\58f4b7d74bd11d3a7dc5524be3f6604563de4e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c1\69812e10a496c5726ad180a947b36eec838abe ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c2\49d7c3df3eacb3b0de88060425eee3327be063 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c2\68aa6bced5153a98796f32569722b71515a373 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c2\d143f44df3cb0e63079c4ee2ae6c3d088aebe8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c3\58d69f56443a1b2b0635ca4044391d67b3e886 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c3\b497f148957b66eb0329e1f6667951201c56d6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c4\0e160f9429a9d09001f3df4021bc1a22277eb7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c4\485fe1b5009978a043632efbc8eddd8aa3b46e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c5\29259d6fb487df2dab31fa48f3de3df73eadb9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c5\e83152e5c3bf8b2c140260f1e3d3db9d7db86a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c6\50eeec486e899487353f80689ce0835031ab75 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c7\28b522ad99663c0e12d02b85ad24d0167a57d2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c7\4f1706b67b0bb5049ef301e5744807cf5b8b11 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c8\31f10e30d40cd12f3328b9d98a9ecfd5f2a4ba ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c8\ff253363cedad74c042dc0d7208975d315f613 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\c9\672d999407eccf3881dc82f66c8bd46452b171 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ca\1c20161fc02b0c32e11b6da9efa7e01b5bad62 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ca\33dc964bd87ac07b8f873321bc9457770ef348 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ca\82846976c6fa1f33e54fdfd128274be73b9897 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9c in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cb\63172a1ad8d4842cf444c40ad43b77903dc2fd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cb\f3e32b687cc3c18cc02f7cdd4c9c61381fe8b0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cb\fec843892ae0087184818e43e6bb44df71a866 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cc\7315f46670d5caa5aa1a4b39adae72e65f004c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cc\edcfe823081753ab147abc42d2df424acc0758 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cc\f63e61fb46888df673373b93ddb4ed07520c05 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cd\29ecc9d9ba65c1cd415fce33469915e122406d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cd\845c248929de3796d757c00535bb8e627ae29d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cd\8ec85fe4ca23dd72bda4f47559de5557baadc9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cd\be5a376c514cb9df4bc0067338adb5103108b0 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cf\653a4cd3225b73bae5b1097e6ca23f7dc6307b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cf\6edb0c9fc2975e71dfd584bed4ece7612be119 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cf\8b6545f822cefe5ea1c799af9e271a49383fed ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\cf\8fe592079851da88ffff74aaa2e3dd3bce3ea8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d0\3376ef95d286f8d011183866e917dd75faaae8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc3 in position 6: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d0\43741e151f20693fecccaec0772d7b41794315 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d0\dda3451730435a2ce08864eab63a75fde84f9b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d1\a1dfc0648df3d15e27d6409e7d55751bc3cdbd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xdd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d1\d7c511883fcd3ecd38f5a13b3c3f4f8bdf5c10 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d2\4300efdc5674775cb3682d32ec98fa4f2701a3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d2\4f0c42ee1a07a96ee3b00d5e77a69733380130 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d3\1a6678b7241eb2f0f849ce533372484dc98ca8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d3\aff4f15dfdb9f0836070145516fe4f5c75c5a1 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8c in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d4\16bf16cbdf5c1fae2f51bb82810094d274f0d4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d4\87a847607af0491c4248695d46afdeb62bae8d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d5\40c6fec9894b1bd04759b2889c9fc82ceabd28 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d5\453fa4b72f9b42030ca08e3c9a71cb41b7a384 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d5\706dbf9b49655fe628c820e560c55d8c83bce7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d6\29dbcbf3decf447fb3c4b11d3c3bc17c57549b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d6\4335781583d0a5bdb3552bfbe905028874999f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d6\d8a6348e4a68fee6262fe305f94fc7b50e8147 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\00f0f5bafe5ce97f3adb1f1f8e0150de972ef7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\33b3e587269db7f8ebd22c348de40bd93ce0e9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\9f31f6bc12aa2ebfd73bb17837d0837028fec7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\9f5fc66885e0df7c67a88bbbf1f8f0d7748077 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\a954fb2d9908e774aed93327967c2e247083ee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc8 in position 26: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d7\af44c75cd1c36eb827381339ed6d02e9cfe736 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d8\2affec1f668da0a32590231e83fc1b5a1bcd43 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d8\3b97617a5745952e04be82fade14c95dc70dba ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d8\8bcf8eceea791aad44cc581808e1591a5506ee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb1 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d8\8d7bf09d2bd9dcaa9a09fbac7f813fbea3fc23 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d8\dba342b298de41b45d9d6ac543bf0369e57512 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d9\8e5c31964be13de85d5d8415a4678d8711af18 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\d9\d3fc242409de7fcd58cadd4ddf03e8d1b76786 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\da\3eeb78e1ff0698cd88b3cd4c7adafc1a531f2d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\da\75e4e5cf8a7c8694cd1445e6d27ad958475d6d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\da\c79c9e6dd1309f23d4a89eb630effd3b7f92b3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\da\f3e791786bfece14102e10fb3ed81b31ec7e71 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dc\e50f1f187def29a8f9fd7a07235e6dbf2b317f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\1be4c80663d23df1105fbfa5d7a55a9df19c6d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\4dceafddacf4e244f9f72613e86aca0d8e94b8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\5a2a530efe3c3f510399f52c9319321f3203bc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\c24c148b4491986689cbace5ed172bf455e863 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\cd49bdfbc894880d0809a1f28a3caba1a265d6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\dd\e9b39dee17fdf6f1089ff6b687e76c88fffd15 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd4 in position 6: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\df\3ed64fdbc7a8b78c09ed4150c98c380ee3dafc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e0\d5e8df34b3035c3df4e9028f83025c625ebb76 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e0\ddb59bdc2045f947ba8344c07ca5374e93c789 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e1\1a83d1de9c8ffb2bcdfabaf626b67f6d27264f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e1\f00876e0d9540ee30c2e3a509c563658ec87bc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e2\5aa47409e317e024408c7001b61f13ce41517c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e2\61bd0b465b07465b0a273af3754ff9f3486e4d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e2\7ca7d25dcea19f5491027f92a64f9808ebdc36 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e2\a4e84eae2b3ee90fa8358a60220189239ee2e6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xc1 in position 4: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e3\07f84547f91484038c270efb867fe22f3e0403 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e3\85df0cb1a6c70a0d308433af6680358aa799c3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e6\18213af3f1dc0dbe6e2f90ff91dc03e22a1828 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e6\262c3e4bb69fd0e054e1bde1ad4c19b8b6e6d8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e6\6de05dda77af5a3d57479d36bca68d0ff184f7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e6\8ea62e8a4a1455dd9200601197c2c7a147d4ee ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e6\9de29bb2d1d6434b8b29ae775ad8c2e48c5391 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e7\79c6b0b2c5096a9cb88c682c0dc274e2b834ec ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e7\c7c2ccee139134243be475db773b6599dbc2a3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e8\11c7a6ffd2c993c0521a761026ebea5ece187a ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e8\f0f3d1d66c9d864486f6bb0bafe0c601b36537 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e9\664c3f0f9a1a462396dce106d4252ffdaa9899 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\e9\a15357ae23b56edd088226263465aa9266cd71 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ea\13360b7ba7b26fe735c42890163186d5d4fb3c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ea\df7b28d85a54b3cc6be4142a095e7da4abcca5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\eb\1145b095636a9f275d0831eeee287b4627b98d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\eb\bd91981305c5250aecb4e619fcaca955885aa8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf4 in position 22: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\eb\d0df7a3cba76d603a00c7ac82509e9d2362abc ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcb in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ec\64f131392db766c157a0d33082dc8818d2f9df ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xf7 in position 4: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ec\84c1982cc4e034cd13ce55f47ce8c86bddb8a3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ec\e9289daf4d9558a300cc0ef4f547bfbabb5a52 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ec\f6f97e8633b9e48745c77565dcf86f5336acf5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ee\2b7544b16f6d7e6580766d6d886bc4f98ea6e6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ee\7f9f5c316aa8beba90c19cdaf5d254b2a1dc00 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ee\a5c3fa3c5e25cf0c8a35278cebd3a26fbe8b81 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ef\21e7379145c30c6b20004123d4a505b0d0f326 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f0\1f72cbd7f10d07ef5b0f6ba0f2caa7a334ad27 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f0\25f401f3c91a41e238d88c1a0d79fb9fcc65c3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f0\7189a6f4b8648f3964605f715898095abaa548 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f0\8efcb2522bf10dd056d009abba6d5449a36748 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f1\342860aaa91353be1acf8c64b76967e642e9ff ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f1\467884e0e5608317bb8fd628fba1d2d0cf89f8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f1\48ea5f05bf45f746098619436860cee44b3034 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f1\6a9bba1120fdfbbf4324e83fc17195d08be51d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f2\086dae2401516b640b997e9b1ead6ef56c084e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f2\a300822cc11d7f11864c372a1999589d3f9405 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f3\f58050796d33cc6577f00256270bbd4c6b0fdb ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f4\488dc71a58f9c1b6af68230cfae2a57d76be20 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcf in position 23: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f5\0c19ddd4c543ccfd1d8383a6f865e797866608 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f5\23ca8d636ad691f65d17d500a1b6a3e53f95bf ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 9: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f5\dd6c2019620b29272e2ae13902033de71a82b3 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f6\6da719e7243581869168f2f2e94af4e57a4c27 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 19: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f7\2093fc4f72813ec4ae8da31a55373b58873fa8 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f9\0d479064b44137ea1b7cb4416346c56d6d33de ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f9\44aac737221ab90a9bb6887b50af297c5bd614 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f9\d325c36de23644645dc594554dfcbbf66c6b54 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xed in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\f9\f852efcc38612b2a3ccfc1271f533b691d6603 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fa\06ff6971f73914464f37cc8447f31cb87509e5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fa\839542ccd3b71280c343a5559c5a1ef18195fd ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fa\c453c96f24a7606f74ce1232710dfc7761229f ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fa\c67a25c45d9481ee72695dd07c5ae7e16cf2e7 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fa\de17198766518dcb48f7b18cf9f7983c2ad9fe ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xcd in position 2: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fb\1756d3d999e31497dc7e5c18c447bd5ed3daca ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fb\68ee7dc5deec776389fc37b4eaa9a98323acc2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fb\d6916f5cab8217556435359efd3f3c821a99c2 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fc\275f24025de56128ab8d98448c6a6cb9bd5ce6 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fd\2e02180867f56c3e36e413ce2d9b7a7f5d5779 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fd\4c121e901b8377a97bdb281dfcc285c8b5622e ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fd\a48e1d6b33df283bad7a70e346925a59acc26d ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fd\ac808cd257ff01bacd3a29d0b0623d9f9d6cf5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fd\b1008eba2320a72c8b6a7039df664429edd438 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x93 in position 3: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fe\72504af776217767f4e75c82df034944c6687b ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\fe\7dc705385d46ab4e5b248908adf568d83852d5 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xce in position 3: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ff\60132c75e62d2d110f414279703d7927ea06e4 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x85 in position 14: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ff\6962bc118a3396810f9060c117cd50bd2e4db9 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 20: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ff\6b1b390732ec670a2ad6ac40311893bcf39d1c ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb2 in position 8: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\ff\6fa9b4fd64f7ff191d34c0a87988deca660587 ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-57a935053faab68a1eafa5616f02121ae0d6a5a5.idx ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-57a935053faab68a1eafa5616f02121ae0d6a5a5.pack ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9a in position 12: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-57a935053faab68a1eafa5616f02121ae0d6a5a5.rev ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa9 in position 125: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-b6164280f605cd4c968469945bdd782ea7b09aa1.idx ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-b6164280f605cd4c968469945bdd782ea7b09aa1.pack ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xab in position 11: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-b6164280f605cd4c968469945bdd782ea7b09aa1.rev ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xa9 in position 23: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-e3a9eb419be5a41953482d1f98e0a6ca9bf4e148.idx ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-e3a9eb419be5a41953482d1f98e0a6ca9bf4e148.pack ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x99 in position 12: invalid start byte

---- Innehåll från: C:\git\Product-Service\.git\objects\pack\pack-e3a9eb419be5a41953482d1f98e0a6ca9bf4e148.rev ----
Fel vid läsning av fil: 'utf-8' codec can't decode bytes in position 444-445: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\.git\refs\heads\johan-test ----
2039fedb96464fc15e25b39081cd180567ebeaec


---- Innehåll från: C:\git\Product-Service\.git\refs\heads\main ----
e9a15357ae23b56edd088226263465aa9266cd71


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\CRUD ----
a36401289fac43b0efa9526df7180d7a872d0a7d


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\CRUD-fort ----
49ccdbcfb39c569cdc8468a9ed182412705bb78a


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\fix ----
ca82846976c6fa1f33e54fdfd128274be73b9897


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\github-actions-flow ----
5ee16817558124d3cfd6fd70410b1f45f09a194a


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\HEAD ----
ref: refs/remotes/origin/main


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\image-upload-feature ----
b201fa6a7227d080bfca32f33f61e54d73fc282a


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\Implement-logging-etc ----
2793529a7e2aacac0978457edba903b95aeb01cc


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\johan-test ----
2039fedb96464fc15e25b39081cd180567ebeaec


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\main ----
e9a15357ae23b56edd088226263465aa9266cd71


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\Mergin-Ismetes-new-code-to-hopefully-fix-everything ----
e86d1e35ecfcdb04e2ca5e945a1bca184b8bf559


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\UD ----
90778c642307dc2f45628bf02441d542d4614bc9


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\unified-productcontroller ----
260e6675ac57c85eb6738e78031d5223f2413ca4


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\unified-productcontroller-V2 ----
85a46046dfffd68227ee3932e84b096733cb82e8


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\unit-tests ----
bcbd91b26c11e96351a14d2c6c8c2236b0aba913


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\update-product ----
fdd7ae4b198329734b650c9b2f5704ccfe936292


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\Updated-ProductSpecificationsTest ----
fd87577573f7b4d599822ba967cbf10149b75101


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\updating-github-workflow ----
b3d20642d998e786782a74867b0aca108326b66d


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\feature\product-api ----
3d64709767dbcbac855aa06e9720b7322be9e587


---- Innehåll från: C:\git\Product-Service\.git\refs\remotes\origin\push\product-api ----
6dbd9d3e8b72f2e44d59e7d3de8b26ff6b237fd3


---- Innehåll från: C:\git\Product-Service\.github\workflows\docker-publish.yml ----
name: Docker Publish

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run tests with Maven
        run: mvn verify

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            davidandreasson/product-service:latest
            davidandreasson/product-service:${{ github.sha }}

---- Innehåll från: C:\git\Product-Service\.idea\.gitignore ----
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml


---- Innehåll från: C:\git\Product-Service\.idea\compiler.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="product-service" />
      </profile>
    </annotationProcessing>
  </component>
  <component name="JavacSettings">
    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
      <module name="product-service" options="-parameters" />
    </option>
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.idea\encodings.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.idea\jarRepositories.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.idea\material_theme_project_new.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MaterialThemeProjectNewConfig">
    <option name="metadata">
      <MTProjectMetadataState>
        <option name="migrated" value="true" />
        <option name="pristineConfig" value="false" />
        <option name="userId" value="-5afa0387:191b6d408db:-7ffe" />
      </MTProjectMetadataState>
    </option>
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.idea\misc.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_22" default="true" project-jdk-name="22" project-jdk-type="JavaSDK" />
</project>

---- Innehåll från: C:\git\Product-Service\.idea\vcs.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.idea\workspace.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="33fd6fa3-ad01-4d0e-9792-bae291b07c1f" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Rammsterr&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/Moln-integration/Product-Service.git&quot;,
    &quot;accountId&quot;: &quot;1e0ef5c9-2fd8-4fbe-a2f3-70a5e63b56be&quot;
  }
}</component>
  <component name="HttpClientOnboardingState">{
  &quot;isOnboardingCommentShown&quot;: true
}</component>
  <component name="MavenImportPreferences">
    <option name="generalSettings">
      <MavenGeneralSettings>
        <option name="mavenHomeTypeForPersistence" value="WRAPPER" />
      </MavenGeneralSettings>
    </option>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="328TQjOmrc6PQrRjPQUv5nFp9KX" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;Spring Boot.ProductServiceApplication.executor&quot;: &quot;Run&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;junie.onboarding.icon.badge.shown&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/git/Product-Service&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;to.speed.mode.migration.done&quot;: &quot;true&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration default="true" type="JetRunConfigurationType">
      <module name="Product-Service" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <module name="Product-Service" />
      <option name="filePath" />
      <method v="2" />
    </configuration>
    <configuration name="ProductServiceApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="product-service" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="se.moln.productservice.ProductServiceApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.25557.131" />
        <option value="bundled-js-predefined-d6986cc7102b-b598e85cdad2-JavaScript-IU-252.25557.131" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="33fd6fa3-ad01-4d0e-9792-bae291b07c1f" name="Changes" comment="" />
      <created>1756801185807</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1756801185807</updated>
      <workItem from="1756801187825" duration="950000" />
      <workItem from="1756802454728" duration="1593000" />
      <workItem from="1756833395302" duration="7000" />
      <workItem from="1756883178822" duration="10948000" />
      <workItem from="1756973173148" duration="10426000" />
      <workItem from="1757064071589" duration="87000" />
      <workItem from="1757092614638" duration="5000" />
      <workItem from="1757278805396" duration="584000" />
      <workItem from="1757313134889" duration="4450000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>

---- Innehåll från: C:\git\Product-Service\.mvn\wrapper\maven-wrapper.properties ----
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.2
distributionType=only-script
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip


---- Innehåll från: C:\git\Product-Service\data\products.mv.db ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x9b in position 8361: invalid start byte

---- Innehåll från: C:\git\Product-Service\data\products.trace.db ----
2025-09-04 11:12:33.815851+02:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CATEGORIES" not found (this database is empty); SQL statement:
INSERT INTO categories (id, name, slug, description) VALUES ('11111111-1111-1111-1111-111111111111', 'Uncategorized', 'uncategorized', 'Standardkategori'), ('22222222-2222-2222-2222-222222222222', 'Phones', 'phones', 'Mobiltelefoner'), ('33333333-3333-3333-3333-333333333333', 'Laptops', 'laptops', 'Bärbara datorer'), ('44444444-4444-4444-4444-444444444444', 'Accessories', 'accessories', 'Tillbehör'), ('55555555-5555-5555-5555-555555555555', 'Audio', 'audio', 'Hörlurar & högtalare') [42104-232]
2025-09-04 12:36:47.763992+02:00 database: close
org.h2.message.DbException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.mvstore.db.Store.close(Store.java:374)
	at org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1292)
	at org.h2.engine.Database.closeImpl(Database.java:1254)
	at org.h2.engine.Database.close(Database.java:1173)
	at org.h2.engine.Database.close(Database.java:1150)
	at org.h2.engine.Database.removeSession(Database.java:1077)
	at org.h2.engine.SessionLocal.close(SessionLocal.java:916)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:390)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:144)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:462)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 14 more
Caused by: org.h2.mvstore.MVStoreException: java.lang.AssertionError [2.3.232/3]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:926)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:463)
	at org.h2.mvstore.RandomAccessStore.compactStore(RandomAccessStore.java:443)
	at org.h2.mvstore.FileStore.compactStore(FileStore.java:890)
	at org.h2.mvstore.FileStore.stop(FileStore.java:275)
	at org.h2.mvstore.MVStore.closeStore(MVStore.java:693)
	at org.h2.mvstore.MVStore.close(MVStore.java:643)
	at org.h2.mvstore.db.Store.close(Store.java:364)
	... 12 more
Caused by: java.lang.AssertionError
	at org.h2.mvstore.RandomAccessStore.moveChunkInside(RandomAccessStore.java:630)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:569)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:481)
	at org.h2.mvstore.RandomAccessStore.lambda$compactMoveChunks$1(RandomAccessStore.java:468)
	at org.h2.mvstore.FileStore.executeFileStoreOperation(FileStore.java:1893)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:922)
	... 19 more
2025-09-04 12:56:09.089501+02:00 database: close
org.h2.message.DbException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.mvstore.db.Store.close(Store.java:374)
	at org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1292)
	at org.h2.engine.Database.closeImpl(Database.java:1254)
	at org.h2.engine.Database.close(Database.java:1173)
	at org.h2.engine.Database.close(Database.java:1150)
	at org.h2.engine.Database.removeSession(Database.java:1077)
	at org.h2.engine.SessionLocal.close(SessionLocal.java:916)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:390)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:144)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:462)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 14 more
Caused by: org.h2.mvstore.MVStoreException: java.lang.AssertionError [2.3.232/3]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:926)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:463)
	at org.h2.mvstore.RandomAccessStore.compactStore(RandomAccessStore.java:443)
	at org.h2.mvstore.FileStore.compactStore(FileStore.java:890)
	at org.h2.mvstore.FileStore.stop(FileStore.java:275)
	at org.h2.mvstore.MVStore.closeStore(MVStore.java:693)
	at org.h2.mvstore.MVStore.close(MVStore.java:643)
	at org.h2.mvstore.db.Store.close(Store.java:364)
	... 12 more
Caused by: java.lang.AssertionError
	at org.h2.mvstore.RandomAccessStore.moveChunkInside(RandomAccessStore.java:630)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:569)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:481)
	at org.h2.mvstore.RandomAccessStore.lambda$compactMoveChunks$1(RandomAccessStore.java:468)
	at org.h2.mvstore.FileStore.executeFileStoreOperation(FileStore.java:1893)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:922)
	... 19 more
2025-09-04 12:56:39.541606+02:00 database: close
org.h2.message.DbException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.mvstore.db.Store.close(Store.java:374)
	at org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1292)
	at org.h2.engine.Database.closeImpl(Database.java:1254)
	at org.h2.engine.Database.close(Database.java:1173)
	at org.h2.engine.Database.close(Database.java:1150)
	at org.h2.engine.Database.removeSession(Database.java:1077)
	at org.h2.engine.SessionLocal.close(SessionLocal.java:916)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:390)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:144)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:462)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 14 more
Caused by: org.h2.mvstore.MVStoreException: java.lang.AssertionError [2.3.232/3]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:926)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:463)
	at org.h2.mvstore.RandomAccessStore.compactStore(RandomAccessStore.java:443)
	at org.h2.mvstore.FileStore.compactStore(FileStore.java:890)
	at org.h2.mvstore.FileStore.stop(FileStore.java:275)
	at org.h2.mvstore.MVStore.closeStore(MVStore.java:693)
	at org.h2.mvstore.MVStore.close(MVStore.java:643)
	at org.h2.mvstore.db.Store.close(Store.java:364)
	... 12 more
Caused by: java.lang.AssertionError
	at org.h2.mvstore.RandomAccessStore.moveChunkInside(RandomAccessStore.java:630)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:569)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:481)
	at org.h2.mvstore.RandomAccessStore.lambda$compactMoveChunks$1(RandomAccessStore.java:468)
	at org.h2.mvstore.FileStore.executeFileStoreOperation(FileStore.java:1893)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:922)
	... 19 more
2025-09-05 09:47:53.951553+02:00 database: close
org.h2.message.DbException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.mvstore.db.Store.close(Store.java:374)
	at org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1292)
	at org.h2.engine.Database.closeImpl(Database.java:1254)
	at org.h2.engine.Database.close(Database.java:1173)
	at org.h2.engine.Database.close(Database.java:1150)
	at org.h2.engine.Database.removeSession(Database.java:1077)
	at org.h2.engine.SessionLocal.close(SessionLocal.java:916)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:390)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:144)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:462)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 14 more
Caused by: org.h2.mvstore.MVStoreException: java.lang.AssertionError [2.3.232/3]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:926)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:463)
	at org.h2.mvstore.RandomAccessStore.compactStore(RandomAccessStore.java:443)
	at org.h2.mvstore.FileStore.compactStore(FileStore.java:890)
	at org.h2.mvstore.FileStore.stop(FileStore.java:275)
	at org.h2.mvstore.MVStore.closeStore(MVStore.java:693)
	at org.h2.mvstore.MVStore.close(MVStore.java:643)
	at org.h2.mvstore.db.Store.close(Store.java:364)
	... 12 more
Caused by: java.lang.AssertionError
	at org.h2.mvstore.RandomAccessStore.moveChunkInside(RandomAccessStore.java:630)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:569)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:481)
	at org.h2.mvstore.RandomAccessStore.lambda$compactMoveChunks$1(RandomAccessStore.java:468)
	at org.h2.mvstore.FileStore.executeFileStoreOperation(FileStore.java:1893)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:922)
	... 19 more
2025-09-05 09:48:27.525855+02:00 database: close
org.h2.message.DbException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.mvstore.db.Store.close(Store.java:374)
	at org.h2.engine.Database.closeOpenFilesAndUnlock(Database.java:1292)
	at org.h2.engine.Database.closeImpl(Database.java:1254)
	at org.h2.engine.Database.close(Database.java:1173)
	at org.h2.engine.Database.close(Database.java:1150)
	at org.h2.engine.Database.removeSession(Database.java:1077)
	at org.h2.engine.SessionLocal.close(SessionLocal.java:916)
	at org.h2.jdbc.JdbcConnection.close(JdbcConnection.java:390)
	at com.zaxxer.hikari.pool.PoolBase.quietlyCloseConnection(PoolBase.java:144)
	at com.zaxxer.hikari.pool.HikariPool.lambda$closeConnection$1(HikariPool.java:462)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: IO Exception: "Closing" [90028-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 14 more
Caused by: org.h2.mvstore.MVStoreException: java.lang.AssertionError [2.3.232/3]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:926)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:463)
	at org.h2.mvstore.RandomAccessStore.compactStore(RandomAccessStore.java:443)
	at org.h2.mvstore.FileStore.compactStore(FileStore.java:890)
	at org.h2.mvstore.FileStore.stop(FileStore.java:275)
	at org.h2.mvstore.MVStore.closeStore(MVStore.java:693)
	at org.h2.mvstore.MVStore.close(MVStore.java:643)
	at org.h2.mvstore.db.Store.close(Store.java:364)
	... 12 more
Caused by: java.lang.AssertionError
	at org.h2.mvstore.RandomAccessStore.moveChunkInside(RandomAccessStore.java:630)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:569)
	at org.h2.mvstore.RandomAccessStore.compactMoveChunks(RandomAccessStore.java:481)
	at org.h2.mvstore.RandomAccessStore.lambda$compactMoveChunks$1(RandomAccessStore.java:468)
	at org.h2.mvstore.FileStore.executeFileStoreOperation(FileStore.java:1893)
	at org.h2.mvstore.MVStore.executeFilestoreOperation(MVStore.java:922)
	... 19 more


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\ProductServiceApplication.java ----
package se.moln.productservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProductServiceApplication {

    public static void main(String[] args) {
        SpringApplication.run(ProductServiceApplication.class, args);
    }

}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\CorsConfig.java ----
package se.moln.productservice.config;


import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfig implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // Allow all endpoints
                .allowedOrigins("http://localhost:3000", "https://productservice.drillbi.se/", "https://userservice.drillbi.se")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
                .allowedHeaders("*");
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\LocalSwaggerServersConfig.java ----
package se.moln.productservice.config;

import io.swagger.v3.oas.models.servers.Server;
import org.springdoc.core.customizers.OpenApiCustomizer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.util.List;

@Configuration
@Profile({"dev","local"})
public class LocalSwaggerServersConfig {

    @Bean
    public OpenApiCustomizer localServers(@Value("${server.port:8081}") int port) {
        return openApi -> openApi.setServers(
                List.of(new Server()
                        .url("http://localhost:" + port)
                        .description("Local development")));
    }
}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\LogbookConfig.java ----
package se.moln.productservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.zalando.logbook.BodyFilter;
import org.zalando.logbook.HeaderFilter;
import org.zalando.logbook.Logbook;
import org.zalando.logbook.HttpHeaders;
import java.util.regex.Pattern;

@Configuration
public class LogbookConfig {

    @Bean
    public Logbook logbook() {
        return Logbook.builder()
                .headerFilter(maskAuthorizationHeader())
                .bodyFilter(maskSensitiveJsonFields())
                .build();
    }

    private HeaderFilter maskAuthorizationHeader() {
        return headers -> headers.apply(
                HttpHeaders.predicate(name -> "Authorization".equalsIgnoreCase(name)),
                (n, v) -> java.util.Collections.singleton("*****")
        );
    }

    private BodyFilter maskSensitiveJsonFields() {
        // Simple regex masking for JSON string fields named password and token
        Pattern passwordPattern = Pattern.compile("(\\\"password\\\"\\s*:\\s*\\\")[^\\\"]*(\\\")", Pattern.CASE_INSENSITIVE);
        Pattern tokenPattern = Pattern.compile("(\\\"token\\\"\\s*:\\s*\\\")[^\\\"]*(\\\")", Pattern.CASE_INSENSITIVE);

        return (contentType, body) -> {
            if (body == null || body.isBlank()) {
                return body;
            }
            String masked = passwordPattern.matcher(body).replaceAll("$1*****$2");
            masked = tokenPattern.matcher(masked).replaceAll("$1*****$2");
            return masked;
        };
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\OpenApiConfig.java ----
package se.moln.productservice.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {

    @Bean
    public OpenAPI productServiceOpenAPI() {
        final String BASIC_SCHEME = "basicAuth";

        return new OpenAPI()
                .components(new Components()
                        .addSecuritySchemes(BASIC_SCHEME,
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("basic")
                                        .description("Login with username/password to call admin endpoints")
                        )
                )
                .info(new Info()
                        .title("Product Service API")
                        .version("v1")
                        .description("Product endpoints")
                )
                .servers(List.of(
                        new Server().url("https://productservice.drillbi.se").description("Production")
                ));
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\RequestIdFilter.java ----
package se.moln.productservice.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
import java.util.Optional;
import java.util.UUID;

@Component
public class RequestIdFilter extends OncePerRequestFilter {

    public static final String HEADER = "X-Request-Id";
    public static final String MDC_KEY = "requestId";

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {
        String requestId = Optional.ofNullable(request.getHeader(HEADER))
                .filter(h -> !h.isBlank())
                .orElseGet(() -> UUID.randomUUID().toString());

        MDC.put(MDC_KEY, requestId);
        response.setHeader(HEADER, requestId);

        try {
            filterChain.doFilter(request, response);
        } finally {
            MDC.remove(MDC_KEY);
        }
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\SecurityConfig.java ----
package se.moln.productservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
import org.springframework.http.HttpStatus;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.HttpStatusEntryPoint;

@Configuration
@EnableMethodSecurity
@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .exceptionHandling(ex -> ex
                // Return 401 without WWW-Authenticate header to prevent browser login popup
                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))
            )
            .authorizeHttpRequests(auth -> auth
                // Swagger & API docs
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                .requestMatchers("/actuator/info").hasRole("ADMIN")
                // Public API endpoints (adjust as needed)
                .requestMatchers("/api/products/**").permitAll()
                // Admin endpoints must be ADMIN
                .requestMatchers("/api/admin/**").hasRole("ADMIN")
                // everything else authenticated by default
                .anyRequest().authenticated()
            )
            .httpBasic(Customizer.withDefaults());
        return http.build();
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\config\StaticResourceConfig.java ----
package se.moln.productservice.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.nio.file.Path;

@Configuration
public class StaticResourceConfig implements WebMvcConfigurer {

    @Value("${app.upload.dir:uploads}")
    private String uploadDir;

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        Path uploadPath = Path.of(uploadDir).toAbsolutePath().normalize();
        registry.addResourceHandler("/uploads/**")
                .addResourceLocations("file:" + uploadPath.toString() + "/");
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\controller\AdminHealthController.java ----
package se.moln.productservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.boot.actuate.health.HealthComponent;
import org.springframework.boot.actuate.health.HealthEndpoint;
import org.springframework.boot.actuate.info.InfoEndpoint;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
@Tag(name = "Admin Health", description = "Rich health information for administrators")
public class AdminHealthController {

    private final ObjectProvider<HealthEndpoint> healthEndpointProvider;
    private final ObjectProvider<InfoEndpoint> infoEndpointProvider;

    public AdminHealthController(ObjectProvider<HealthEndpoint> healthEndpointProvider, ObjectProvider<InfoEndpoint> infoEndpointProvider) {
        this.healthEndpointProvider = healthEndpointProvider;
        this.infoEndpointProvider = infoEndpointProvider;
    }

    @GetMapping("/api/admin/health-details")
    @Operation(summary = "Detailed health information (admin only)")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json")),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
    })
    @SecurityRequirement(name = "basicAuth")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> healthDetails() {
        Map<String, Object> body = new HashMap<>();
        HealthEndpoint healthEndpoint = healthEndpointProvider.getIfAvailable();
        InfoEndpoint infoEndpoint = infoEndpointProvider.getIfAvailable();
        if (healthEndpoint == null || infoEndpoint == null) {
            body.put("status", "UNKNOWN");
            body.put("message", "Actuator Health/Info endpoints are not available in this environment");
            return ResponseEntity.ok(body);
        }
        HealthComponent health = healthEndpoint.health();
        Map<String, Object> info = infoEndpoint.info();
        body.put("status", health.getStatus().getCode());
        body.put("health", health);
        body.put("info", info);
        return ResponseEntity.ok(body);
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\controller\InventoryController.java ----
package se.moln.productservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import se.moln.productservice.dto.AdjustStockRequest;
import se.moln.productservice.dto.InventoryResponse;
import se.moln.productservice.service.InventoryService;

import java.util.UUID;

/**
 * 
 */
@RestController
@RequestMapping("/api/inventory")
public class InventoryController {

    private final InventoryService service;

    public InventoryController(InventoryService service) {
        this.service = service;
    }

    @Operation(summary = "Hämta lagerstatus", description = "Returnerar lagersaldo och relaterad information för angiven produkt.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryResponse.class))),
            @ApiResponse(responseCode = "404", description = "Produkten hittades inte")
    })
    @GetMapping("/{productId}")
    public ResponseEntity<InventoryResponse> get(
            @Parameter(name = "productId", description = "Produktens UUID", example = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
            @PathVariable UUID productId) {
        return ResponseEntity.ok(service.get(productId));
    }

    @Operation(summary = "Köp/Reservera i lager", description = "Minskar lagersaldot med angivet antal.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryResponse.class))),
            @ApiResponse(responseCode = "400", description = "Ogiltig indata"),
            @ApiResponse(responseCode = "404", description = "Produkten hittades inte")
    })
    @PostMapping("/{productId}/purchase")
    public ResponseEntity<InventoryResponse> purchase(
            @Parameter(name = "productId", description = "Produktens UUID", example = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
            @PathVariable UUID productId,
            @RequestBody @Valid AdjustStockRequest req
    ) {
        return ResponseEntity.ok(service.purchase(productId, req.quantity()));
    }

    @Operation(summary = "Retur till lager", description = "Ökar lagersaldot (återlägger) med angivet antal.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = InventoryResponse.class))),
            @ApiResponse(responseCode = "400", description = "Ogiltig indata"),
            @ApiResponse(responseCode = "404", description = "Produkten hittades inte")
    })
    @PostMapping("/{productId}/return")
    public ResponseEntity<InventoryResponse> doReturn(
            @Parameter(name = "productId", description = "Produktens UUID", example = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
            @PathVariable UUID productId,
            @RequestBody @Valid AdjustStockRequest req
    ) {
        return ResponseEntity.ok(service.refund(productId, req.quantity()));
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\controller\ProductController.java ----
package se.moln.productservice.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import se.moln.productservice.dto.PageResponse;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.service.ProductImageAppService;
import se.moln.productservice.service.ProductQueryService;
import se.moln.productservice.service.ProductReadService;
import se.moln.productservice.service.ProductService;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/products")
public class ProductController {

    private static final Logger log = LoggerFactory.getLogger(ProductController.class);

    private final ProductService service;
    private final ProductImageAppService imageService;
    private final ProductReadService readService;
    private final ProductQueryService queryService;

    public ProductController(ProductService service,
                             ProductImageAppService imageService,
                             ProductReadService readService,
                             ProductQueryService queryService) {
        this.service = service;
        this.imageService = imageService;
        this.readService = readService;
        this.queryService = queryService;
    }

    @Operation(summary = "Skapa en ny produkt", description = "Skapar en produkt baserat på inskickad JSON-body.")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "Produkt skapad",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProductResponse.class))),
            @ApiResponse(responseCode = "400", description = "Ogiltig indata")
    })
    @PostMapping
    public ResponseEntity<ProductResponse> create(@Valid @RequestBody ProductRequest req) {
        log.info("Create product request received");
        log.debug("Create payload received");
        return ResponseEntity.status(HttpStatus.CREATED).body(service.create(req));
    }

    @Operation(summary = "Lista produkter (paginering)", description = "Hämtar en paginerad lista av produkter. Styr resultatet med parametrarna page, size, sortBy och sortDir.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = PageResponse.class)))
    })
    @GetMapping
    public ResponseEntity<PageResponse<ProductResponse>> getAllProducts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "5") int size,
            @RequestParam(defaultValue = "name") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir) {
        log.debug("Fetching products page={} size={} sortBy={} sortDir={}", page, size, sortBy, sortDir);

        Sort sort = sortDir.equalsIgnoreCase("desc") ?
                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<ProductResponse> products = service.getAllProducts(pageable);
        PageResponse<ProductResponse> response = new PageResponse<>(products);
        return ResponseEntity.ok(response);
    }

    @Operation(summary = "Lista alla produkter", description = "Hämtar alla produkter utan paginering.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK")
    })
    @GetMapping("/all")
    public ResponseEntity<List<ProductResponse>> getAllProductsWithoutPagination() {
        List<ProductResponse> products = service.getAllProductsWithoutPagination();
        log.debug("Fetched all products count={}", products.size());
        return ResponseEntity.ok(products);
    }

    @Operation(summary = "Sök produkter", description = "Sökning på namn, kategori och/eller prisintervall. Alla parametrar är valfria.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK")
    })
    @GetMapping("/search")
    public ResponseEntity<List<ProductResponse>> searchProducts(
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String categoryName,
            @RequestParam(required = false) BigDecimal minPrice,
            @RequestParam(required = false) BigDecimal maxPrice
    ) {
        List<ProductResponse> products = service.searchProducts(name, categoryName, minPrice, maxPrice);
        log.debug("Search completed name={} categoryName={} minPrice={} maxPrice={} count={}", name, categoryName, minPrice, maxPrice, products.size());
        return ResponseEntity.ok(products);
    }

    @Operation(
            summary = "Ladda upp produktbild",
            description = "Skicka som multipart/form-data med fältet 'file'. Bilden sparas lokalt och kopplas till produkten."
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "Created",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ProductResponse.class)
                    )
            ),
            @ApiResponse(responseCode = "404", description = "Product not found"),
            @ApiResponse(responseCode = "400", description = "Invalid input")
    })
    @PostMapping(
            path = "/{id}/images",
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    public ResponseEntity<ProductResponse> uploadImage(
            @Parameter(name = "id", description = "Produktens UUID", example = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3")
            @PathVariable UUID id,
            @Parameter(description = "Bildfil (jpg/png/webp)")
            @RequestPart("file") MultipartFile file
    ) throws IOException {
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(imageService.uploadImage(id, file));
    }

    @Operation(summary = "Hämta produkt", description = "Hämtar en produkt via dess UUID.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Produkten hittades inte")
    })
    @GetMapping("/{id}")
    public ResponseEntity<ProductResponse> getById(@PathVariable UUID id) {
        return ResponseEntity.ok(readService.getById(id));
    }

    @Operation(summary = "Lista aktiva produkter", description = "Hämtar en paginerad lista av aktiva produkter.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK")
    })
    @GetMapping("/active")
    public ResponseEntity<Page<ProductResponse>> listActive(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        return ResponseEntity.ok(queryService.listActive(page, size));
    }

    @Operation(summary = "Lista produkter per kategori", description = "Hämtar en paginerad lista av produkter filtrerade på kategori.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "404", description = "Kategorin hittades inte")
    })
    @GetMapping("/by-category/{categoryId}")
    public ResponseEntity<Page<ProductResponse>> listByCategory(
            @PathVariable UUID categoryId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        return ResponseEntity.ok(queryService.listByCategory(categoryId, page, size));
    }


    @Operation(summary = "Uppdatera en befintlig produkt", description = "Uppdaterar alla ändringsbara fält för en produkt baserat på ID.")
    @ApiResponses({
            @ApiResponse(responseCode = "200", description = "Produkten uppdaterades framgångsrikt."),
            @ApiResponse(responseCode = "404", description = "Produkten med det angivna ID:t hittades inte.")
    })
    @PutMapping("{id}")
    public ResponseEntity<ProductResponse> update(
            @PathVariable UUID id,
            @Valid @RequestBody ProductRequest req){

        ProductResponse updateProduct = service.update(id, req);
        return ResponseEntity.ok(updateProduct);
    }



    @Operation(summary = "Ta bort en produkt", description = "Tar bort en produkt från databasen baserat på dess ID.")
    @ApiResponses({
            @ApiResponse(responseCode = "204", description = "Produkten togs bort framgångsrikt."),
            @ApiResponse(responseCode = "404", description = "Produkten med det angivna ID:t hittades inte.")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProduct(@PathVariable UUID id) {
        service.delete(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\dto\AdjustStockRequest.java ----
package se.moln.productservice.dto;

import jakarta.validation.constraints.Min;

public record AdjustStockRequest(
        @Min(1) int quantity
) {}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\dto\InventoryResponse.java ----
package se.moln.productservice.dto;

import se.moln.productservice.model.StockStatus;

import java.util.UUID;

public record InventoryResponse(
        UUID productId,
        int quantity,
        StockStatus status
) {
}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\dto\PageResponse.java ----
package se.moln.productservice.dto;

import org.springframework.data.domain.Page;

import java.util.List;

public class PageResponse<T> {
    private List<T> content;
    private int pageNumber;
    private int pageSize;
    private long totalElements;
    private int totalPages;
    private boolean first;
    private boolean last;
    private boolean empty;

    public PageResponse() {}

    public PageResponse(Page<T> page) {
        this.content = page.getContent();
        this.pageNumber = page.getNumber();
        this.pageSize = page.getSize();
        this.totalElements = page.getTotalElements();
        this.totalPages = Math.max(1, page.getTotalPages());
        this.first = page.isFirst();
        this.last = page.isLast();
        this.empty = page.isEmpty();
    }

    // Getters and setters
    public List<T> getContent() { return content; }
    public void setContent(List<T> content) { this.content = content; }

    public int getPageNumber() { return pageNumber; }
    public void setPageNumber(int pageNumber) { this.pageNumber = pageNumber; }

    public int getPageSize() { return pageSize; }
    public void setPageSize(int pageSize) { this.pageSize = pageSize; }

    public long getTotalElements() { return totalElements; }
    public void setTotalElements(long totalElements) { this.totalElements = totalElements; }

    public int getTotalPages() { return totalPages; }
    public void setTotalPages(int totalPages) { this.totalPages = totalPages; }

    public boolean isFirst() { return first; }
    public void setFirst(boolean first) { this.first = first; }

    public boolean isLast() { return last; }
    public void setLast(boolean last) { this.last = last; }

    public boolean isEmpty() { return empty; }
    public void setEmpty(boolean empty) { this.empty = empty; }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\dto\ProductRequest.java ----
package se.moln.productservice.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;


import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Schema(name = "ProductRequest", description = "Payload för att skapa/uppdatera en produkt")
public record ProductRequest(
        @Schema(example = "iPhone 16 Pro", description = "Produktens namn")
        @NotBlank String name,

        @Schema(example = "Apples flaggskepp med USB-C och A18", description = "Beskrivning (lång text tillåten)")
        String description,

        @Schema(example = "12999.00", description = "Pris exkl. eller inkl. moms beroende på din domän")
        @NotNull @Positive BigDecimal price,

        @Schema(example = "SEK", description = "Valutakod enligt ISO 4217")
        @NotBlank String currency,


        @Schema(example = "null", nullable = true,
                description = "Valfritt. Kategori-ID om du vill länka till befintlig kategori")
        UUID categoryId,


        @Schema(example = "Mobiler", nullable = true,
                description = "Valfritt. Namn på kategori om du inte har ID. Skapas vid behov i dev/demo.")
        String categoryName,


        @Schema(example = "10", description = "Initialt lagersaldo")
        @Min(0) Integer stockQuantity,

        @Schema(
                description = "Nyckel-värde-attribut (filtreras/normaliseras i servern)",
                example = """
            {"color":"space gray","ram":"32GB","storage":"256GB"}
            """
        )
        Map<String,String> attributes,

        @Schema(
                description = "Lista med publika bild-URL:er (eller blob-URL:er)",
                example = """
            ["https://example.com/images/iphone16-front.jpg","https://example.com/images/iphone16-back.jpg"]
            """
        )
        List<String> imageUrls
) {}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\dto\ProductResponse.java ----
package se.moln.productservice.dto;

import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Schema(name = "ProductResponse", description = "Produkt som returneras från API:t")
public record ProductResponse(
        @Schema(example = "b7f8f3f9-3e8c-4612-9d8a-1d4c9f77a001") UUID id,
        @Schema(example = "iPhone 16 Pro") String name,
        @Schema(example = "iphone-16-pro") String slug,
        @Schema(example = "Apples flaggskepp med USB-C och A18") String description,
        @Schema(example = "12999.00") BigDecimal price,
        @Schema(example = "SEK") String currency,
        @Schema(example = "Mobiler", nullable = true) String categoryName,
        @Schema(example = "10") int stockQuantity,
        @Schema(example = "true") boolean active,
        @Schema(example = """
            {"color":"space gray","ram":"32GB","storage":"256GB"}
        """) Map<String,String> attributes,
        @Schema(example = """
            ["https://example.com/images/iphone16-front.jpg","https://example.com/images/iphone16-back.jpg"]
        """) List<String> images
) {}






//package se.moln.productservice.dto;
//
//import java.math.BigDecimal;
//import java.util.List;
//import java.util.Map;
//import java.util.UUID;
//
//public record ProductResponse(
//        UUID id, String name, String slug, String description,
//        BigDecimal price, String currency, String categoryName,
//        int stockQuantity, boolean active,
//        Map<String,String> attributes, List<String> images
//) {}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\exception\ApiExceptionHandler.java ----
package se.moln.productservice.exception;


import jakarta.persistence.EntityNotFoundException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestControllerAdvice
public class ApiExceptionHandler {

    @ExceptionHandler(DuplicateProductException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public Map<String, Object> handleDuplicate(DuplicateProductException ex) {
        return Map.of("error", "Conflict", "message", ex.getMessage());
    }

    // Om DB ändå kastar unikt-fel (t.ex. slug) → returnera också 409
    @ExceptionHandler(DataIntegrityViolationException.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public Map<String, Object> handleIntegrity(DataIntegrityViolationException ex) {
        return Map.of("error", "Conflict",
                "message", "Unique constraint violated (e.g. slug/name already exists)");
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map<String, Object> handleValidation(MethodArgumentNotValidException ex) {
        var errors = ex.getBindingResult().getFieldErrors().stream()
                .map(e -> Map.of("field", e.getField(), "error", e.getDefaultMessage()))
                .toList();
        return Map.of("error", "Validation failed", "details", errors);
    }

    @ExceptionHandler(EntityNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public Map<String, Object> handleNotFound(EntityNotFoundException ex) {
        return Map.of("error", "Not Found", "message", ex.getMessage());
    }

    @ExceptionHandler(IllegalArgumentException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map<String, Object> handleIllegalArgument(IllegalArgumentException ex) {
        return Map.of("error", "Bad Request", "message", ex.getMessage());
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\exception\DuplicateProductException.java ----
package se.moln.productservice.exception;

public class DuplicateProductException extends RuntimeException {
    public DuplicateProductException(String message) {
        super(message);
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\exception\GlobalExceptionHandler.java ----
package se.moln.productservice.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

import org.springframework.validation.BindException;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {
    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler({MethodArgumentNotValidException.class, BindException.class })
    public ResponseEntity<?> handleValidation(Exception ex) {
        log.warn("Validation failed: {}", ex.getMessage());
        return ResponseEntity.badRequest().body(Map.of("error", "validation_failed", "message", ex.getMessage()));
    }

    @ExceptionHandler(IllegalStateException.class)
    public ResponseEntity<?> handleIllegalState(IllegalStateException ex) {
        log.warn("Illegal state: {}", ex.getMessage());
        return ResponseEntity.status(HttpStatus.CONFLICT).body(Map.of("error", "conflict", "message", ex.getMessage()));
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<?> handleUnhandled(Exception ex) {
        log.error("Unhandled error", ex);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "internal_error", "message", "An unexpected error occurred"));
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\exception\ResourceNotFoundException.java ----
package se.moln.productservice.exception;


import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {

    public ResourceNotFoundException(String message) {
        super(message);
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\health\AppHealthIndicator.java ----
package se.moln.productservice.health;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import se.moln.productservice.repository.ProductRepository;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.Duration;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@Component
public class AppHealthIndicator implements HealthIndicator {

    private final ProductRepository productRepository;
    private final Environment env;
    private final String uploadDir;
    private final Instant startedAt = Instant.now();

    public AppHealthIndicator(ProductRepository productRepository,
                              Environment env,
                              @Value("${app.upload.dir:uploads}") String uploadDir) {
        this.productRepository = productRepository;
        this.env = env;
        this.uploadDir = uploadDir;
    }

    @Override
    public Health health() {
        Map<String, Object> details = new HashMap<>();

        // Uptime
        Duration uptime = Duration.between(startedAt, Instant.now());
        details.put("uptime", uptime.toString());

        // App info
        details.put("app", Map.of(
                "name", env.getProperty("spring.application.name", "product-service"),
                "profile", String.join(",", env.getActiveProfiles())
        ));

        // Database check
        try {
            long count = productRepository.count();
            details.put("database", Map.of(
                    "status", "UP",
                    "products", count
            ));
        } catch (Exception ex) {
            return Health.down(ex).withDetail("database", Map.of("status", "DOWN", "error", ex.getMessage())).withDetails(details).build();
        }

        // Upload directory check (exists, writable, free space)
        try {
            Path path = Path.of(uploadDir);
            if (!Files.exists(path)) {
                Files.createDirectories(path);
            }
            File f = path.toFile();
            boolean canWrite = f.canWrite();
            long freeBytes = f.getUsableSpace();
            details.put("storage", Map.of(
                    "path", f.getAbsolutePath(),
                    "writable", canWrite,
                    "freeBytes", freeBytes
            ));
        } catch (Exception ex) {
            return Health.down(ex).withDetail("storage", Map.of("status", "DOWN", "error", ex.getMessage())).withDetails(details).build();
        }

        return Health.up().withDetails(details).build();
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\mappning\ProductMapper.java ----
package se.moln.productservice.mappning;

import org.springframework.stereotype.Component;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.model.Category;
import se.moln.productservice.model.Product;
import se.moln.productservice.model.ProductImage;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Component
public class ProductMapper {

    public Product toEntity(ProductRequest req, Category cat) {
        Product p = new Product();
        p.setName(req.name());
        p.setSlug(slugify(req.name()));
        p.setDescription(req.description());
        p.setPrice(req.price());
        p.setCurrency(req.currency());
        p.setCategory(cat);
        p.setStockQuantity(req.stockQuantity() != null ? req.stockQuantity() : 0);
        if (req.attributes() != null) {
            p.setAttributes(new LinkedHashMap<>(req.attributes()));
        }
        if (req.imageUrls() != null) {
            req.imageUrls().forEach(url -> p.addImage(url, null, null, null));
        }
        return p;
    }

    public ProductResponse toResponse(Product p) {
        Map<String, String> attrs =
                p.getAttributes() == null ? Map.of() : new LinkedHashMap<>(p.getAttributes());

        List<String> images =
                p.getImages() == null ? List.of()
                        : p.getImages().stream().map(ProductImage::getUrl).toList();

        return new ProductResponse(
                p.getId(), p.getName(), p.getSlug(), p.getDescription(),
                p.getPrice(), p.getCurrency(),
                p.getCategory() != null ? p.getCategory().getName() : null,
                p.getStockQuantity(), p.isActive(),
                attrs, images
        );
    }

    private String slugify(String s) {
        return s.toLowerCase().trim()
                .replaceAll("[^a-z0-9]+","-")
                .replaceAll("(^-|-$)","");
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\model\Category.java ----
package se.moln.productservice.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.util.Objects;
import java.util.UUID;


@Entity
@Table(name = "categories")
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @NotBlank
    @Size(max = 100)
    @Column(nullable = false, length = 100, unique = true)
    private String name;

    @Size(max = 200)
    private String slug;

    @Size(max = 500)
    private String description;

    public UUID getId() { return id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    @Override public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Category that)) return false;
        return id != null && id.equals(that.id);
    }
    @Override public int hashCode() { return Objects.hashCode(id); }
}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\model\Inventory.java ----
package se.moln.productservice.model;

import jakarta.persistence.*;
import java.util.UUID;

@Entity
@Table(
        name = "inventory",
        indexes = @Index(name = "idx_inventory_product", columnList = "product_id", unique = true)
)
public class Inventory {

    @Id
    @GeneratedValue
    private UUID id;

    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "product_id", nullable = false, unique = true)
    private Product product;

    @Column(nullable = false)
    private int quantity = 0;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    private StockStatus status = StockStatus.OUT_OF_STOCK;

    @Version
    private Long version;

    // getters/setters
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public Product getProduct() {
        return product;
    }

    public void setProduct(Product product) {
        this.product = product; }

    public int getQuantity() {
        return quantity; }

    public void setQuantity(int quantity) {
        this.quantity = quantity; }

    public StockStatus getStatus() {
        return status; }

    public void setStatus(StockStatus status) {
        this.status = status; }

    public Long getVersion() {
        return version; }

    public void setVersion(Long version) {
        this.version = version; }
}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\model\Product.java ----
package se.moln.productservice.model;


import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.*;

@Entity
@Table(name= "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @NotBlank
    @Size(max = 200)
    @Column(nullable = false, length = 200)
    private String name;

    @Size(max = 200)
    @Column(unique = true, length = 200)
    private String slug;

    @Lob
    @Column(columnDefinition = "nvarchar(max)")
    private String description;

    @NotNull
    @Digits(integer = 15, fraction = 4)
    @Column private BigDecimal price;

    @NotNull
    @Size(min = 3, max = 3)
    @Column(nullable = false, length = 3)
    private String currency;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;

    @Min(0)
    @Column(nullable = false)
    private int stockQuantity = 0;

    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(
            name = "product_images",
            joinColumns = @JoinColumn(name = "product_id")
    )
    @OrderColumn(name = "position")
    private List<ProductImage> images = new ArrayList<>();

    @ElementCollection(fetch = FetchType.LAZY)
    @CollectionTable(
            name = "product_attributes",
            joinColumns = @JoinColumn(name = "product_id")
    )
    @MapKeyColumn(name = "attr_key", length = 100)
    @Column(name = "attr_value", columnDefinition = "nvarchar(max)")
    private Map<String, String> attributes = new LinkedHashMap<>();

    @Column(nullable = false)
    private boolean active = true;

    @Version
    private long version;

    @CreationTimestamp
    @Column(nullable = false, updatable = false)
    private OffsetDateTime createdAt;

    @UpdateTimestamp
    @Column(nullable = false)
    private OffsetDateTime updatedAt;

    public void reserveStock(int quantity) {
        if (quantity <= 0) throw new IllegalArgumentException("quantity måste vara > 0");
        if (this.stockQuantity < quantity) {
            throw new IllegalStateException("Otillräckligt lager");
        }
        this.stockQuantity -= quantity;
    }

    public void releaseStock(int quantity) {
        if (quantity <= 0) throw new IllegalArgumentException("quantity måste vara > 0");
        this.stockQuantity += quantity;
    }

    public void addImage(String url, String fileName, String contentType, Long sizeBytes) {
        this.images.add(new ProductImage(url, fileName, contentType, sizeBytes));
    }

    public void putAttribute(String key, String value) {
        this.attributes.put(Objects.requireNonNull(key), value);
    }


    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getSlug() { return slug; }
    public void setSlug(String slug) { this.slug = slug; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }

    public String getCurrency() { return currency; }
    public void setCurrency(String currency) { this.currency = currency; }

    public Category getCategory() { return category; }
    public void setCategory(Category category) { this.category = category; }

    public int getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(int stockQuantity) { this.stockQuantity = stockQuantity; }

    public List<ProductImage> getImages() { return images; }
    public void setImages(List<ProductImage> images) { this.images = images; }

    public Map<String, String> getAttributes() { return attributes; }
    public void setAttributes(Map<String, String> attributes) { this.attributes = attributes; }

    public boolean isActive() { return active; }
    public void setActive(boolean active) { this.active = active; }

    public long getVersion() { return version; }
    public OffsetDateTime getCreatedAt() { return createdAt; }
    public OffsetDateTime getUpdatedAt() { return updatedAt; }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Product that)) return false;
        return id != null && id.equals(that.id);
    }

    @Override
    public int hashCode() { return Objects.hashCode(id); }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\model\ProductImage.java ----
package se.moln.productservice.model;


import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

@Embeddable
public class ProductImage {
    @NotBlank
    @Column(nullable = false, length = 1000)
    private String url;

    @Size(max = 255)
    private String fileName;

    @Size(max = 100)
    private String contentType;

    private Long sizeBytes;

    protected ProductImage() {} // JPA

    public ProductImage(String url, String fileName, String contentType, Long sizeBytes) {
        this.url = url;
        this.fileName = fileName;
        this.contentType = contentType;
        this.sizeBytes = sizeBytes;
    }

    public String getUrl() { return url; }
    public String getFileName() { return fileName; }
    public String getContentType() { return contentType; }
    public Long getSizeBytes() { return sizeBytes; }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\model\StockStatus.java ----
package se.moln.productservice.model;

public enum StockStatus {
    IN_STOCK, OUT_OF_STOCK
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\repository\CategoryRepository.java ----
package se.moln.productservice.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import se.moln.productservice.model.Category;

import java.util.Optional;
import java.util.UUID;

public interface CategoryRepository extends JpaRepository<Category, UUID> {
    Optional<Category> findByNameIgnoreCase(String name);
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\repository\InventoryRepository.java ----
package se.moln.productservice.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import se.moln.productservice.model.Inventory;

import java.util.Optional;
import java.util.UUID;

public interface InventoryRepository extends JpaRepository<Inventory, UUID> {
    Optional<Inventory> findByProductId(UUID productId);
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\repository\ProductRepository.java ----
package se.moln.productservice.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import se.moln.productservice.model.Product;

import java.util.List;
import java.util.UUID;

public interface ProductRepository extends JpaRepository<Product, UUID>, JpaSpecificationExecutor<Product> {
    Page<Product> findByActiveTrue(Pageable pageable);

    Page<Product> findByCategory_IdAndActiveTrue(UUID categoryId, Pageable pageable);

    boolean existsBySlug(String slug);

    boolean existsByNameIgnoreCase(String name);

    @Query("SELECT p FROM Product p LEFT JOIN FETCH p.attributes")
    Page<Product> findAllWithAttributes(Pageable pageable);

    @Query("SELECT p FROM Product p LEFT JOIN FETCH p.attributes")
    List<Product> findAllWithAttributes();
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\FileStorageService.java ----
package se.moln.productservice.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;

@Service
public class FileStorageService {

    private final Path root;

    public FileStorageService(@Value("${app.upload.dir:uploads}") String uploadDir) throws IOException {
        this.root = Path.of(uploadDir).toAbsolutePath().normalize();
        Files.createDirectories(this.root);
    }

    public StoredFile store(MultipartFile file) throws IOException {
        if (file.isEmpty()) throw new IOException("Empty file");
        String original = StringUtils.cleanPath(file.getOriginalFilename() == null ? "file" : file.getOriginalFilename());
        String ext = "";
        int dot = original.lastIndexOf('.');
        if (dot >= 0 && dot < original.length() - 1) ext = original.substring(dot);
        String savedName = UUID.randomUUID() + ext;

        Path target = root.resolve(savedName);
        file.transferTo(target);

        String url = "/uploads/" + savedName;
        return new StoredFile(url, original, file.getContentType(), file.getSize());
    }

    public record StoredFile(String url, String originalName, String contentType, long size) {
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\InventoryService.java ----
package se.moln.productservice.service;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import se.moln.productservice.dto.InventoryResponse;
import se.moln.productservice.model.Inventory;
import se.moln.productservice.model.Product;
import se.moln.productservice.model.StockStatus;
import se.moln.productservice.repository.InventoryRepository;
import se.moln.productservice.repository.ProductRepository;

import java.util.UUID;

@Service
public class InventoryService {

    private final InventoryRepository inventoryRepo;
    private final ProductRepository productRepo;

    public InventoryService(InventoryRepository inventoryRepo, ProductRepository productRepo) {
        this.inventoryRepo = inventoryRepo;
        this.productRepo = productRepo;
    }

    @Transactional(readOnly = true)
    public InventoryResponse get(UUID productId) {
        Inventory inv = getOrCreate(productId);
        return toResponse(inv);
    }

    @Transactional
    public InventoryResponse purchase(UUID productId, int qty) {
        if (qty <= 0) throw new IllegalArgumentException("quantity must be > 0");
        Inventory inv = getOrCreate(productId);
        if (inv.getQuantity() < qty) {
            throw new IllegalArgumentException("not enough stock");
        }
        inv.setQuantity(inv.getQuantity() - qty);
        inv.setStatus(inv.getQuantity() > 0 ? StockStatus.IN_STOCK : StockStatus.OUT_OF_STOCK);
        inventoryRepo.save(inv);
        return toResponse(inv);
    }

    @Transactional
    public InventoryResponse refund(UUID productId, int qty) {
        if (qty <= 0) throw new IllegalArgumentException("quantity must be > 0");
        Inventory inv = getOrCreate(productId);
        inv.setQuantity(inv.getQuantity() + qty);
        inv.setStatus(StockStatus.IN_STOCK);
        inventoryRepo.save(inv);
        return toResponse(inv);
    }

    private Inventory getOrCreate(UUID productId) {
        Product product = productRepo.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("Product not found: " + productId));

        return inventoryRepo.findByProductId(productId).orElseGet(() -> {
            Inventory n = new Inventory();
            n.setProduct(product);
            n.setQuantity(0);
            n.setStatus(StockStatus.OUT_OF_STOCK);
            return inventoryRepo.save(n);
        });
    }

    private InventoryResponse toResponse(Inventory inv) {
        return new InventoryResponse(inv.getProduct().getId(), inv.getQuantity(), inv.getStatus());
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\ProductImageAppService.java ----
package se.moln.productservice.service;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.io.IOException;
import java.util.UUID;

@Service
public class ProductImageAppService {

    private final ProductRepository repo;
    private final ProductMapper mapper;
    private final FileStorageService storage;

    public ProductImageAppService(ProductRepository repo,
                                  ProductMapper mapper,
                                  FileStorageService storage) {
        this.repo = repo;
        this.mapper = mapper;
        this.storage = storage;
    }

    @Transactional
    public ProductResponse uploadImage(UUID productId, MultipartFile file) throws IOException {
        Product p = repo.findById(productId)
                .orElseThrow(() -> new EntityNotFoundException("Product not found: " + productId));

        var stored = storage.store(file);
        p.addImage(stored.url(), stored.originalName(), stored.contentType(), stored.size());

        var saved = repo.save(p);
        return mapper.toResponse(saved);
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\ProductQueryService.java ----
package se.moln.productservice.service;

import org.hibernate.Hibernate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.util.UUID;

@Service
@Transactional(readOnly = true)
public class ProductQueryService {

    private final ProductRepository repo;
    private final ProductMapper mapper;

    public ProductQueryService(ProductRepository repo, ProductMapper mapper) {
        this.repo = repo;
        this.mapper = mapper;
    }

    public ProductResponse getById(UUID id) {
        Product p = repo.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Product not found"));

        if (p.getCategory() != null) p.getCategory().getName();
        Hibernate.initialize(p.getImages());
        Hibernate.initialize(p.getAttributes());

        return mapper.toResponse(p);
    }

    public Page<ProductResponse> listActive(int page, int size) {
        var result = repo.findByActiveTrue(PageRequest.of(page, size));
        initializeLazyForPage(result);
        return result.map(mapper::toResponse);
    }

    public Page<ProductResponse> listByCategory(UUID categoryId, int page, int size) {
        var result = repo.findByCategory_IdAndActiveTrue(categoryId, PageRequest.of(page, size));
        initializeLazyForPage(result);
        return result.map(mapper::toResponse);
    }

    private void initializeLazyForPage(Page<Product> page) {
        page.getContent().forEach(p -> {
            if (p.getCategory() != null) p.getCategory().getName();
            Hibernate.initialize(p.getImages());
            Hibernate.initialize(p.getAttributes());
        });
    }
}


---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\ProductReadService.java ----
package se.moln.productservice.service;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Service;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.util.UUID;

@Service
public class ProductReadService {

    private final ProductRepository repo;
    private final ProductMapper mapper;

    public ProductReadService(ProductRepository repo, ProductMapper mapper) {
        this.repo = repo;
        this.mapper = mapper;
    }

    @Transactional
    public ProductResponse getById(UUID id) {
        Product p = repo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Product not found: " + id));
        return mapper.toResponse(p);
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\ProductService.java ----
package se.moln.productservice.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.transaction.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.exception.DuplicateProductException;
import se.moln.productservice.exception.ResourceNotFoundException;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Category;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.CategoryRepository;
import se.moln.productservice.repository.ProductRepository;

import static se.moln.productservice.service.ProductSpecifications.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class ProductService {
    private static final Logger log = LoggerFactory.getLogger(ProductService.class);
    private final ProductRepository repo;
    private final CategoryRepository catRepo;
    private final ProductMapper mapper;

    public ProductService(ProductRepository repo, CategoryRepository catRepo, ProductMapper mapper) {
        this.repo = repo;
        this.catRepo = catRepo;
        this.mapper = mapper;
    }

    @Transactional
    public ProductResponse create(ProductRequest req) {
        log.debug("Create product in service layer");

        Category category = resolveCategory(req.categoryId(), req.categoryName());
        Product entity = mapper.toEntity(req, category);

        if (repo.existsBySlug(entity.getSlug())) {
            throw new DuplicateProductException("Slug already exists: " + entity.getSlug());
        }

        if (repo.existsByNameIgnoreCase(entity.getName())) {
            throw new DuplicateProductException("Product name already exists: " + entity.getName());
        }

        Product saved = repo.save(entity);
        log.info("Product created id={} name={}", saved.getId(), saved.getName());
        return mapper.toResponse(saved);
    }

    @Transactional
    public Page<ProductResponse> getAllProducts(Pageable pageable) {
        log.debug("Get all products in service layer");
        Page<Product> productPage = repo.findAllWithAttributes(pageable);
        return productPage.map(mapper::toResponse);
    }

    @Transactional
    public List<ProductResponse> getAllProductsWithoutPagination() {
        List<Product> products = repo.findAllWithAttributes();

        return products.stream()
                .map(mapper::toResponse)
                .collect(Collectors.toList());
    }

    @Transactional
    public List<ProductResponse> searchProducts(String name, String categoryName, BigDecimal minPrice, BigDecimal maxPrice) {
        Specification<Product> combinedSpec = fetchAttributes();
        if (name != null) {
            combinedSpec = combinedSpec.and(hasNameLike(name));
        }

        if (categoryName != null) {
            combinedSpec = combinedSpec.and(hasCategoryName(categoryName));
        }

        combinedSpec = combinedSpec.and(hasPriceBetween(minPrice, maxPrice));

        List<Product> products = repo.findAll(combinedSpec);

        return products.stream()
                .map(mapper::toResponse)
                .collect(Collectors.toList());
    }

    private Category resolveCategory(UUID categoryId, String categoryName) {
        if (categoryId != null) {
            return catRepo.findById(categoryId)
                    .orElseThrow(() -> new IllegalArgumentException("Category not found: " + categoryId));
        }

        if (categoryName != null && !categoryName.isBlank()) {
            String normalized = categoryName.trim();
            return catRepo.findByNameIgnoreCase(normalized)
                    .orElseGet(() -> {
                        Category c = new Category();
                        c.setName(normalized);
                        c.setSlug(slugify(normalized));
                        return catRepo.save(c);
                    });
        }

        return catRepo.findByNameIgnoreCase("Uncategorized")
                .orElseGet(() -> {
                    Category c = new Category();
                    c.setName("Uncategorized");
                    c.setSlug("Uncategorized");
                    return catRepo.save(c);
                });
    }

    @Transactional
    public ProductResponse update(UUID id, ProductRequest req){
        Product productToUpdate = repo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Product with ID " + id + " not found."));

        productToUpdate.setName(req.name());
        productToUpdate.setSlug(slugify(req.name()));
        productToUpdate.setDescription(req.description());
        productToUpdate.setPrice(req.price());
        productToUpdate.setCurrency(req.currency());
        productToUpdate.setStockQuantity(req.stockQuantity());

        if (req.categoryId() != null){
            Category category = catRepo.findById(req.categoryId())
                    .orElseThrow(() -> new ResourceNotFoundException("Category with ID " + req.categoryId() + " not found."));
            productToUpdate.setCategory(category);
        }else  if (req.categoryName() != null && !req.categoryName().isBlank()){
            Category category = catRepo.findByNameIgnoreCase(req.categoryName())
                    .orElseGet(() -> {
                        Category newCategory = new Category();
                        newCategory.setName(req.categoryName());
                        return catRepo.save(newCategory);
                    });
            productToUpdate.setCategory(category);
        } else {
            productToUpdate.setCategory(null);
        }

        if (req.attributes() != null) {
            req.attributes().forEach(productToUpdate::putAttribute);
        }

        Product updatedProduct = repo.save(productToUpdate);
        return mapper.toResponse(updatedProduct);
    }

    @Transactional
    public void delete(UUID id) {
        Product productToDelete = repo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Product with ID " + id + " not found."));

        repo.delete(productToDelete);
    }

    private String slugify(String s) {
        return s.toLowerCase().trim().replaceAll("[^a-z0-9]+", "-").replaceAll("(^-|-$)", "");
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\java\se\moln\productservice\service\ProductSpecifications.java ----
package se.moln.productservice.service;

import jakarta.persistence.criteria.Join;
import org.springframework.data.jpa.domain.Specification;
import se.moln.productservice.model.Category;
import se.moln.productservice.model.Product;

import java.math.BigDecimal;

public class ProductSpecifications {

    public static Specification<Product> hasNameLike(String name) {
        return ((root, query, criteriaBuilder) ->
                criteriaBuilder.like(criteriaBuilder.lower(root.get("name")), "%" + name.toLowerCase() + "%"));
    }

    public static Specification<Product> hasCategoryName(String categoryName) {
        return (root, query, criteriaBuilder) -> {
            Join<Product, Category> categoryJoin = root.join("category");
            return criteriaBuilder.equal(categoryJoin.get("name"), categoryName);
        };
    }

    public static Specification<Product> hasPriceBetween(BigDecimal minPrice, BigDecimal maxPrice) {
        return ((root, query, criteriaBuilder) -> {
            if (minPrice != null && maxPrice != null) {
                return criteriaBuilder.between(root.get("price"), minPrice, maxPrice);
            }

            if (minPrice != null) {
                return criteriaBuilder.greaterThanOrEqualTo(root.get("price"), minPrice);
            }

            if (maxPrice != null) {
                return criteriaBuilder.greaterThanOrEqualTo(root.get("price"), maxPrice);
            }

            return criteriaBuilder.conjunction();
        });
    }


    public static Specification<Product> fetchAttributes() {
        return (root, query, criteriaBuilder) -> {
            root.fetch("attributes");
            return query.distinct(true).getRestriction();
        };
    }
}

---- Innehåll från: C:\git\Product-Service\src\main\resources\application.properties ----
spring.application.name=product-service


spring.datasource.url=jdbc:h2:file:./data/products;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# JPA (auto create/update schema)
spring.jpa.defer-datasource-initialization=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=always
spring.jpa.open-in-view=false

springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.packages-to-scan=se.moln.productservice.controller

#image storage
app.upload.dir=uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Serer port
server.port=8081

# Logging levels
logging.level.se.moln.productservice=DEBUG
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.zalando.logbook=TRACE

# Actuator: configure access for health/info and expose them
management.endpoint.health.access=read-only
management.endpoint.info.access=read-only
management.endpoints.web.exposure.include=health,info

# Info endpoint metadata
info.app.name=product-service
info.app.description=Product Service with JSON logging, correlation IDs and HTTP I/O masking
info.app.version=0.0.1-SNAPSHOT

# Dev/demo admin user (protect admin-only endpoints)
spring.security.user.name=admin
spring.security.user.password=demo
spring.security.user.roles=ADMIN


---- Innehåll från: C:\git\Product-Service\src\main\resources\logback-spring.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <springProperty scope="context" name="serviceName" source="spring.application.name" defaultValue="product-service"/>

  <appender name="JSON_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp/>
        <logLevel/>
        <loggerName/>
        <threadName/>
        <mdc/>
        <message/>
        <stackTrace/>
        <provider class="net.logstash.logback.composite.GlobalCustomFieldsJsonProvider">
          <customFields>{"service":"${serviceName}"}</customFields>
        </provider>
      </providers>
    </encoder>
  </appender>

  <root level="INFO">
    <appender-ref ref="JSON_CONSOLE"/>
  </root>

  <!-- Standard log levels -->
  <logger name="org.springframework" level="INFO"/>
  <logger name="org.hibernate.SQL" level="WARN"/>
</configuration>

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\ProductServiceApplicationTests.java ----
package se.moln.productservice;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.mockito.Mockito;
import se.moln.productservice.repository.CategoryRepository;
import se.moln.productservice.repository.InventoryRepository;
import se.moln.productservice.repository.ProductRepository;

@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.NONE,
        properties = {
                "spring.main.web-application-type=none",
                "spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration"
        }
)
class ProductServiceApplicationTests {

    @TestConfiguration
    static class MockConfig {
        @Bean
        InventoryRepository inventoryRepository() {
            return Mockito.mock(InventoryRepository.class);
        }

        @Bean
        ProductRepository productRepository() {
            return Mockito.mock(ProductRepository.class);
        }

        @Bean
        CategoryRepository categoryRepository() {
            return Mockito.mock(CategoryRepository.class);
        }
    }

    @Test
    void contextLoads() {
    }

}


---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\config\RequestIdFilterTest.java ----
package se.moln.productservice.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import org.junit.jupiter.api.Test;
import org.slf4j.MDC;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

import static org.assertj.core.api.Assertions.assertThat;

class RequestIdFilterTest {

    @Test
    void generatesRequestIdWhenMissingAndEchoesHeader() throws ServletException, IOException {
        RequestIdFilter filter = new RequestIdFilter();
        MockHttpServletRequest request = new MockHttpServletRequest();
        MockHttpServletResponse response = new MockHttpServletResponse();

        AtomicReference<String> mdcSeen = new AtomicReference<>();
        FilterChain chain = (req, res) -> mdcSeen.set(MDC.get(RequestIdFilter.MDC_KEY));

        filter.doFilter(request, response, chain);

        String echoed = response.getHeader(RequestIdFilter.HEADER);
        assertThat(echoed).isNotBlank();
        assertThat(mdcSeen.get()).isEqualTo(echoed);
        // After filter completes, MDC should be cleared
        assertThat(MDC.get(RequestIdFilter.MDC_KEY)).isNull();
    }

    @Test
    void preservesIncomingRequestId() throws ServletException, IOException {
        RequestIdFilter filter = new RequestIdFilter();
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.addHeader(RequestIdFilter.HEADER, "req-123");
        MockHttpServletResponse response = new MockHttpServletResponse();

        AtomicReference<String> mdcSeen = new AtomicReference<>();
        FilterChain chain = (req, res) -> mdcSeen.set(MDC.get(RequestIdFilter.MDC_KEY));

        filter.doFilter(request, response, chain);

        assertThat(response.getHeader(RequestIdFilter.HEADER)).isEqualTo("req-123");
        assertThat(mdcSeen.get()).isEqualTo("req-123");
        assertThat(MDC.get(RequestIdFilter.MDC_KEY)).isNull();
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\controller\AdminHealthControllerTest.java ----
package se.moln.productservice.controller;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.context.annotation.Import;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.Status;
import org.springframework.boot.actuate.health.HealthEndpoint;
import org.springframework.boot.actuate.info.InfoEndpoint;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;

import static org.mockito.Mockito.when;
import static org.mockito.Mockito.mock;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@Import({org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration.class,
        AdminHealthControllerTest.ActuatorTestConfig.class})
class AdminHealthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private HealthEndpoint healthEndpoint;

    @Autowired
    private InfoEndpoint infoEndpoint;

    @TestConfiguration
    static class ActuatorTestConfig {
        @Bean
        HealthEndpoint healthEndpoint() {
            return mock(HealthEndpoint.class);
        }

        @Bean
        InfoEndpoint infoEndpoint() {
            return mock(InfoEndpoint.class);
        }
    }

    @Test
    void healthDetails_Unauthorized_WhenNotAdmin() throws Exception {
        mockMvc.perform(get("/api/admin/health-details"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @WithMockUser(roles = {"ADMIN"})
    void healthDetails_ReturnsDetails_WhenAdmin() throws Exception {
        when(healthEndpoint.health()).thenReturn(Health.status(Status.UP).build());
        when(infoEndpoint.info()).thenReturn(java.util.Map.of("app", java.util.Map.of("name", "product-service")));

        ObjectProvider<HealthEndpoint> healthProvider = new ObjectProvider<>() {
            @Override
            public HealthEndpoint getObject(Object... args) { return healthEndpoint; }
            @Override
            public HealthEndpoint getIfAvailable() { return healthEndpoint; }
            @Override
            public HealthEndpoint getIfUnique() { return healthEndpoint; }
            @Override
            public void forEach(Consumer action) { action.accept(healthEndpoint); }
            @Override
            public Stream<HealthEndpoint> stream() { return Stream.of(healthEndpoint); }
            @Override
            public Iterator<HealthEndpoint> iterator() { return Stream.of(healthEndpoint).iterator(); }
            @Override
            public Spliterator<HealthEndpoint> spliterator() { return Stream.of(healthEndpoint).spliterator(); }
        };

        ObjectProvider<InfoEndpoint> infoProvider = new ObjectProvider<>() {
            @Override
            public InfoEndpoint getObject(Object... args) { return infoEndpoint; }
            @Override
            public InfoEndpoint getIfAvailable() { return infoEndpoint; }
            @Override
            public InfoEndpoint getIfUnique() { return infoEndpoint; }
            @Override
            public void forEach(Consumer action) { action.accept(infoEndpoint); }
            @Override
            public Stream<InfoEndpoint> stream() { return Stream.of(infoEndpoint); }
            @Override
            public Iterator<InfoEndpoint> iterator() { return Stream.of(infoEndpoint).iterator(); }
            @Override
            public Spliterator<InfoEndpoint> spliterator() { return Stream.of(infoEndpoint).spliterator(); }
        };

        MockMvc standaloneMvc = MockMvcBuilders
                .standaloneSetup(new AdminHealthController(healthProvider, infoProvider))
                .build();

        standaloneMvc.perform(get("/api/admin/health-details"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("UP"))
                .andExpect(jsonPath("$.info.app.name").value("product-service"));
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\controller\InventoryControllerTest.java ----
package se.moln.productservice.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.test.web.servlet.MockMvc;
import se.moln.productservice.dto.AdjustStockRequest;
import se.moln.productservice.dto.InventoryResponse;
import se.moln.productservice.model.StockStatus;
import se.moln.productservice.service.InventoryService;

import java.util.UUID;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(InventoryController.class)
@AutoConfigureMockMvc(addFilters = false)
class InventoryControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockitoBean
    private InventoryService inventoryService;

    private UUID productId;
    private InventoryResponse response;

    @BeforeEach
    void setUp() {
        productId = UUID.randomUUID();
        response = new InventoryResponse(productId, 5, StockStatus.IN_STOCK);
    }

    @Test
    void get_ShouldReturnInventory() throws Exception {
        when(inventoryService.get(eq(productId))).thenReturn(response);

        mockMvc.perform(get("/api/inventory/{productId}", productId))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.productId").value(productId.toString()))
                .andExpect(jsonPath("$.quantity").value(5))
                .andExpect(jsonPath("$.status").value("IN_STOCK"));
    }

    @Test
    void purchase_ShouldReturnUpdatedInventory() throws Exception {
        when(inventoryService.purchase(eq(productId), eq(3))).thenReturn(new InventoryResponse(productId, 2, StockStatus.IN_STOCK));

        AdjustStockRequest req = new AdjustStockRequest(3);
        mockMvc.perform(post("/api/inventory/{productId}/purchase", productId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.quantity").value(2));
    }

    @Test
    void return_ShouldReturnUpdatedInventory() throws Exception {
        when(inventoryService.refund(eq(productId), eq(4))).thenReturn(new InventoryResponse(productId, 9, StockStatus.IN_STOCK));

        AdjustStockRequest req = new AdjustStockRequest(4);
        mockMvc.perform(post("/api/inventory/{productId}/return", productId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.quantity").value(9))
                .andExpect(jsonPath("$.status").value("IN_STOCK"));
    }

    @Test
    void purchase_WithInvalidQuantity_ShouldReturnBadRequest() throws Exception {
        // @Min(1) on AdjustStockRequest.quantity should trigger validation 400
        AdjustStockRequest req = new AdjustStockRequest(0);
        mockMvc.perform(post("/api/inventory/{productId}/purchase", productId)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isBadRequest());
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\controller\ProductControllerTest.java ----
package se.moln.productservice.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.test.context.bean.override.mockito.MockitoBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.service.ProductImageAppService;
import se.moln.productservice.service.ProductQueryService;
import se.moln.productservice.service.ProductReadService;
import se.moln.productservice.service.ProductService;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(ProductController.class)
@AutoConfigureMockMvc(addFilters = false)
class ProductControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockitoBean
    private ProductService productService;

    @MockitoBean
    private ProductImageAppService productImageAppService;

    @MockitoBean
    private ProductReadService productReadService;

    @MockitoBean
    private ProductQueryService productQueryService;

    @Autowired
    private ObjectMapper objectMapper;

    private ProductRequest productRequest;
    private ProductResponse productResponse;
    private UUID productId;

    @BeforeEach
    void setUp() {
        productId = UUID.randomUUID();
        productRequest = new ProductRequest(
                "Test Product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                null,
                "Electronics",
                10,
                new HashMap<>(),
                Arrays.asList("http://example.com/image.jpg")
        );
        productResponse = new ProductResponse(
                productId,
                "Test Product",
                "test-product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                "Electronics",
                10,
                true,
                new HashMap<>(),
                Arrays.asList("http://example.com/image.jpg")
        );
    }

    @Test
    void create_ShouldReturnCreatedProduct() throws Exception {
        when(productService.create(any(ProductRequest.class))).thenReturn(productResponse);

        mockMvc.perform(post("/api/products")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(productRequest)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(productId.toString()))
                .andExpect(jsonPath("$.name").value("Test Product"))
                .andExpect(jsonPath("$.price").value(99.99));
    }

    @Test
    void getAllProducts_ShouldReturnPagedProducts() throws Exception {
        List<ProductResponse> products = Arrays.asList(productResponse);
        Page<ProductResponse> productPage = new PageImpl<>(products, PageRequest.of(0, 5), 1);
        when(productService.getAllProducts(any(Pageable.class))).thenReturn(productPage);

        mockMvc.perform(get("/api/products")
                        .param("page", "0")
                        .param("size", "5")
                        .param("sortBy", "name")
                        .param("sortDir", "asc"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].name").value("Test Product"))
                .andExpect(jsonPath("$.totalElements").value(1));
    }

    @Test
    void getAllProductsWithoutPagination_ShouldReturnAllProducts() throws Exception {
        List<ProductResponse> products = Arrays.asList(productResponse);
        when(productService.getAllProductsWithoutPagination()).thenReturn(products);

        mockMvc.perform(get("/api/products/all"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Product"));
    }

    @Test
    void searchProducts_ShouldReturnFilteredProducts() throws Exception {
        List<ProductResponse> products = Arrays.asList(productResponse);
        when(productService.searchProducts(anyString(), anyString(), any(BigDecimal.class), any(BigDecimal.class)))
                .thenReturn(products);

        mockMvc.perform(get("/api/products/search")
                        .param("name", "Test")
                        .param("categoryName", "Electronics")
                        .param("minPrice", "50.00")
                        .param("maxPrice", "150.00"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Product"));
    }

    @Test
    void searchProducts_WithoutParameters_ShouldReturnAllProducts() throws Exception {
        List<ProductResponse> products = Arrays.asList(productResponse);
        when(productService.searchProducts(isNull(), isNull(), isNull(), isNull()))
                .thenReturn(products);

        mockMvc.perform(get("/api/products/search"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Product"));
    }

    @Test
    void uploadImage_ShouldReturnUpdatedProduct() throws Exception {
        MockMultipartFile file = new MockMultipartFile(
                "file",
                "test-image.jpg",
                MediaType.IMAGE_JPEG_VALUE,
                "test image content".getBytes()
        );

        when(productImageAppService.uploadImage(eq(productId), any())).thenReturn(productResponse);

        mockMvc.perform(MockMvcRequestBuilders.multipart("/api/products/{id}/images", productId)
                        .file(file)
                        .contentType(MediaType.MULTIPART_FORM_DATA))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id").value(productId.toString()));
    }

    @Test
    void create_WithInvalidData_ShouldReturnBadRequest() throws Exception {
        ProductRequest invalidRequest = new ProductRequest(
                "", // Empty name should fail validation
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                null,
                "Electronics",
                10,
                new HashMap<>(),
                Arrays.asList()
        );

        mockMvc.perform(post("/api/products")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void getAllProducts_WithDescendingSort_ShouldReturnSortedProducts() throws Exception {
        List<ProductResponse> products = Arrays.asList(productResponse);
        Page<ProductResponse> productPage = new PageImpl<>(products, PageRequest.of(0, 5), 1);
        when(productService.getAllProducts(any(Pageable.class))).thenReturn(productPage);

        mockMvc.perform(get("/api/products")
                        .param("page", "0")
                        .param("size", "5")
                        .param("sortBy", "name")
                        .param("sortDir", "desc"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].name").value("Test Product"));
    }

    @Test
    void getById_ShouldReturnProduct() throws Exception {
        when(productReadService.getById(eq(productId))).thenReturn(productResponse);

        mockMvc.perform(get("/api/products/{id}", productId))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(productId.toString()))
                .andExpect(jsonPath("$.name").value("Test Product"));
    }

    @Test
    void listActive_ShouldReturnPagedProducts() throws Exception {
        Page<ProductResponse> page = new PageImpl<>(List.of(productResponse), PageRequest.of(0, 10), 1);
        when(productQueryService.listActive(eq(0), eq(10))).thenReturn(page);

        mockMvc.perform(get("/api/products/active")
                        .param("page", "0")
                        .param("size", "10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].id").value(productId.toString()));
    }

    @Test
    void listByCategory_ShouldReturnPagedProducts() throws Exception {
        UUID categoryId = UUID.randomUUID();
        Page<ProductResponse> page = new PageImpl<>(List.of(productResponse), PageRequest.of(0, 10), 1);
        when(productQueryService.listByCategory(eq(categoryId), eq(0), eq(10))).thenReturn(page);

        mockMvc.perform(get("/api/products/by-category/{categoryId}", categoryId)
                        .param("page", "0")
                        .param("size", "10"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.content[0].id").value(productId.toString()));
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\dto\PageResponseTest.java ----
package se.moln.productservice.dto;

import org.junit.jupiter.api.Test;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

class PageResponseTest {

    @Test
    void defaultConstructor_ShouldCreateEmptyPageResponse() {
        // When
        PageResponse<String> pageResponse = new PageResponse<>();

        // Then
        assertThat(pageResponse).isNotNull();
        assertThat(pageResponse.getContent()).isNull();
        assertThat(pageResponse.getPageNumber()).isEqualTo(0);
        assertThat(pageResponse.getPageSize()).isEqualTo(0);
        assertThat(pageResponse.getTotalElements()).isEqualTo(0L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(0);
        assertThat(pageResponse.isFirst()).isFalse();
        assertThat(pageResponse.isLast()).isFalse();
        assertThat(pageResponse.isEmpty()).isFalse();
    }

    @Test
    void pageConstructor_WithValidPage_ShouldMapAllProperties() {
        // Given
        List<String> content = Arrays.asList("item1", "item2", "item3");
        Pageable pageable = PageRequest.of(1, 2);
        Page<String> page = new PageImpl<>(content, pageable, 10);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.getContent()).containsExactly("item1", "item2", "item3");
        assertThat(pageResponse.getPageNumber()).isEqualTo(1);
        assertThat(pageResponse.getPageSize()).isEqualTo(2);
        assertThat(pageResponse.getTotalElements()).isEqualTo(10L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(5);
        assertThat(pageResponse.isFirst()).isFalse();
        assertThat(pageResponse.isLast()).isFalse();
        assertThat(pageResponse.isEmpty()).isFalse();
    }

    @Test
    void pageConstructor_WithFirstPage_ShouldSetFirstTrue() {
        // Given
        List<String> content = Arrays.asList("item1", "item2");
        Pageable pageable = PageRequest.of(0, 2);
        Page<String> page = new PageImpl<>(content, pageable, 10);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.isFirst()).isTrue();
        assertThat(pageResponse.isLast()).isFalse();
    }

    @Test
    void pageConstructor_WithLastPage_ShouldSetLastTrue() {
        // Given
        List<String> content = Arrays.asList("item9", "item10");
        Pageable pageable = PageRequest.of(4, 2);
        Page<String> page = new PageImpl<>(content, pageable, 10);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.isFirst()).isFalse();
        assertThat(pageResponse.isLast()).isTrue();
    }

    @Test
    void pageConstructor_WithSinglePage_ShouldSetBothFirstAndLastTrue() {
        // Given
        List<String> content = Arrays.asList("item1", "item2");
        Pageable pageable = PageRequest.of(0, 5);
        Page<String> page = new PageImpl<>(content, pageable, 2);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.isFirst()).isTrue();
        assertThat(pageResponse.isLast()).isTrue();
        assertThat(pageResponse.getTotalPages()).isEqualTo(1);
    }

    @Test
    void pageConstructor_WithEmptyPage_ShouldSetEmptyTrue() {
        // Given
        List<String> content = Collections.emptyList();
        Pageable pageable = PageRequest.of(0, 5);
        Page<String> page = new PageImpl<>(content, pageable, 0);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.isEmpty()).isTrue();
        assertThat(pageResponse.getContent()).isEmpty();
        assertThat(pageResponse.getTotalElements()).isEqualTo(0L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(1);
    }

    @Test
    void setContent_ShouldUpdateContent() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();
        List<String> newContent = Arrays.asList("new1", "new2");

        // When
        pageResponse.setContent(newContent);

        // Then
        assertThat(pageResponse.getContent()).isEqualTo(newContent);
    }

    @Test
    void setContent_WithNull_ShouldAcceptNull() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setContent(null);

        // Then
        assertThat(pageResponse.getContent()).isNull();
    }

    @Test
    void setPageNumber_ShouldUpdatePageNumber() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setPageNumber(5);

        // Then
        assertThat(pageResponse.getPageNumber()).isEqualTo(5);
    }

    @Test
    void setPageSize_ShouldUpdatePageSize() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setPageSize(20);

        // Then
        assertThat(pageResponse.getPageSize()).isEqualTo(20);
    }

    @Test
    void setTotalElements_ShouldUpdateTotalElements() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setTotalElements(1000L);

        // Then
        assertThat(pageResponse.getTotalElements()).isEqualTo(1000L);
    }

    @Test
    void setTotalPages_ShouldUpdateTotalPages() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setTotalPages(50);

        // Then
        assertThat(pageResponse.getTotalPages()).isEqualTo(50);
    }

    @Test
    void setFirst_ShouldUpdateFirst() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setFirst(true);

        // Then
        assertThat(pageResponse.isFirst()).isTrue();
    }

    @Test
    void setLast_ShouldUpdateLast() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setLast(true);

        // Then
        assertThat(pageResponse.isLast()).isTrue();
    }

    @Test
    void setEmpty_ShouldUpdateEmpty() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setEmpty(true);

        // Then
        assertThat(pageResponse.isEmpty()).isTrue();
    }

    @Test
    void pageResponse_WithComplexObjects_ShouldWorkCorrectly() {
        // Given
        class TestObject {
            private String value;
            public TestObject(String value) { this.value = value; }
            public String getValue() { return value; }
        }

        List<TestObject> content = Arrays.asList(
                new TestObject("test1"),
                new TestObject("test2")
        );
        Pageable pageable = PageRequest.of(0, 2);
        Page<TestObject> page = new PageImpl<>(content, pageable, 5);

        // When
        PageResponse<TestObject> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.getContent()).hasSize(2);
        assertThat(pageResponse.getContent().get(0).getValue()).isEqualTo("test1");
        assertThat(pageResponse.getContent().get(1).getValue()).isEqualTo("test2");
    }

    @Test
    void allSetters_ShouldWorkIndependently() {
        // Given
        PageResponse<String> pageResponse = new PageResponse<>();

        // When
        pageResponse.setContent(Arrays.asList("item1", "item2"));
        pageResponse.setPageNumber(3);
        pageResponse.setPageSize(10);
        pageResponse.setTotalElements(100L);
        pageResponse.setTotalPages(10);
        pageResponse.setFirst(false);
        pageResponse.setLast(false);
        pageResponse.setEmpty(false);

        // Then
        assertThat(pageResponse.getContent()).containsExactly("item1", "item2");
        assertThat(pageResponse.getPageNumber()).isEqualTo(3);
        assertThat(pageResponse.getPageSize()).isEqualTo(10);
        assertThat(pageResponse.getTotalElements()).isEqualTo(100L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(10);
        assertThat(pageResponse.isFirst()).isFalse();
        assertThat(pageResponse.isLast()).isFalse();
        assertThat(pageResponse.isEmpty()).isFalse();
    }

    @Test
    void pageConstructor_WithZeroTotalElements_ShouldHandleCorrectly() {
        // Given
        List<String> content = Collections.emptyList();
        Pageable pageable = PageRequest.of(0, 10);
        Page<String> page = new PageImpl<>(content, pageable, 0);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.getTotalElements()).isEqualTo(0L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(1);
        assertThat(pageResponse.isEmpty()).isTrue();
        assertThat(pageResponse.isFirst()).isTrue();
        assertThat(pageResponse.isLast()).isTrue();
    }

    @Test
    void pageConstructor_WithLargeNumbers_ShouldHandleCorrectly() {
        // Given
        List<String> content = Arrays.asList("item1");
        Pageable pageable = PageRequest.of(999, 1);
        Page<String> page = new PageImpl<>(content, pageable, 1000000L);

        // When
        PageResponse<String> pageResponse = new PageResponse<>(page);

        // Then
        assertThat(pageResponse.getPageNumber()).isEqualTo(999);
        assertThat(pageResponse.getPageSize()).isEqualTo(1);
        assertThat(pageResponse.getTotalElements()).isEqualTo(1000000L);
        assertThat(pageResponse.getTotalPages()).isEqualTo(1000000);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\exception\ApiExceptionHandlerTest.java ----
package se.moln.productservice.exception;

import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.util.Arrays;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class ApiExceptionHandlerTest {

    private ApiExceptionHandler exceptionHandler;

    @BeforeEach
    void setUp() {
        exceptionHandler = new ApiExceptionHandler();
    }

    @Test
    void handleDuplicate_ShouldReturnConflictResponse() {
        // Given
        DuplicateProductException exception = new DuplicateProductException("Product already exists");

        // When
        Map<String, Object> response = exceptionHandler.handleDuplicate(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Conflict");
        assertThat(response.get("message")).isEqualTo("Product already exists");
    }


    @Test
    void handleDuplicate_WithEmptyMessage_ShouldReturnConflictResponse() {
        // Given
        DuplicateProductException exception = new DuplicateProductException("");

        // When
        Map<String, Object> response = exceptionHandler.handleDuplicate(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Conflict");
        assertThat(response.get("message")).isEqualTo("");
    }

    @Test
    void handleIntegrity_ShouldReturnConflictResponse() {
        // Given
        DataIntegrityViolationException exception = new DataIntegrityViolationException("Unique constraint violation");

        // When
        Map<String, Object> response = exceptionHandler.handleIntegrity(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Conflict");
        assertThat(response.get("message")).isEqualTo("Unique constraint violated (e.g. slug/name already exists)");
    }

    @Test
    void handleIntegrity_WithNullMessage_ShouldReturnConflictResponse() {
        // Given
        DataIntegrityViolationException exception = new DataIntegrityViolationException(null);

        // When
        Map<String, Object> response = exceptionHandler.handleIntegrity(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Conflict");
        assertThat(response.get("message")).isEqualTo("Unique constraint violated (e.g. slug/name already exists)");
    }

    @Test
    void handleValidation_ShouldReturnBadRequestWithFieldErrors() {
        // Given
        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);
        BindingResult bindingResult = mock(BindingResult.class);
        
        FieldError fieldError1 = new FieldError("productRequest", "name", "Name is required");
        FieldError fieldError2 = new FieldError("productRequest", "price", "Price must be positive");
        
        when(exception.getBindingResult()).thenReturn(bindingResult);
        when(bindingResult.getFieldErrors()).thenReturn(Arrays.asList(fieldError1, fieldError2));

        // When
        Map<String, Object> response = exceptionHandler.handleValidation(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Validation failed");
        assertThat(response.get("details")).isNotNull();
        @SuppressWarnings("unchecked")
        var details = (java.util.List<Map<String, Object>>) response.get("details");
        assertThat(details).hasSize(2);
        assertThat(details.get(0).get("field")).isEqualTo("name");
        assertThat(details.get(0).get("error")).isEqualTo("Name is required");
        assertThat(details.get(1).get("field")).isEqualTo("price");
        assertThat(details.get(1).get("error")).isEqualTo("Price must be positive");
    }

    @Test
    void handleValidation_WithEmptyFieldErrors_ShouldReturnBadRequest() {
        // Given
        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);
        BindingResult bindingResult = mock(BindingResult.class);
        
        when(exception.getBindingResult()).thenReturn(bindingResult);
        when(bindingResult.getFieldErrors()).thenReturn(Arrays.asList());

        // When
        Map<String, Object> response = exceptionHandler.handleValidation(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Validation failed");
        @SuppressWarnings("unchecked")
        var details = (java.util.List<Map<String, Object>>) response.get("details");
        assertThat(details).isEmpty();
    }

    @Test
    void handleNotFound_ShouldReturnNotFoundResponse() {
        // Given
        EntityNotFoundException exception = new EntityNotFoundException("Product not found");

        // When
        Map<String, Object> response = exceptionHandler.handleNotFound(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Not Found");
        assertThat(response.get("message")).isEqualTo("Product not found");
    }


    @Test
    void handleIllegalArgument_ShouldReturnBadRequestResponse() {
        // Given
        IllegalArgumentException exception = new IllegalArgumentException("Invalid category ID");

        // When
        Map<String, Object> response = exceptionHandler.handleIllegalArgument(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Bad Request");
        assertThat(response.get("message")).isEqualTo("Invalid category ID");
    }


    @Test
    void handleIllegalArgument_WithEmptyMessage_ShouldReturnBadRequestResponse() {
        // Given
        IllegalArgumentException exception = new IllegalArgumentException("");

        // When
        Map<String, Object> response = exceptionHandler.handleIllegalArgument(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.get("error")).isEqualTo("Bad Request");
        assertThat(response.get("message")).isEqualTo("");
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\exception\GlobalExceptionHandlerTest.java ----
package se.moln.productservice.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;

import java.net.BindException;
import java.util.Arrays;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

class GlobalExceptionHandlerTest {

    private GlobalExceptionHandler exceptionHandler;

    @BeforeEach
    void setUp() {
        exceptionHandler = new GlobalExceptionHandler();
    }

    @Test
    void handleValidation_WithMethodArgumentNotValidException_ShouldReturnBadRequest() {
        // Given
        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);
        when(exception.getMessage()).thenReturn("Validation failed: name is required");

        // When
        ResponseEntity<?> response = exceptionHandler.handleValidation(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
        @SuppressWarnings("unchecked")
        Map<String, Object> body = (Map<String, Object>) response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.get("error")).isEqualTo("validation_failed");
        assertThat(body.get("message")).isEqualTo("Validation failed: name is required");
    }

    @Test
    void handleValidation_WithBindException_ShouldReturnBadRequest() {
        // Given
        BindException exception = mock(BindException.class);
        when(exception.getMessage()).thenReturn("Binding failed");

        // When
        ResponseEntity<?> response = exceptionHandler.handleValidation(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
        @SuppressWarnings("unchecked")
        Map<String, Object> body = (Map<String, Object>) response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.get("error")).isEqualTo("validation_failed");
        assertThat(body.get("message")).isEqualTo("Binding failed");
    }


    @Test
    void handleValidation_WithEmptyMessage_ShouldReturnBadRequest() {
        // Given
        MethodArgumentNotValidException exception = mock(MethodArgumentNotValidException.class);
        when(exception.getMessage()).thenReturn("");

        // When
        ResponseEntity<?> response = exceptionHandler.handleValidation(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
        @SuppressWarnings("unchecked")
        Map<String, Object> body = (Map<String, Object>) response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.get("error")).isEqualTo("validation_failed");
        assertThat(body.get("message")).isEqualTo("");
    }

    @Test
    void handleIllegalState_ShouldReturnConflictResponse() {
        // Given
        IllegalStateException exception = new IllegalStateException("Insufficient stock");

        // When
        ResponseEntity<?> response = exceptionHandler.handleIllegalState(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
        @SuppressWarnings("unchecked")
        Map<String, Object> body = (Map<String, Object>) response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.get("error")).isEqualTo("conflict");
        assertThat(body.get("message")).isEqualTo("Insufficient stock");
    }


    @Test
    void handleIllegalState_WithEmptyMessage_ShouldReturnConflictResponse() {
        // Given
        IllegalStateException exception = new IllegalStateException("");

        // When
        ResponseEntity<?> response = exceptionHandler.handleIllegalState(exception);

        // Then
        assertThat(response).isNotNull();
        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
        @SuppressWarnings("unchecked")
        Map<String, Object> body = (Map<String, Object>) response.getBody();
        assertThat(body).isNotNull();
        assertThat(body.get("error")).isEqualTo("conflict");
        assertThat(body.get("message")).isEqualTo("");
    }

    @Test
    void handleValidation_ShouldHandleBothExceptionTypes() {
        // Test that the handler can process both types of exceptions in the same method

        // Test with MethodArgumentNotValidException
        MethodArgumentNotValidException methodException = mock(MethodArgumentNotValidException.class);
        when(methodException.getMessage()).thenReturn("Method validation failed");

        ResponseEntity<?> methodResponse = exceptionHandler.handleValidation(methodException);
        assertThat(methodResponse.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);

        // Test with BindException
        BindException bindException = mock(BindException.class);
        when(bindException.getMessage()).thenReturn("Bind validation failed");

        ResponseEntity<?> bindResponse = exceptionHandler.handleValidation(bindException);
        assertThat(bindResponse.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\health\AppHealthIndicatorTest.java ----
package se.moln.productservice.health;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.core.env.Environment;
import se.moln.productservice.repository.ProductRepository;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

class AppHealthIndicatorTest {

    @Test
    void health_up_when_db_and_storage_ok() throws IOException {
        ProductRepository repo = Mockito.mock(ProductRepository.class);
        Mockito.when(repo.count()).thenReturn(3L);
        Environment env = Mockito.mock(Environment.class);
        Mockito.when(env.getProperty("spring.application.name", "product-service")).thenReturn("product-service");
        Mockito.when(env.getActiveProfiles()).thenReturn(new String[]{});

        Path tmp = Files.createTempDirectory("uploads-test");
        AppHealthIndicator ind = new AppHealthIndicator(repo, env, tmp.toString());

        var health = ind.health();
        assertThat(health.getStatus().getCode()).isEqualTo("UP");
        Map<String, Object> details = health.getDetails();
        assertThat(details).containsKey("uptime");
        assertThat(((Map<?,?>)details.get("storage")).get("path").toString()).contains(tmp.toString());
        assertThat(((Map<?,?>)details.get("database")).get("products")).isEqualTo(3L);
    }

    @Test
    void health_down_when_storage_path_invalid() {
        var repo = Mockito.mock(se.moln.productservice.repository.ProductRepository.class);
        Mockito.when(repo.count()).thenReturn(1L);
        Environment env = Mockito.mock(Environment.class);
        Mockito.when(env.getProperty("spring.application.name", "product-service")).thenReturn("product-service");
        Mockito.when(env.getActiveProfiles()).thenReturn(new String[]{});

        // Use a universally invalid path (contains NUL) to provoke an exception inside storage section on all OS
        String invalidPath = "bad\u0000path";
        AppHealthIndicator ind = new AppHealthIndicator(repo, env, invalidPath);

        var health = ind.health();
        assertThat(health.getStatus().getCode()).isEqualTo("DOWN");
    }

    @Test
    void health_down_when_db_throws() throws IOException {
        ProductRepository repo = Mockito.mock(ProductRepository.class);
        Mockito.when(repo.count()).thenThrow(new RuntimeException("DB down"));
        Environment env = Mockito.mock(Environment.class);
        Mockito.when(env.getProperty("spring.application.name", "product-service")).thenReturn("product-service");
        Mockito.when(env.getActiveProfiles()).thenReturn(new String[]{});

        Path tmp = Files.createTempDirectory("uploads-test");
        AppHealthIndicator ind = new AppHealthIndicator(repo, env, tmp.toString());

        var health = ind.health();
        assertThat(health.getStatus().getCode()).isEqualTo("DOWN");
        assertThat(health.getDetails()).containsKey("database");
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\mappning\ProductMapperTest.java ----
package se.moln.productservice.mappning;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.model.Category;
import se.moln.productservice.model.Product;
import se.moln.productservice.model.ProductImage;
import java.util.UUID;

import java.math.BigDecimal;
import java.util.*;

import static org.assertj.core.api.Assertions.assertThat;

class ProductMapperTest {

    private ProductMapper productMapper;
    private Category category;
    private ProductRequest productRequest;
    private Product product;

    @BeforeEach
    void setUp() {
        productMapper = new ProductMapper();
        
        category = new Category();
        category.setName("Electronics");
        category.setSlug("electronics");
        
        Map<String, String> attributes = new HashMap<>();
        attributes.put("color", "black");
        attributes.put("storage", "256GB");
        
        productRequest = new ProductRequest(
                "iPhone 15 Pro",
                "Latest iPhone with USB-C",
                BigDecimal.valueOf(12999.00),
                "SEK",
                UUID.randomUUID(),
                "Electronics",
                10,
                attributes,
                Arrays.asList("http://example.com/image1.jpg", "http://example.com/image2.jpg")
        );
        
        product = new Product();
        product.setId(UUID.randomUUID());
        product.setName("iPhone 15 Pro");
        product.setSlug("iphone-15-pro");
        product.setDescription("Latest iPhone with USB-C");
        product.setPrice(BigDecimal.valueOf(12999.00));
        product.setCurrency("SEK");
        product.setCategory(category);
        product.setStockQuantity(10);
        product.setActive(true);
        product.setAttributes(attributes);
    }

    @Test
    void toEntity_WithValidRequest_ShouldMapCorrectly() {
        // When
        Product result = productMapper.toEntity(productRequest, category);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getName()).isEqualTo("iPhone 15 Pro");
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro");
        assertThat(result.getDescription()).isEqualTo("Latest iPhone with USB-C");
        assertThat(result.getPrice()).isEqualByComparingTo(BigDecimal.valueOf(12999.00));
        assertThat(result.getCurrency()).isEqualTo("SEK");
        assertThat(result.getCategory()).isEqualTo(category);
        assertThat(result.getStockQuantity()).isEqualTo(10);
        assertThat(result.getAttributes()).containsEntry("color", "black");
        assertThat(result.getAttributes()).containsEntry("storage", "256GB");
        assertThat(result.getImages()).hasSize(2);
    }

    @Test
    void toEntity_WithNullStockQuantity_ShouldDefaultToZero() {
        // Given
        ProductRequest requestWithNullStock = new ProductRequest(
                "Test Product", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", null, null, null
        );

        // When
        Product result = productMapper.toEntity(requestWithNullStock, category);

        // Then
        assertThat(result.getStockQuantity()).isEqualTo(0);
    }

    @Test
    void toEntity_WithNullAttributes_ShouldHandleGracefully() {
        // Given
        ProductRequest requestWithNullAttributes = new ProductRequest(
                "Test Product", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(requestWithNullAttributes, category);

        // Then
        // ProductMapper doesn't set attributes if null, so it uses the default empty map from Product constructor
        assertThat(result.getAttributes()).isEmpty();
    }

    @Test
    void toEntity_WithNullImageUrls_ShouldHandleGracefully() {
        // Given
        ProductRequest requestWithNullImages = new ProductRequest(
                "Test Product", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, new HashMap<>(), null
        );

        // When
        Product result = productMapper.toEntity(requestWithNullImages, category);

        // Then
        assertThat(result.getImages()).isEmpty();
    }

    @Test
    void toEntity_WithEmptyImageUrls_ShouldHandleGracefully() {
        // Given
        ProductRequest requestWithEmptyImages = new ProductRequest(
                "Test Product", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, new HashMap<>(), Arrays.asList()
        );

        // When
        Product result = productMapper.toEntity(requestWithEmptyImages, category);

        // Then
        assertThat(result.getImages()).isEmpty();
    }

    @Test
    void toResponse_WithValidProduct_ShouldMapCorrectly() {
        // Given
        ProductImage image1 = new ProductImage("http://example.com/image1.jpg", "image1.jpg", "image/jpeg", 1024L);
        ProductImage image2 = new ProductImage("http://example.com/image2.jpg", "image2.jpg", "image/jpeg", 2048L);
        product.getImages().addAll(Arrays.asList(image1, image2));

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.id()).isEqualTo(product.getId());
        assertThat(result.name()).isEqualTo("iPhone 15 Pro");
        assertThat(result.slug()).isEqualTo("iphone-15-pro");
        assertThat(result.description()).isEqualTo("Latest iPhone with USB-C");
        assertThat(result.price()).isEqualByComparingTo(BigDecimal.valueOf(12999.00));
        assertThat(result.currency()).isEqualTo("SEK");
        assertThat(result.categoryName()).isEqualTo("Electronics");
        assertThat(result.stockQuantity()).isEqualTo(10);
        assertThat(result.active()).isTrue();
        assertThat(result.attributes()).containsEntry("color", "black");
        assertThat(result.attributes()).containsEntry("storage", "256GB");
        assertThat(result.images()).containsExactly(
                "http://example.com/image1.jpg", "http://example.com/image2.jpg"
        );
    }

    @Test
    void toResponse_WithNullCategory_ShouldReturnNullCategoryName() {
        // Given
        product.setCategory(null);

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result.categoryName()).isNull();
    }

    @Test
    void toResponse_WithNullAttributes_ShouldReturnEmptyMap() {
        // Given
        product.setAttributes(null);

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result.attributes()).isEmpty();
    }

    @Test
    void toResponse_WithNullImages_ShouldReturnEmptyList() {
        // Given
        product.setImages(null);

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result.images()).isEmpty();
    }

    @Test
    void toResponse_WithEmptyImages_ShouldReturnEmptyList() {
        // Given
        product.getImages().clear();

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result.images()).isEmpty();
    }

    @Test
    void slugify_WithNormalString_ShouldCreateValidSlug() {
        // Given
        ProductRequest request = new ProductRequest(
                "iPhone 15 Pro Max", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro-max");
    }

    @Test
    void slugify_WithSpecialCharacters_ShouldCreateValidSlug() {
        // Given
        ProductRequest request = new ProductRequest(
                "iPhone 15 Pro!!! @#$%^&*()", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro");
    }

    @Test
    void slugify_WithLeadingAndTrailingSpaces_ShouldTrim() {
        // Given
        ProductRequest request = new ProductRequest(
                "  iPhone 15 Pro  ", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro");
    }

    @Test
    void slugify_WithMultipleSpaces_ShouldReplaceWithSingleDash() {
        // Given
        ProductRequest request = new ProductRequest(
                "iPhone    15    Pro", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro");
    }

    @Test
    void slugify_WithNumbers_ShouldPreserveNumbers() {
        // Given
        ProductRequest request = new ProductRequest(
                "iPhone 15 Pro 256GB", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-15-pro-256gb");
    }

    @Test
    void slugify_WithMixedCase_ShouldConvertToLowercase() {
        // Given
        ProductRequest request = new ProductRequest(
                "iPhone PRO Max", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, null, null
        );

        // When
        Product result = productMapper.toEntity(request, category);

        // Then
        assertThat(result.getSlug()).isEqualTo("iphone-pro-max");
    }

    @Test
    void toEntity_WithEmptyAttributes_ShouldCreateEmptyMap() {
        // Given
        ProductRequest requestWithEmptyAttributes = new ProductRequest(
                "Test Product", "Description", BigDecimal.valueOf(100.00), "SEK",
                null, "Electronics", 5, new HashMap<>(), null
        );

        // When
        Product result = productMapper.toEntity(requestWithEmptyAttributes, category);

        // Then
        assertThat(result.getAttributes()).isEmpty();
    }

    @Test
    void toResponse_PreservesAttributeOrder() {
        // Given
        Map<String, String> orderedAttributes = new LinkedHashMap<>();
        orderedAttributes.put("color", "black");
        orderedAttributes.put("storage", "256GB");
        orderedAttributes.put("ram", "8GB");
        product.setAttributes(orderedAttributes);

        // When
        ProductResponse result = productMapper.toResponse(product);

        // Then
        assertThat(result.attributes()).containsExactly(
                Map.entry("color", "black"),
                Map.entry("storage", "256GB"),
                Map.entry("ram", "8GB")
        );
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\model\CategoryTest.java ----
package se.moln.productservice.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

class CategoryTest {

    private Category category;

    @BeforeEach
    void setUp() {
        category = new Category();
        category.setName("Electronics");
        category.setSlug("electronics");
        category.setDescription("Electronic devices and gadgets");
    }

    @Test
    void gettersAndSetters_ShouldWorkCorrectly() {
        // Given
        String name = "Books";
        String slug = "books";
        String description = "Books and literature";

        // When
        category.setName(name);
        category.setSlug(slug);
        category.setDescription(description);

        // Then
        assertThat(category.getName()).isEqualTo(name);
        assertThat(category.getSlug()).isEqualTo(slug);
        assertThat(category.getDescription()).isEqualTo(description);
    }

    @Test
    void getId_ShouldReturnNullForNewCategory() {
        // Given
        Category newCategory = new Category();

        // Then
        assertThat(newCategory.getId()).isNull();
    }

    @Test
    void equals_WithSameId_ShouldReturnTrue() {
        // Given
        UUID id = UUID.randomUUID();
        Category category1 = new Category();
        category1.setName("Category 1");
        // Simulate JPA setting the ID
        setId(category1, id);
        
        Category category2 = new Category();
        category2.setName("Category 2");
        setId(category2, id);

        // When & Then
        assertThat(category1).isEqualTo(category2);
    }

    @Test
    void equals_WithDifferentId_ShouldReturnFalse() {
        // Given
        Category category1 = new Category();
        setId(category1, UUID.randomUUID());
        
        Category category2 = new Category();
        setId(category2, UUID.randomUUID());

        // When & Then
        assertThat(category1).isNotEqualTo(category2);
    }

    @Test
    void equals_WithNullId_ShouldReturnFalse() {
        // Given
        Category category1 = new Category();
        setId(category1, null);
        
        Category category2 = new Category();
        setId(category2, UUID.randomUUID());

        // When & Then
        assertThat(category1).isNotEqualTo(category2);
    }

    @Test
    void equals_WithBothNullIds_ShouldReturnFalse() {
        // Given
        Category category1 = new Category();
        setId(category1, null);
        
        Category category2 = new Category();
        setId(category2, null);

        // When & Then
        assertThat(category1).isNotEqualTo(category2);
    }

    @Test
    void equals_WithSameInstance_ShouldReturnTrue() {
        // When & Then
        assertThat(category).isEqualTo(category);
    }

    @Test
    void equals_WithNull_ShouldReturnFalse() {
        // When & Then
        assertThat(category).isNotEqualTo(null);
    }

    @Test
    void equals_WithDifferentClass_ShouldReturnFalse() {
        // When & Then
        assertThat(category).isNotEqualTo("not a category");
    }

    @Test
    void hashCode_WithSameId_ShouldReturnSameHashCode() {
        // Given
        UUID id = UUID.randomUUID();
        Category category1 = new Category();
        setId(category1, id);
        
        Category category2 = new Category();
        setId(category2, id);

        // When & Then
        assertThat(category1.hashCode()).isEqualTo(category2.hashCode());
    }

    @Test
    void hashCode_WithNullId_ShouldReturnZero() {
        // Given
        Category categoryWithNullId = new Category();
        setId(categoryWithNullId, null);

        // When & Then
        assertThat(categoryWithNullId.hashCode()).isEqualTo(0);
    }

    @Test
    void hashCode_WithDifferentIds_ShouldReturnDifferentHashCodes() {
        // Given
        Category category1 = new Category();
        setId(category1, UUID.randomUUID());
        
        Category category2 = new Category();
        setId(category2, UUID.randomUUID());

        // When & Then
        assertThat(category1.hashCode()).isNotEqualTo(category2.hashCode());
    }

    @Test
    void setName_WithValidName_ShouldSetCorrectly() {
        // Given
        String name = "Home & Garden";

        // When
        category.setName(name);

        // Then
        assertThat(category.getName()).isEqualTo(name);
    }

    @Test
    void setSlug_WithValidSlug_ShouldSetCorrectly() {
        // Given
        String slug = "home-and-garden";

        // When
        category.setSlug(slug);

        // Then
        assertThat(category.getSlug()).isEqualTo(slug);
    }

    @Test
    void setDescription_WithValidDescription_ShouldSetCorrectly() {
        // Given
        String description = "Home improvement and gardening products";

        // When
        category.setDescription(description);

        // Then
        assertThat(category.getDescription()).isEqualTo(description);
    }

    @Test
    void setDescription_WithNullDescription_ShouldSetNull() {
        // When
        category.setDescription(null);

        // Then
        assertThat(category.getDescription()).isNull();
    }

    @Test
    void setDescription_WithEmptyDescription_ShouldSetEmpty() {
        // When
        category.setDescription("");

        // Then
        assertThat(category.getDescription()).isEmpty();
    }

    @Test
    void toString_ShouldNotThrowException() {
        // Given
        Category categoryWithId = new Category();
        categoryWithId.setName("Test Category");
        categoryWithId.setSlug("test-category");
        setId(categoryWithId, UUID.randomUUID());

        // When & Then - just verify toString doesn't throw exception
        String result = categoryWithId.toString();
        assertThat(result).isNotNull();
    }

    @Test
    void newCategory_ShouldHaveNullValues() {
        // Given
        Category newCategory = new Category();

        // Then
        assertThat(newCategory.getId()).isNull();
        assertThat(newCategory.getName()).isNull();
        assertThat(newCategory.getSlug()).isNull();
        assertThat(newCategory.getDescription()).isNull();
    }

    @Test
    void categoryComparison_BasedOnIdOnly_ShouldIgnoreOtherFields() {
        // Given
        UUID id = UUID.randomUUID();
        Category category1 = new Category();
        category1.setName("Electronics");
        category1.setSlug("electronics");
        category1.setDescription("Electronic devices");
        setId(category1, id);

        Category category2 = new Category();
        category2.setName("Computers");
        category2.setSlug("computers");
        category2.setDescription("Computer equipment");
        setId(category2, id);

        // When & Then - Should be equal despite different name, slug, description
        assertThat(category1).isEqualTo(category2);
        assertThat(category1.hashCode()).isEqualTo(category2.hashCode());
    }

    @Test
    void setName_WithLongName_ShouldSetCorrectly() {
        // Given
        String longName = "A".repeat(100); // Maximum length according to @Size(max = 100)

        // When
        category.setName(longName);

        // Then
        assertThat(category.getName()).isEqualTo(longName);
        assertThat(category.getName()).hasSize(100);
    }

    @Test
    void setSlug_WithLongSlug_ShouldSetCorrectly() {
        // Given
        String longSlug = "a-".repeat(100); // Creates "a-a-a-..." up to 200 chars

        // When
        category.setSlug(longSlug);

        // Then
        assertThat(category.getSlug()).isEqualTo(longSlug);
    }

    @Test
    void setDescription_WithLongDescription_ShouldSetCorrectly() {
        // Given
        String longDescription = "A".repeat(500); // Maximum length according to @Size(max = 500)

        // When
        category.setDescription(longDescription);

        // Then
        assertThat(category.getDescription()).isEqualTo(longDescription);
        assertThat(category.getDescription()).hasSize(500);
    }

    // Helper method to set ID via reflection since there's no setter
    private void setId(Category category, UUID id) {
        try {
            var field = Category.class.getDeclaredField("id");
            field.setAccessible(true);
            field.set(category, id);
        } catch (Exception e) {
            throw new RuntimeException("Failed to set ID", e);
        }
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\model\ProductTest.java ----
package se.moln.productservice.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

class ProductTest {

    private Product product;
    private Category category;

    @BeforeEach
    void setUp() {
        category = new Category();
        category.setName("Electronics");
        category.setSlug("electronics");

        product = new Product();
        product.setId(UUID.randomUUID());
        product.setName("iPhone 15 Pro");
        product.setSlug("iphone-15-pro");
        product.setDescription("Latest iPhone model");
        product.setPrice(BigDecimal.valueOf(12999.00));
        product.setCurrency("SEK");
        product.setCategory(category);
        product.setStockQuantity(50);
        product.setActive(true);
    }

    @Test
    void reserveStock_WithValidQuantity_ShouldReduceStock() {
        // Given
        int initialStock = product.getStockQuantity();
        int reserveQuantity = 5;

        // When
        product.reserveStock(reserveQuantity);

        // Then
        assertThat(product.getStockQuantity()).isEqualTo(initialStock - reserveQuantity);
    }

    @Test
    void reserveStock_WithZeroQuantity_ShouldThrowIllegalArgumentException() {
        // When & Then
        assertThatThrownBy(() -> product.reserveStock(0))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("quantity måste vara > 0");
    }

    @Test
    void reserveStock_WithNegativeQuantity_ShouldThrowIllegalArgumentException() {
        // When & Then
        assertThatThrownBy(() -> product.reserveStock(-5))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("quantity måste vara > 0");
    }

    @Test
    void reserveStock_WithInsufficientStock_ShouldThrowIllegalStateException() {
        // Given
        product.setStockQuantity(10);

        // When & Then
        assertThatThrownBy(() -> product.reserveStock(15))
                .isInstanceOf(IllegalStateException.class)
                .hasMessage("Otillräckligt lager");
    }

    @Test
    void reserveStock_WithExactStock_ShouldSetStockToZero() {
        // Given
        product.setStockQuantity(10);

        // When
        product.reserveStock(10);

        // Then
        assertThat(product.getStockQuantity()).isEqualTo(0);
    }

    @Test
    void releaseStock_WithValidQuantity_ShouldIncreaseStock() {
        // Given
        int initialStock = product.getStockQuantity();
        int releaseQuantity = 5;

        // When
        product.releaseStock(releaseQuantity);

        // Then
        assertThat(product.getStockQuantity()).isEqualTo(initialStock + releaseQuantity);
    }

    @Test
    void releaseStock_WithZeroQuantity_ShouldThrowIllegalArgumentException() {
        // When & Then
        assertThatThrownBy(() -> product.releaseStock(0))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("quantity måste vara > 0");
    }

    @Test
    void releaseStock_WithNegativeQuantity_ShouldThrowIllegalArgumentException() {
        // When & Then
        assertThatThrownBy(() -> product.releaseStock(-5))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessage("quantity måste vara > 0");
    }

    @Test
    void addImage_WithValidParameters_ShouldAddImageToList() {
        // Given
        String url = "http://example.com/image.jpg";
        String fileName = "image.jpg";
        String contentType = "image/jpeg";
        Long sizeBytes = 1024L;

        // When
        product.addImage(url, fileName, contentType, sizeBytes);

        // Then
        assertThat(product.getImages()).hasSize(1);
        ProductImage addedImage = product.getImages().get(0);
        assertThat(addedImage.getUrl()).isEqualTo(url);
        assertThat(addedImage.getFileName()).isEqualTo(fileName);
        assertThat(addedImage.getContentType()).isEqualTo(contentType);
        assertThat(addedImage.getSizeBytes()).isEqualTo(sizeBytes);
    }

    @Test
    void addImage_WithNullParameters_ShouldHandleGracefully() {
        // When
        product.addImage("http://example.com/image.jpg", null, null, null);

        // Then
        assertThat(product.getImages()).hasSize(1);
        ProductImage addedImage = product.getImages().get(0);
        assertThat(addedImage.getUrl()).isEqualTo("http://example.com/image.jpg");
        assertThat(addedImage.getFileName()).isNull();
        assertThat(addedImage.getContentType()).isNull();
        assertThat(addedImage.getSizeBytes()).isNull();
    }

    @Test
    void addImage_MultipleImages_ShouldMaintainOrder() {
        // When
        product.addImage("http://example.com/image1.jpg", "image1.jpg", "image/jpeg", 1024L);
        product.addImage("http://example.com/image2.jpg", "image2.jpg", "image/png", 2048L);
        product.addImage("http://example.com/image3.jpg", "image3.jpg", "image/webp", 512L);

        // Then
        assertThat(product.getImages()).hasSize(3);
        assertThat(product.getImages().get(0).getUrl()).isEqualTo("http://example.com/image1.jpg");
        assertThat(product.getImages().get(1).getUrl()).isEqualTo("http://example.com/image2.jpg");
        assertThat(product.getImages().get(2).getUrl()).isEqualTo("http://example.com/image3.jpg");
    }

    @Test
    void putAttribute_WithValidKeyValue_ShouldAddAttribute() {
        // Given
        String key = "color";
        String value = "black";

        // When
        product.putAttribute(key, value);

        // Then
        assertThat(product.getAttributes()).containsEntry(key, value);
    }

    @Test
    void putAttribute_WithNullKey_ShouldThrowNullPointerException() {
        // When & Then
        assertThatThrownBy(() -> product.putAttribute(null, "value"))
                .isInstanceOf(NullPointerException.class);
    }

    @Test
    void putAttribute_WithNullValue_ShouldAddNullValue() {
        // Given
        String key = "color";

        // When
        product.putAttribute(key, null);

        // Then
        assertThat(product.getAttributes()).containsEntry(key, null);
    }

    @Test
    void putAttribute_WithExistingKey_ShouldReplaceValue() {
        // Given
        String key = "color";
        product.putAttribute(key, "black");

        // When
        product.putAttribute(key, "white");

        // Then
        assertThat(product.getAttributes()).containsEntry(key, "white");
        assertThat(product.getAttributes()).hasSize(1);
    }

    @Test
    void putAttribute_MultipleAttributes_ShouldMaintainOrder() {
        // When
        product.putAttribute("color", "black");
        product.putAttribute("storage", "256GB");
        product.putAttribute("ram", "8GB");

        // Then
        assertThat(product.getAttributes()).hasSize(3);
        assertThat(product.getAttributes().keySet()).containsExactly("color", "storage", "ram");
    }

    @Test
    void equals_WithSameId_ShouldReturnTrue() {
        // Given
        UUID id = UUID.randomUUID();
        Product product1 = new Product();
        product1.setId(id);
        Product product2 = new Product();
        product2.setId(id);

        // When & Then
        assertThat(product1).isEqualTo(product2);
    }

    @Test
    void equals_WithDifferentId_ShouldReturnFalse() {
        // Given
        Product product1 = new Product();
        product1.setId(UUID.randomUUID());
        Product product2 = new Product();
        product2.setId(UUID.randomUUID());

        // When & Then
        assertThat(product1).isNotEqualTo(product2);
    }

    @Test
    void equals_WithNullId_ShouldReturnFalse() {
        // Given
        Product product1 = new Product();
        product1.setId(null);
        Product product2 = new Product();
        product2.setId(UUID.randomUUID());

        // When & Then
        assertThat(product1).isNotEqualTo(product2);
    }

    @Test
    void equals_WithSameInstance_ShouldReturnTrue() {
        // When & Then
        assertThat(product).isEqualTo(product);
    }

    @Test
    void equals_WithDifferentClass_ShouldReturnFalse() {
        // When & Then
        assertThat(product).isNotEqualTo("not a product");
    }

    @Test
    void hashCode_WithSameId_ShouldReturnSameHashCode() {
        // Given
        UUID id = UUID.randomUUID();
        Product product1 = new Product();
        product1.setId(id);
        Product product2 = new Product();
        product2.setId(id);

        // When & Then
        assertThat(product1.hashCode()).isEqualTo(product2.hashCode());
    }

    @Test
    void hashCode_WithNullId_ShouldReturnZero() {
        // Given
        Product productWithNullId = new Product();
        productWithNullId.setId(null);

        // When & Then
        assertThat(productWithNullId.hashCode()).isEqualTo(0);
    }

    @Test
    void defaultValues_ShouldBeSetCorrectly() {
        // Given
        Product newProduct = new Product();

        // Then
        assertThat(newProduct.getStockQuantity()).isEqualTo(0);
        assertThat(newProduct.isActive()).isTrue();
        assertThat(newProduct.getImages()).isEmpty();
        assertThat(newProduct.getAttributes()).isEmpty();
    }

    @Test
    void gettersAndSetters_ShouldWorkCorrectly() {
        // Given
        UUID id = UUID.randomUUID();
        String name = "Test Product";
        String slug = "test-product";
        String description = "Test description";
        BigDecimal price = BigDecimal.valueOf(999.99);
        String currency = "USD";
        int stockQuantity = 100;
        boolean active = false;

        // When
        product.setId(id);
        product.setName(name);
        product.setSlug(slug);
        product.setDescription(description);
        product.setPrice(price);
        product.setCurrency(currency);
        product.setCategory(category);
        product.setStockQuantity(stockQuantity);
        product.setActive(active);

        // Then
        assertThat(product.getId()).isEqualTo(id);
        assertThat(product.getName()).isEqualTo(name);
        assertThat(product.getSlug()).isEqualTo(slug);
        assertThat(product.getDescription()).isEqualTo(description);
        assertThat(product.getPrice()).isEqualTo(price);
        assertThat(product.getCurrency()).isEqualTo(currency);
        assertThat(product.getCategory()).isEqualTo(category);
        assertThat(product.getStockQuantity()).isEqualTo(stockQuantity);
        assertThat(product.isActive()).isEqualTo(active);
    }

    @Test
    void stockOperations_ComplexScenario_ShouldWorkCorrectly() {
        // Given
        product.setStockQuantity(100);

        // When & Then
        product.reserveStock(30);
        assertThat(product.getStockQuantity()).isEqualTo(70);

        product.reserveStock(20);
        assertThat(product.getStockQuantity()).isEqualTo(50);

        product.releaseStock(10);
        assertThat(product.getStockQuantity()).isEqualTo(60);

        product.releaseStock(40);
        assertThat(product.getStockQuantity()).isEqualTo(100);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\FileStorageServiceTest.java ----
package se.moln.productservice.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.*;

class FileStorageServiceTest {

    @TempDir
    Path tempDir;

    private FileStorageService fileStorageService;

    @Mock
    private MultipartFile mockFile;

    @BeforeEach
    void setUp() throws IOException {
        MockitoAnnotations.openMocks(this);
        fileStorageService = new FileStorageService(tempDir.toString());
    }

    @Test
    void constructor_ShouldCreateUploadDirectory() throws IOException {
        // Given
        Path newDir = tempDir.resolve("test-uploads");
        
        // When
        FileStorageService service = new FileStorageService(newDir.toString());
        
        // Then
        assertThat(Files.exists(newDir)).isTrue();
        assertThat(Files.isDirectory(newDir)).isTrue();
    }

    @Test
    void store_WithValidFile_ShouldStoreFileSuccessfully() throws IOException {
        // Given
        String originalFilename = "test-image.jpg";
        String contentType = "image/jpeg";
        long fileSize = 1024L;
        byte[] content = "test image content".getBytes();
        
        when(mockFile.isEmpty()).thenReturn(false);
        when(mockFile.getOriginalFilename()).thenReturn(originalFilename);
        when(mockFile.getContentType()).thenReturn(contentType);
        when(mockFile.getSize()).thenReturn(fileSize);
        doNothing().when(mockFile).transferTo(any(Path.class));

        // When
        FileStorageService.StoredFile result = fileStorageService.store(mockFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.originalName()).isEqualTo(originalFilename);
        assertThat(result.contentType()).isEqualTo(contentType);
        assertThat(result.size()).isEqualTo(fileSize);
        assertThat(result.url()).startsWith("/uploads/");
        assertThat(result.url()).endsWith(".jpg");
        verify(mockFile).transferTo(any(Path.class));
    }

    @Test
    void store_WithEmptyFile_ShouldThrowIOException() throws IOException {
        // Given
        when(mockFile.isEmpty()).thenReturn(true);

        // When & Then
        assertThatThrownBy(() -> fileStorageService.store(mockFile))
                .isInstanceOf(IOException.class)
                .hasMessage("Empty file");
        
        verify(mockFile, never()).transferTo(any(Path.class));
    }

    @Test
    void store_WithNullOriginalFilename_ShouldUseDefaultName() throws IOException {
        // Given
        String contentType = "image/jpeg";
        long fileSize = 1024L;
        
        when(mockFile.isEmpty()).thenReturn(false);
        when(mockFile.getOriginalFilename()).thenReturn(null);
        when(mockFile.getContentType()).thenReturn(contentType);
        when(mockFile.getSize()).thenReturn(fileSize);
        doNothing().when(mockFile).transferTo(any(Path.class));

        // When
        FileStorageService.StoredFile result = fileStorageService.store(mockFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.originalName()).isEqualTo("file");
        assertThat(result.url()).startsWith("/uploads/");
        // Should not have extension since original filename was null
        assertThat(result.url().contains(".")).isFalse();
    }

    @Test
    void store_WithFileWithoutExtension_ShouldStoreWithoutExtension() throws IOException {
        // Given
        String originalFilename = "testfile";
        String contentType = "text/plain";
        long fileSize = 512L;
        
        when(mockFile.isEmpty()).thenReturn(false);
        when(mockFile.getOriginalFilename()).thenReturn(originalFilename);
        when(mockFile.getContentType()).thenReturn(contentType);
        when(mockFile.getSize()).thenReturn(fileSize);
        doNothing().when(mockFile).transferTo(any(Path.class));

        // When
        FileStorageService.StoredFile result = fileStorageService.store(mockFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.originalName()).isEqualTo(originalFilename);
        assertThat(result.url()).startsWith("/uploads/");
        // URL should not end with dot since there's no extension
        assertThat(result.url()).doesNotEndWith(".");
    }

    @Test
    void store_WithComplexFilename_ShouldCleanPath() throws IOException {
        // Given
        String originalFilename = "../../../malicious-file.jpg";
        String contentType = "image/jpeg";
        long fileSize = 1024L;
        
        when(mockFile.isEmpty()).thenReturn(false);
        when(mockFile.getOriginalFilename()).thenReturn(originalFilename);
        when(mockFile.getContentType()).thenReturn(contentType);
        when(mockFile.getSize()).thenReturn(fileSize);
        doNothing().when(mockFile).transferTo(any(Path.class));

        // When
        FileStorageService.StoredFile result = fileStorageService.store(mockFile);

        // Then
        assertThat(result).isNotNull();
        // StringUtils.cleanPath normalizes the path but doesn't remove the ../ parts completely
        assertThat(result.originalName()).isEqualTo("../../../malicious-file.jpg");
        assertThat(result.url()).startsWith("/uploads/");
        assertThat(result.url()).endsWith(".jpg");
    }

    @Test
    void store_WithIOExceptionDuringTransfer_ShouldPropagateException() throws IOException {
        // Given
        when(mockFile.isEmpty()).thenReturn(false);
        when(mockFile.getOriginalFilename()).thenReturn("test.jpg");
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(1024L);
        doThrow(new IOException("Transfer failed")).when(mockFile).transferTo(any(Path.class));

        // When & Then
        assertThatThrownBy(() -> fileStorageService.store(mockFile))
                .isInstanceOf(IOException.class)
                .hasMessage("Transfer failed");
    }

    @Test
    void store_WithVariousFileExtensions_ShouldPreserveExtensions() throws IOException {
        // Given
        String[] extensions = {".png", ".gif", ".webp", ".PDF", ".TXT"};
        
        for (String ext : extensions) {
            MultipartFile file = mock(MultipartFile.class);
            String filename = "testfile" + ext;
            
            when(file.isEmpty()).thenReturn(false);
            when(file.getOriginalFilename()).thenReturn(filename);
            when(file.getContentType()).thenReturn("application/octet-stream");
            when(file.getSize()).thenReturn(1024L);
            doNothing().when(file).transferTo(any(Path.class));

            // When
            FileStorageService.StoredFile result = fileStorageService.store(file);

            // Then
            assertThat(result.url()).endsWith(ext);
            assertThat(result.originalName()).isEqualTo(filename);
        }
    }

    @Test
    void storedFile_ShouldBeProperRecord() {
        // Given
        String url = "/uploads/test.jpg";
        String originalName = "original.jpg";
        String contentType = "image/jpeg";
        long size = 1024L;

        // When
        FileStorageService.StoredFile storedFile = new FileStorageService.StoredFile(url, originalName, contentType, size);

        // Then
        assertThat(storedFile.url()).isEqualTo(url);
        assertThat(storedFile.originalName()).isEqualTo(originalName);
        assertThat(storedFile.contentType()).isEqualTo(contentType);
        assertThat(storedFile.size()).isEqualTo(size);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\InventoryServiceTest.java ----
package se.moln.productservice.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import se.moln.productservice.dto.InventoryResponse;
import se.moln.productservice.model.Inventory;
import se.moln.productservice.model.Product;
import se.moln.productservice.model.StockStatus;
import se.moln.productservice.repository.InventoryRepository;
import se.moln.productservice.repository.ProductRepository;

import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class InventoryServiceTest {

    @Mock private InventoryRepository inventoryRepository;
    @Mock private ProductRepository productRepository;

    @InjectMocks private InventoryService service;

    private UUID productId;
    private Product product;
    private Inventory inventory;

    @BeforeEach
    void setUp() {
        productId = UUID.randomUUID();
        product = new Product();
        product.setId(productId);

        inventory = new Inventory();
        inventory.setProduct(product);
        inventory.setQuantity(5);
        inventory.setStatus(StockStatus.IN_STOCK);
    }

    @Test
    void get_WhenInventoryExists_ReturnsResponse() {
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.of(inventory));

        InventoryResponse resp = service.get(productId);

        assertThat(resp).isNotNull();
        assertThat(resp.productId()).isEqualTo(productId);
        assertThat(resp.quantity()).isEqualTo(5);
        assertThat(resp.status()).isEqualTo(StockStatus.IN_STOCK);
    }

    @Test
    void get_WhenInventoryMissing_CreatesAndReturnsDefault() {
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.empty());
        when(inventoryRepository.save(any(Inventory.class))).thenAnswer(invocation -> invocation.getArgument(0));

        InventoryResponse resp = service.get(productId);

        assertThat(resp.productId()).isEqualTo(productId);
        assertThat(resp.quantity()).isZero();
        assertThat(resp.status()).isEqualTo(StockStatus.OUT_OF_STOCK);
        verify(inventoryRepository).save(any(Inventory.class));
    }

    @Test
    void get_WhenProductMissing_Throws() {
        when(productRepository.findById(productId)).thenReturn(Optional.empty());
        assertThatThrownBy(() -> service.get(productId))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining("Product not found");
    }

    @Test
    void purchase_WithEnoughStock_DecreasesQuantityAndUpdatesStatus() {
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.of(inventory));

        InventoryResponse resp = service.purchase(productId, 3);

        assertThat(resp.quantity()).isEqualTo(2);
        assertThat(resp.status()).isEqualTo(StockStatus.IN_STOCK);
        verify(inventoryRepository).save(any(Inventory.class));
    }

    @Test
    void purchase_ExactStock_ReachesZeroSetsOutOfStock() {
        inventory.setQuantity(2);
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.of(inventory));

        InventoryResponse resp = service.purchase(productId, 2);

        assertThat(resp.quantity()).isZero();
        assertThat(resp.status()).isEqualTo(StockStatus.OUT_OF_STOCK);
    }

    @Test
    void purchase_NotEnoughStock_Throws() {
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.of(inventory));

        assertThatThrownBy(() -> service.purchase(productId, 10))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining("not enough stock");
        verify(inventoryRepository, never()).save(any());
    }

    @Test
    void purchase_InvalidQuantity_Throws() {
        assertThatThrownBy(() -> service.purchase(productId, 0))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining("quantity must be > 0");
    }

    @Test
    void refund_IncreasesQuantityAndSetsInStock() {
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(inventoryRepository.findByProductId(productId)).thenReturn(Optional.of(inventory));

        InventoryResponse resp = service.refund(productId, 4);

        assertThat(resp.quantity()).isEqualTo(9);
        assertThat(resp.status()).isEqualTo(StockStatus.IN_STOCK);
        verify(inventoryRepository).save(any(Inventory.class));
    }

    @Test
    void refund_InvalidQuantity_Throws() {
        assertThatThrownBy(() -> service.refund(productId, -1))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining("quantity must be > 0");
    }
}


---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\ProductImageAppServiceTest.java ----
package se.moln.productservice.service;

import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.multipart.MultipartFile;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductImageAppServiceTest {

    @Mock
    private ProductRepository productRepository;

    @Mock
    private ProductMapper productMapper;

    @Mock
    private FileStorageService fileStorageService;

    @Mock
    private MultipartFile multipartFile;

    @InjectMocks
    private ProductImageAppService productImageAppService;

    private UUID productId;
    private Product product;
    private ProductResponse productResponse;
    private FileStorageService.StoredFile storedFile;

    @BeforeEach
    void setUp() {
        productId = UUID.randomUUID();
        
        product = new Product();
        product.setId(productId);
        product.setName("Test Product");
        product.setSlug("test-product");
        product.setDescription("Test Description");
        product.setPrice(BigDecimal.valueOf(99.99));

        productResponse = new ProductResponse(
                productId,
                "Test Product",
                "test-product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                "Electronics",
                10,
                true,
                new HashMap<>(),
                List.of("/uploads/test-image.jpg")
        );

        storedFile = new FileStorageService.StoredFile(
                "/uploads/test-image.jpg",
                "test-image.jpg",
                "image/jpeg",
                1024L
        );
    }

    @Test
    void uploadImage_WithValidProductAndFile_ShouldReturnProductResponse() throws IOException {
        // Given
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(fileStorageService.store(multipartFile)).thenReturn(storedFile);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productImageAppService.uploadImage(productId, multipartFile);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.id()).isEqualTo(productId);
        assertThat(result.images()).contains("/uploads/test-image.jpg");
        
        verify(productRepository).findById(productId);
        verify(fileStorageService).store(multipartFile);
        verify(productRepository).save(product);
        verify(productMapper).toResponse(product);
    }

    @Test
    void uploadImage_WithNonExistentProduct_ShouldThrowEntityNotFoundException() throws IOException {
        // Given
        when(productRepository.findById(productId)).thenReturn(Optional.empty());

        // When & Then
        assertThatThrownBy(() -> productImageAppService.uploadImage(productId, multipartFile))
                .isInstanceOf(EntityNotFoundException.class)
                .hasMessage("Product not found: " + productId);

        verify(productRepository).findById(productId);
        verify(fileStorageService, never()).store(any());
        verify(productRepository, never()).save(any());
        verify(productMapper, never()).toResponse(any());
    }

    @Test
    void uploadImage_WithFileStorageException_ShouldPropagateIOException() throws IOException {
        // Given
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(fileStorageService.store(multipartFile)).thenThrow(new IOException("Storage failed"));

        // When & Then
        assertThatThrownBy(() -> productImageAppService.uploadImage(productId, multipartFile))
                .isInstanceOf(IOException.class)
                .hasMessage("Storage failed");

        verify(productRepository).findById(productId);
        verify(fileStorageService).store(multipartFile);
        verify(productRepository, never()).save(any());
        verify(productMapper, never()).toResponse(any());
    }

    @Test
    void uploadImage_ShouldCallAddImageOnProduct() throws IOException {
        // Given
        Product spyProduct = spy(product);
        when(productRepository.findById(productId)).thenReturn(Optional.of(spyProduct));
        when(fileStorageService.store(multipartFile)).thenReturn(storedFile);
        when(productRepository.save(any(Product.class))).thenReturn(spyProduct);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        productImageAppService.uploadImage(productId, multipartFile);

        // Then
        verify(spyProduct).addImage(
                storedFile.url(),
                storedFile.originalName(),
                storedFile.contentType(),
                storedFile.size()
        );
    }

    @Test
    void uploadImage_WithDifferentFileTypes_ShouldHandleCorrectly() throws IOException {
        // Given
        FileStorageService.StoredFile pngFile = new FileStorageService.StoredFile(
                "/uploads/test-image.png",
                "test-image.png",
                "image/png",
                2048L
        );
        
        Product spyProduct = spy(product);
        when(productRepository.findById(productId)).thenReturn(Optional.of(spyProduct));
        when(fileStorageService.store(multipartFile)).thenReturn(pngFile);
        when(productRepository.save(any(Product.class))).thenReturn(spyProduct);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productImageAppService.uploadImage(productId, multipartFile);

        // Then
        assertThat(result).isNotNull();
        verify(spyProduct).addImage(
                "/uploads/test-image.png",
                "test-image.png",
                "image/png",
                2048L
        );
    }

    @Test
    void uploadImage_WithEmptyFile_ShouldPropagateIOException() throws IOException {
        // Given
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(fileStorageService.store(multipartFile)).thenThrow(new IOException("Empty file"));

        // When & Then
        assertThatThrownBy(() -> productImageAppService.uploadImage(productId, multipartFile))
                .isInstanceOf(IOException.class)
                .hasMessage("Empty file");

        verify(productRepository).findById(productId);
        verify(fileStorageService).store(multipartFile);
        verify(productRepository, never()).save(any());
    }

    @Test
    void uploadImage_ShouldBeTransactional() throws IOException {
        // Given
        when(productRepository.findById(productId)).thenReturn(Optional.of(product));
        when(fileStorageService.store(multipartFile)).thenReturn(storedFile);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productImageAppService.uploadImage(productId, multipartFile);

        // Then
        assertThat(result).isNotNull();
        // Verify that save is called, which is important for transactional behavior
        verify(productRepository).save(product);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\ProductQueryServiceTest.java ----
package se.moln.productservice.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.web.server.ResponseStatusException;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductQueryServiceTest {

    @Mock private ProductRepository repo;
    @Mock private ProductMapper mapper;

    @InjectMocks private ProductQueryService service;

    private UUID id;
    private UUID categoryId;
    private Product entity;
    private ProductResponse dto;

    @BeforeEach
    void setup() {
        id = UUID.randomUUID();
        categoryId = UUID.randomUUID();
        entity = new Product();
        entity.setId(id);
        entity.setName("Test");

        dto = new ProductResponse(
                id, "Test", "test", "Desc",
                BigDecimal.valueOf(10), "SEK", null, 0, true,
                java.util.Map.of(), java.util.List.of()
        );
    }

    @Test
    void getById_ReturnsMappedDto() {
        when(repo.findById(id)).thenReturn(Optional.of(entity));
        when(mapper.toResponse(entity)).thenReturn(dto);

        ProductResponse out = service.getById(id);
        assertThat(out).isNotNull();
        assertThat(out.id()).isEqualTo(id);
        verify(repo).findById(id);
        verify(mapper).toResponse(entity);
    }

    @Test
    void getById_NotFound_Throws404() {
        when(repo.findById(id)).thenReturn(Optional.empty());
        assertThatThrownBy(() -> service.getById(id))
                .isInstanceOf(ResponseStatusException.class)
                .hasMessageContaining("404");
    }

    @Test
    void listActive_MapsPage() {
        Page<Product> page = new PageImpl<>(List.of(entity), PageRequest.of(0, 10), 1);
        when(repo.findByActiveTrue(any())).thenReturn(page);
        when(mapper.toResponse(entity)).thenReturn(dto);

        Page<ProductResponse> out = service.listActive(0, 10);
        assertThat(out.getContent()).hasSize(1);
        assertThat(out.getContent().get(0).id()).isEqualTo(id);
        verify(repo).findByActiveTrue(any());
        verify(mapper).toResponse(entity);
    }

    @Test
    void listByCategory_MapsPage() {
        Page<Product> page = new PageImpl<>(List.of(entity), PageRequest.of(0, 10), 1);
        when(repo.findByCategory_IdAndActiveTrue(eq(categoryId), any())).thenReturn(page);
        when(mapper.toResponse(entity)).thenReturn(dto);

        Page<ProductResponse> out = service.listByCategory(categoryId, 0, 10);
        assertThat(out.getContent()).hasSize(1);
        assertThat(out.getContent().get(0).id()).isEqualTo(id);
        verify(repo).findByCategory_IdAndActiveTrue(eq(categoryId), any());
        verify(mapper).toResponse(entity);
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\ProductReadServiceTest.java ----
package se.moln.productservice.service;

import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.ProductRepository;

import java.math.BigDecimal;
import java.util.*;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class ProductReadServiceTest {

    @Mock private ProductRepository repo;
    @Mock private ProductMapper mapper;

    @InjectMocks private ProductReadService service;

    private UUID id;
    private Product entity;
    private ProductResponse dto;

    @BeforeEach
    void setup() {
        id = UUID.randomUUID();
        entity = new Product();
        entity.setId(id);
        entity.setName("Test Product");

        dto = new ProductResponse(
                id, "Test Product", "test-product", "Desc",
                BigDecimal.valueOf(99.99), "SEK", "Electronics", 10, true,
                Map.of(), List.of()
        );
    }

    @Test
    void getById_ShouldReturnResponse() {
        when(repo.findById(id)).thenReturn(Optional.of(entity));
        when(mapper.toResponse(entity)).thenReturn(dto);

        ProductResponse out = service.getById(id);
        assertThat(out).isNotNull();
        assertThat(out.id()).isEqualTo(id);
    }

    @Test
    void getById_NotFound_ShouldThrow() {
        when(repo.findById(id)).thenReturn(Optional.empty());
        assertThatThrownBy(() -> service.getById(id))
                .isInstanceOf(EntityNotFoundException.class)
                .hasMessageContaining("Product not found");
    }
}


---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\ProductServiceTest.java ----
package se.moln.productservice.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import se.moln.productservice.dto.ProductRequest;
import se.moln.productservice.dto.ProductResponse;
import se.moln.productservice.exception.DuplicateProductException;
import se.moln.productservice.mappning.ProductMapper;
import se.moln.productservice.model.Category;
import se.moln.productservice.model.Product;
import se.moln.productservice.repository.CategoryRepository;
import se.moln.productservice.repository.ProductRepository;

import java.math.BigDecimal;
import java.util.*;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ProductServiceTest {

    @Mock
    private ProductRepository productRepository;

    @Mock
    private CategoryRepository categoryRepository;

    @Mock
    private ProductMapper productMapper;

    @InjectMocks
    private ProductService productService;

    private ProductRequest productRequest;
    private Product product;
    private ProductResponse productResponse;
    private Category category;
    private UUID productId;
    private UUID categoryId;

    @BeforeEach
    void setUp() {
        productId = UUID.randomUUID();
        categoryId = UUID.randomUUID();

        category = new Category();
        category.setName("Electronics");
        category.setSlug("electronics");

        productRequest = new ProductRequest(
                "Test Product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                categoryId,
                "Electronics",
                10,
                new HashMap<>(),
                Arrays.asList("http://example.com/image.jpg")
        );

        product = new Product();
        product.setId(productId);
        product.setName("Test Product");
        product.setSlug("test-product");
        product.setDescription("Test Description");
        product.setPrice(BigDecimal.valueOf(99.99));
        product.setCategory(category);

        productResponse = new ProductResponse(
                productId,
                "Test Product",
                "test-product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                "Electronics",
                10,
                true,
                new HashMap<>(),
                Arrays.asList("http://example.com/image.jpg")
        );
    }

    @Test
    void create_WithValidData_ShouldReturnProductResponse() {
        // Given
        when(categoryRepository.findById(categoryId)).thenReturn(Optional.of(category));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(false);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productService.create(productRequest);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.name()).isEqualTo("Test Product");
        verify(productRepository).save(product);
        verify(productMapper).toResponse(product);
    }

    @Test
    void create_WithDuplicateSlug_ShouldThrowDuplicateProductException() {
        // Given
        when(categoryRepository.findById(categoryId)).thenReturn(Optional.of(category));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(true);

        // When & Then
        assertThatThrownBy(() -> productService.create(productRequest))
                .isInstanceOf(DuplicateProductException.class)
                .hasMessageContaining("Slug already exists");

        verify(productRepository, never()).save(any());
    }

    @Test
    void create_WithDuplicateName_ShouldThrowDuplicateProductException() {
        // Given
        when(categoryRepository.findById(categoryId)).thenReturn(Optional.of(category));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(true);

        // When & Then
        assertThatThrownBy(() -> productService.create(productRequest))
                .isInstanceOf(DuplicateProductException.class)
                .hasMessageContaining("Product name already exists");

        verify(productRepository, never()).save(any());
    }

    @Test
    void create_WithNewCategoryName_ShouldCreateCategory() {
        ProductRequest requestWithNewCategory = new ProductRequest(
                "Test Product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                null,
                "New Category",
                10,
                new HashMap<>(),
                Collections.emptyList()
        );

        Category newCategory = new Category();
        newCategory.setName("New Category");
        newCategory.setSlug("new-category");

        when(categoryRepository.findByNameIgnoreCase("New Category")).thenReturn(Optional.empty());
        when(categoryRepository.save(any(Category.class))).thenReturn(newCategory);
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(false);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productService.create(requestWithNewCategory);

        // Then
        assertThat(result).isNotNull();
        verify(categoryRepository).save(any(Category.class));
        verify(productRepository).save(product);
    }

    @Test
    void create_WithoutCategoryInfo_ShouldUseUncategorized() {
        ProductRequest requestWithoutCategory = new ProductRequest(
                "Test Product",
                "Test Description",
                BigDecimal.valueOf(99.99),
                "SEK",
                null,
                null,
                10,
                new HashMap<>(),
                Collections.emptyList()
        );

        Category uncategorized = new Category();
        uncategorized.setName("Uncategorized");
        uncategorized.setSlug("uncategorized");

        when(categoryRepository.findByNameIgnoreCase("Uncategorized")).thenReturn(Optional.of(uncategorized));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(false);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        ProductResponse result = productService.create(requestWithoutCategory);

        // Then
        assertThat(result).isNotNull();
        verify(categoryRepository).findByNameIgnoreCase("Uncategorized");
        verify(productRepository).save(product);
    }

    @Test
    void getAllProducts_ShouldReturnPagedProducts() {
        // Given
        Pageable pageable = PageRequest.of(0, 5);
        List<Product> products = Arrays.asList(product);
        Page<Product> productPage = new PageImpl<>(products, pageable, 1);

        when(productRepository.findAllWithAttributes(pageable)).thenReturn(productPage);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        Page<ProductResponse> result = productService.getAllProducts(pageable);

        // Then
        assertThat(result).isNotNull();
        assertThat(result.getContent()).hasSize(1);
        assertThat(result.getContent().get(0).name()).isEqualTo("Test Product");
        verify(productRepository).findAllWithAttributes(pageable);
    }

    @Test
    void getAllProductsWithoutPagination_ShouldReturnAllProducts() {
        // Given
        List<Product> products = Arrays.asList(product);
        when(productRepository.findAllWithAttributes()).thenReturn(products);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        List<ProductResponse> result = productService.getAllProductsWithoutPagination();

        // Then
        assertThat(result).isNotNull();
        assertThat(result).hasSize(1);
        assertThat(result.get(0).name()).isEqualTo("Test Product");
        verify(productRepository).findAllWithAttributes();
    }

    @Test
    void searchProducts_WithAllParameters_ShouldReturnFilteredProducts() {
        // Given
        String name = "Test";
        String categoryName = "Electronics";
        BigDecimal minPrice = BigDecimal.valueOf(50);
        BigDecimal maxPrice = BigDecimal.valueOf(150);
        List<Product> products = Arrays.asList(product);

        when(productRepository.findAll(any(Specification.class))).thenReturn(products);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        List<ProductResponse> result = productService.searchProducts(name, categoryName, minPrice, maxPrice);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).hasSize(1);
        assertThat(result.get(0).name()).isEqualTo("Test Product");
        verify(productRepository).findAll(any(Specification.class));
    }

    @Test
    void searchProducts_WithNullParameters_ShouldReturnAllProducts() {
        // Given
        List<Product> products = Arrays.asList(product);
        when(productRepository.findAll(any(Specification.class))).thenReturn(products);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        // When
        List<ProductResponse> result = productService.searchProducts(null, null, null, null);

        // Then
        assertThat(result).isNotNull();
        assertThat(result).hasSize(1);
        verify(productRepository).findAll(any(Specification.class));
    }

    @Test
    void create_WithInvalidCategoryId_ShouldThrowIllegalArgumentException() {
        when(categoryRepository.findById(categoryId)).thenReturn(Optional.empty());

        // When & Then
        assertThatThrownBy(() -> productService.create(productRequest))
                .isInstanceOf(IllegalArgumentException.class)
                .hasMessageContaining("Category not found");

        verify(productRepository, never()).save(any());
    }

    @Test
    void create_WithExistingCategoryName_ShouldUseExistingCategory() {
        ProductRequest req = new ProductRequest(
                "Name",
                "Desc",
                BigDecimal.TEN,
                "SEK",
                null,
                "Electronics",
                0,
                new HashMap<>(),
                Collections.emptyList()
        );

        when(categoryRepository.findByNameIgnoreCase("Electronics")).thenReturn(Optional.of(category));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(false);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        ProductResponse out = productService.create(req);

        assertThat(out).isNotNull();
        verify(categoryRepository, never()).save(any());
        verify(productRepository).save(product);
    }

    @Test
    void create_NoCategory_UncategorizedMissing_ShouldCreateUncategorized() {
        ProductRequest req = new ProductRequest(
                "Name",
                "Desc",
                BigDecimal.TEN,
                "SEK",
                null,
                null,
                0,
                new HashMap<>(),
                Collections.emptyList()
        );

        when(categoryRepository.findByNameIgnoreCase("Uncategorized")).thenReturn(Optional.empty());
        when(categoryRepository.save(any(Category.class))).thenAnswer(inv -> inv.getArgument(0));
        when(productMapper.toEntity(any(ProductRequest.class), any(Category.class))).thenReturn(product);
        when(productRepository.existsBySlug(anyString())).thenReturn(false);
        when(productRepository.existsByNameIgnoreCase(anyString())).thenReturn(false);
        when(productRepository.save(any(Product.class))).thenReturn(product);
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        ProductResponse out = productService.create(req);

        assertThat(out).isNotNull();
        verify(categoryRepository).save(any(Category.class));
        verify(productRepository).save(product);
    }

    @Test
    void searchProducts_WithOnlyName_ShouldFilter() {
        when(productRepository.findAll(any(Specification.class))).thenReturn(List.of(product));
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        List<ProductResponse> result = productService.searchProducts("Test", null, null, null);

        assertThat(result).hasSize(1);
        verify(productRepository).findAll(any(Specification.class));
    }

    @Test
    void searchProducts_WithOnlyCategoryName_ShouldFilter() {
        when(productRepository.findAll(any(Specification.class))).thenReturn(List.of(product));
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        List<ProductResponse> result = productService.searchProducts(null, "Electronics", null, null);

        assertThat(result).hasSize(1);
        verify(productRepository).findAll(any(Specification.class));
    }

    @Test
    void searchProducts_WithOnlyMinPrice_ShouldFilter() {
        when(productRepository.findAll(any(Specification.class))).thenReturn(List.of(product));
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        List<ProductResponse> result = productService.searchProducts(null, null, BigDecimal.ONE, null);

        assertThat(result).hasSize(1);
        verify(productRepository).findAll(any(Specification.class));
    }

    @Test
    void searchProducts_WithOnlyMaxPrice_ShouldFilter() {
        when(productRepository.findAll(any(Specification.class))).thenReturn(List.of(product));
        when(productMapper.toResponse(any(Product.class))).thenReturn(productResponse);

        List<ProductResponse> result = productService.searchProducts(null, null, null, BigDecimal.TEN);

        assertThat(result).hasSize(1);
        verify(productRepository).findAll(any(Specification.class));
    }
}

---- Innehåll från: C:\git\Product-Service\src\test\java\se\moln\productservice\service\ProductSpecificationsTest.java ----
package se.moln.productservice.service;

import org.junit.jupiter.api.Test;
import org.springframework.data.jpa.domain.Specification;
import se.moln.productservice.model.Product;

import java.math.BigDecimal;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class ProductSpecificationsTest {

    @Test
    void hasNameLike_ShouldCreateNonNullSpecification() {
        // Given
        String searchName = "iPhone";

        // When
        Specification<Product> spec = ProductSpecifications.hasNameLike(searchName);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasNameLike_WithEmptyString_ShouldCreateNonNullSpecification() {
        // Given
        String searchName = "";

        // When
        Specification<Product> spec = ProductSpecifications.hasNameLike(searchName);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasNameLike_WithNullString_ShouldCreateNonNullSpecification() {
        // Given
        String searchName = null;

        // When
        Specification<Product> spec = ProductSpecifications.hasNameLike(searchName);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasCategoryName_ShouldCreateNonNullSpecification() {
        // Given
        String categoryName = "Electronics";

        // When
        Specification<Product> spec = ProductSpecifications.hasCategoryName(categoryName);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasCategoryName_WithEmptyString_ShouldCreateNonNullSpecification() {
        // Given
        String categoryName = "";

        // When
        Specification<Product> spec = ProductSpecifications.hasCategoryName(categoryName);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithBothPrices_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = BigDecimal.valueOf(100);
        BigDecimal maxPrice = BigDecimal.valueOf(500);

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithOnlyMinPrice_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = BigDecimal.valueOf(100);
        BigDecimal maxPrice = null;

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithOnlyMaxPrice_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = null;
        BigDecimal maxPrice = BigDecimal.valueOf(500);

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithBothPricesNull_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = null;
        BigDecimal maxPrice = null;

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithZeroPrices_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = BigDecimal.ZERO;
        BigDecimal maxPrice = BigDecimal.ZERO;

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void hasPriceBetween_WithNegativePrices_ShouldCreateNonNullSpecification() {
        // Given
        BigDecimal minPrice = BigDecimal.valueOf(-100);
        BigDecimal maxPrice = BigDecimal.valueOf(-50);

        // When
        Specification<Product> spec = ProductSpecifications.hasPriceBetween(minPrice, maxPrice);

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void fetchAttributes_ShouldCreateNonNullSpecification() {
        // When
        Specification<Product> spec = ProductSpecifications.fetchAttributes();

        // Then
        assertThat(spec).isNotNull();
    }

    @Test
    void specifications_ShouldBeCombinable() {
        // Given
        String name = "iPhone";
        String category = "Electronics";
        BigDecimal minPrice = BigDecimal.valueOf(100);
        BigDecimal maxPrice = BigDecimal.valueOf(1000);

        // When
        Specification<Product> combinedSpec = ProductSpecifications.fetchAttributes()
                .and(ProductSpecifications.hasNameLike(name))
                .and(ProductSpecifications.hasCategoryName(category))
                .and(ProductSpecifications.hasPriceBetween(minPrice, maxPrice));

        // Then
        assertThat(combinedSpec).isNotNull();
    }

    @Test
    void specifications_CanBeChainedWithOr() {
        // Given
        String name1 = "iPhone";
        String name2 = "Samsung";

        // When
        Specification<Product> combinedSpec = ProductSpecifications.hasNameLike(name1)
                .or(ProductSpecifications.hasNameLike(name2));

        // Then
        assertThat(combinedSpec).isNotNull();
    }

    @Test
    void specifications_CanBeNegated() {
        // Given
        String categoryName = "Electronics";

        // When
        Specification<Product> negatedSpec = Specification.not(ProductSpecifications.hasCategoryName(categoryName));

        // Then
        assertThat(negatedSpec).isNotNull();
    }

    @Test
    void hasPriceBetween_BothPrices_ExecutesBetweenPredicate() {
        // Given
        BigDecimal min = BigDecimal.ONE;
        BigDecimal max = BigDecimal.TEN;
        var spec = ProductSpecifications.hasPriceBetween(min, max);

        // Mock Criteria API
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Root<Product> root = mock(jakarta.persistence.criteria.Root.class);
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Path<BigDecimal> pricePath = mock(jakarta.persistence.criteria.Path.class);
        when(root.<BigDecimal>get("price")).thenReturn(pricePath);

        jakarta.persistence.criteria.CriteriaQuery<Product> query = mock(jakarta.persistence.criteria.CriteriaQuery.class);
        jakarta.persistence.criteria.CriteriaBuilder cb = mock(jakarta.persistence.criteria.CriteriaBuilder.class);
        jakarta.persistence.criteria.Predicate predicate = mock(jakarta.persistence.criteria.Predicate.class);
        when(cb.between(pricePath, min, max)).thenReturn(predicate);

        // When
        var out = spec.toPredicate(root, query, cb);

        // Then
        assertThat(out).isNotNull();
        verify(cb).between(pricePath, min, max);
    }

    @Test
    void hasPriceBetween_OnlyMin_ExecutesGtePredicate() {
        // Given
        BigDecimal min = BigDecimal.ONE;
        var spec = ProductSpecifications.hasPriceBetween(min, null);

        // Mock Criteria API
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Root<Product> root = mock(jakarta.persistence.criteria.Root.class);
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Path<BigDecimal> pricePath = mock(jakarta.persistence.criteria.Path.class);
        when(root.<BigDecimal>get("price")).thenReturn(pricePath);

        jakarta.persistence.criteria.CriteriaQuery<Product> query = mock(jakarta.persistence.criteria.CriteriaQuery.class);
        jakarta.persistence.criteria.CriteriaBuilder cb = mock(jakarta.persistence.criteria.CriteriaBuilder.class);
        jakarta.persistence.criteria.Predicate predicate = mock(jakarta.persistence.criteria.Predicate.class);
        when(cb.greaterThanOrEqualTo(pricePath, min)).thenReturn(predicate);

        // When
        var out = spec.toPredicate(root, query, cb);

        assertThat(out).isNotNull();
        verify(cb).greaterThanOrEqualTo(pricePath, min);
    }

    @Test
    void hasPriceBetween_OnlyMax_ExecutesGtePredicatePerCurrentImplementation() {
        // Given
        BigDecimal max = BigDecimal.TEN;
        var spec = ProductSpecifications.hasPriceBetween(null, max);

        // Mock Criteria API
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Root<Product> root = mock(jakarta.persistence.criteria.Root.class);
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Path<BigDecimal> pricePath = mock(jakarta.persistence.criteria.Path.class);
        when(root.<BigDecimal>get("price")).thenReturn(pricePath);

        jakarta.persistence.criteria.CriteriaQuery<Product> query = mock(jakarta.persistence.criteria.CriteriaQuery.class);
        jakarta.persistence.criteria.CriteriaBuilder cb = mock(jakarta.persistence.criteria.CriteriaBuilder.class);
        jakarta.persistence.criteria.Predicate predicate = mock(jakarta.persistence.criteria.Predicate.class);
        // Note: current production code uses greaterThanOrEqualTo for maxPrice path
        when(cb.greaterThanOrEqualTo(pricePath, max)).thenReturn(predicate);

        // When
        var out = spec.toPredicate(root, query, cb);

        // Then
        assertThat(out).isNotNull();
        verify(cb).greaterThanOrEqualTo(pricePath, max);
    }

    @Test
    void hasPriceBetween_BothNull_ExecutesConjunction() {
        // Given
        var spec = ProductSpecifications.hasPriceBetween(null, null);

        // Mock Criteria API
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Root<Product> root = mock(jakarta.persistence.criteria.Root.class);
        jakarta.persistence.criteria.CriteriaQuery<Product> query = mock(jakarta.persistence.criteria.CriteriaQuery.class);
        jakarta.persistence.criteria.CriteriaBuilder cb = mock(jakarta.persistence.criteria.CriteriaBuilder.class);
        jakarta.persistence.criteria.Predicate predicate = mock(jakarta.persistence.criteria.Predicate.class);
        when(cb.conjunction()).thenReturn(predicate);

        // When
        var out = spec.toPredicate(root, query, cb);

        // Then
        assertThat(out).isNotNull();
        verify(cb).conjunction();
    }

    @Test
    void fetchAttributes_ExecutesFetchAndDistinct() {
        // Given
        var spec = ProductSpecifications.fetchAttributes();

        // Mock Criteria API
        @SuppressWarnings("unchecked")
        jakarta.persistence.criteria.Root<Product> root = mock(jakarta.persistence.criteria.Root.class);
        // root.fetch("attributes") returns a Fetch but we don't use it, so we can just stub the call
        when(root.fetch("attributes")).thenReturn(null);

        jakarta.persistence.criteria.CriteriaQuery<Product> query = mock(jakarta.persistence.criteria.CriteriaQuery.class);
        when(query.distinct(true)).thenReturn(query);
        jakarta.persistence.criteria.Predicate predicate = mock(jakarta.persistence.criteria.Predicate.class);
        when(query.getRestriction()).thenReturn(predicate);
        jakarta.persistence.criteria.CriteriaBuilder cb = mock(jakarta.persistence.criteria.CriteriaBuilder.class);

        // When
        var out = spec.toPredicate(root, query, cb);

        // Then
        assertThat(out).isNotNull();
        verify(root).fetch("attributes");
        verify(query).distinct(true);
        verify(query).getRestriction();
    }

}

---- Innehåll från: C:\git\Product-Service\target\classes\application.properties ----
spring.application.name=product-service


spring.datasource.url=jdbc:h2:file:./data/products;DB_CLOSE_ON_EXIT=FALSE;LOCK_TIMEOUT=10000
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# JPA (auto create/update schema)
spring.jpa.defer-datasource-initialization=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true
spring.sql.init.mode=always
spring.jpa.open-in-view=false

springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.packages-to-scan=se.moln.productservice.controller

#image storage
app.upload.dir=uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Serer port
server.port=8081

# Logging levels
logging.level.se.moln.productservice=DEBUG
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.zalando.logbook=TRACE

# Actuator: configure access for health/info and expose them
management.endpoint.health.access=read-only
management.endpoint.info.access=read-only
management.endpoints.web.exposure.include=health,info

# Info endpoint metadata
info.app.name=product-service
info.app.description=Product Service with JSON logging, correlation IDs and HTTP I/O masking
info.app.version=0.0.1-SNAPSHOT

# Dev/demo admin user (protect admin-only endpoints)
spring.security.user.name=admin
spring.security.user.password=demo
spring.security.user.roles=ADMIN


---- Innehåll från: C:\git\Product-Service\target\classes\logback-spring.xml ----
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <springProperty scope="context" name="serviceName" source="spring.application.name" defaultValue="product-service"/>

  <appender name="JSON_CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <timestamp/>
        <logLevel/>
        <loggerName/>
        <threadName/>
        <mdc/>
        <message/>
        <stackTrace/>
        <provider class="net.logstash.logback.composite.GlobalCustomFieldsJsonProvider">
          <customFields>{"service":"${serviceName}"}</customFields>
        </provider>
      </providers>
    </encoder>
  </appender>

  <root level="INFO">
    <appender-ref ref="JSON_CONSOLE"/>
  </root>

  <!-- Standard log levels -->
  <logger name="org.springframework" level="INFO"/>
  <logger name="org.hibernate.SQL" level="WARN"/>
</configuration>

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\ProductServiceApplication.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\CorsConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\LocalSwaggerServersConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\LogbookConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\OpenApiConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\RequestIdFilter.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\SecurityConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\config\StaticResourceConfig.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\controller\AdminHealthController.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\controller\InventoryController.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\controller\ProductController.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\dto\AdjustStockRequest.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\dto\InventoryResponse.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\dto\PageResponse.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\dto\ProductRequest.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\dto\ProductResponse.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\exception\ApiExceptionHandler.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\exception\DuplicateProductException.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\exception\GlobalExceptionHandler.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\exception\ResourceNotFoundException.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\health\AppHealthIndicator.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\mappning\ProductMapper.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\model\Category.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\model\Inventory.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\model\Product.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\model\ProductImage.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\model\StockStatus.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\repository\CategoryRepository.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\repository\InventoryRepository.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\repository\ProductRepository.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\FileStorageService$StoredFile.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\FileStorageService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\InventoryService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\ProductImageAppService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\ProductQueryService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\ProductReadService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\ProductService.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\target\classes\se\moln\productservice\service\ProductSpecifications.class ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xca in position 0: invalid continuation byte

---- Innehåll från: C:\git\Product-Service\uploads\51422f73-7c1d-4b84-81a1-841c65bc07c2.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\7af5b11b-44fd-4361-b366-af57fd57a725.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\7bb3e53d-bdba-4d1b-97b9-45dc9f91eab5.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\83797ea4-bd6f-4054-a63f-d5cb2e825ee9.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\9635e50d-1509-4f7c-9b2c-808329e4ffc2.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\a55dac8b-6c42-4730-b694-95fa2592ac3a.png ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\b2c9d219-2398-49d7-9826-27d735d0ebd5.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\b57c2080-adc0-4ed6-a9d1-8b676e45d82f.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\d9c0fb99-3d47-4be9-b276-358837b79885.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\e82a5b05-bbc8-4765-bb90-850310655565.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\eaebd4a2-5428-409f-8412-de7eaaa59ea1.jpeg ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

---- Innehåll från: C:\git\Product-Service\uploads\eb799bd7-6e3e-4c02-b88a-2af01cf8f72b.png ----
Fel vid läsning av fil: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte

